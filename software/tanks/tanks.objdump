
tanks.elf:     file format elf32-littlenios2
tanks.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00012a28 memsz 0x00012a28 flags r-x
    LOAD off    0x00013a48 vaddr 0x01012a48 paddr 0x01014598 align 2**12
         filesz 0x00001b50 memsz 0x00001b50 flags rw-
    LOAD off    0x000160e8 vaddr 0x010160e8 paddr 0x010160e8 align 2**12
         filesz 0x00000000 memsz 0x00000890 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012378  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000051c  0101252c  0101252c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b50  01012a48  01014598  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000890  010160e8  010160e8  000160e8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00015598  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  000155c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001d03  00000000  00000000  00016398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002786a  00000000  00000000  0001809b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000088b1  00000000  00000000  0003f905  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016b6a  00000000  00000000  000481b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ffc  00000000  00000000  0005ed20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025da  00000000  00000000  00060d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cacd  00000000  00000000  000632f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006fdc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a80  00000000  00000000  0006fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000745aa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000745ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000745bc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000745bd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000745be  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000745c9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000745d4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000745df  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  000745ea  2**0
                  CONTENTS, READONLY
 26 .jdi          00005b31  00000000  00000000  00074613  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00084fe1  00000000  00000000  0007a144  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0101252c l    d  .rodata	00000000 .rodata
01012a48 l    d  .rwdata	00000000 .rwdata
010160e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01001270 l     F .text	00000058 __sprint_r
010127d2 l     O .rodata	00000010 blanks.3452
010127c2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010032ec l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01004d14 l     F .text	00000058 std
01004e20 l     F .text	00000008 __fp_lock
01004e28 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01012a48 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
01014564 l     O .rwdata	00000004 charset
01012808 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01012950 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
010091d4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100a300 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a870 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a8d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a9d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100aaf8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100abd8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100ad38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100af68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01014588 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100b220 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01013404 l     O .rwdata	00001060 jtag_uart_0
01014464 l     O .rwdata	0000002c character_lcd_0
01014490 l     O .rwdata	00000048 char_drawer
010144d8 l     O .rwdata	00000054 pixel_buffer_dma
0101452c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0100b608 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100b848 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100ba70 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100c0ec l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01011384 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0101183c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101198c l     F .text	000000f8 alt_file_locked
01011c10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010122a8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0101245c l     F .text	00000040 alt_sim_halt
01016120 g     O .bss	00000004 aux_status_register
01006b04 g     F .text	00000094 _mprec_log10
01006bf0 g     F .text	00000088 __any_on
010083a8 g     F .text	00000070 _isatty_r
01012928 g     O .rodata	00000028 __mprec_tinytens
0100ad98 g     F .text	0000006c alt_main
01001148 g     F .text	000000a0 _puts_r
010166e8 g     O .bss	00000100 alt_irq
01008418 g     F .text	00000078 _lseek_r
01014598 g       *ABS*	00000000 __flash_rwdata_start
0100c3d0 g     F .text	00000034 alt_up_character_lcd_send_cmd
01009cf4 g     F .text	00000088 __eqdf2
0100cf38 g     F .text	000001b0 Check_for_Master_Boot_Record
01016978 g       *ABS*	00000000 __alt_heap_start
01010e00 g     F .text	000001d4 alt_up_sd_card_fclose
010010d0 g     F .text	00000044 printf
01007e60 g     F .text	00000068 __sseek
01004d7c g     F .text	000000a4 __sinit
0100ca18 g     F .text	00000114 alt_up_char_buffer_string
01005a88 g     F .text	00000084 _setlocale_r
01004e7c g     F .text	0000009c __sfmoreglue
0100ae24 g     F .text	00000020 __malloc_unlock
0100081c g     F .text	00000174 __divsf3
01016144 g     O .bss	00000004 current_sector_modified
0100c948 g     F .text	000000d0 alt_up_char_buffer_draw
010110d0 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
01016114 g     O .bss	00000004 altera_avalon_timer_ts_freq
01006580 g     F .text	000000e0 memmove
01004e6c g     F .text	00000010 _cleanup
01006c78 g     F .text	000000bc _Balloc
0100f9bc g     F .text	000000c8 alt_up_sd_card_is_Present
0100cc50 g     F .text	00000050 Save_Modified_Sector
01009e04 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100c354 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
0101613c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
01008334 g     F .text	00000074 _fstat_r
01016100 g     O .bss	00000004 errno
01000aa4 g     F .text	00000038 __make_dp
01016108 g     O .bss	00000004 alt_argv
0101c558 g       *ABS*	00000000 _gp
0100ff7c g     F .text	000003a8 alt_up_sd_card_fopen
0100faf8 g     F .text	000000d4 alt_up_sd_card_find_first
01016130 g     O .bss	00000004 command_argument_register
01013284 g     O .rwdata	00000180 alt_fd_list
0100f1e4 g     F .text	0000012c find_first_empty_record_in_root_directory
010114ac g     F .text	00000094 alt_find_dev
010064e0 g     F .text	000000a0 memcpy
0100c568 g     F .text	0000004c alt_up_character_lcd_write_fd
0100cb2c g     F .text	0000005c alt_up_char_buffer_clear
01004e60 g     F .text	0000000c _cleanup_r
01009f9c g     F .text	000000f8 __floatsidf
01011914 g     F .text	00000078 alt_io_redirect
01009f14 g     F .text	00000088 __ltdf2
0101252c g       *ABS*	00000000 __DTOR_END__
010011e8 g     F .text	00000014 puts
0100edf4 g     F .text	000001a4 find_first_empty_cluster
01006a54 g     F .text	000000b0 __ratio
0100f8f8 g     F .text	000000c4 alt_up_sd_card_open_dev
0100bc88 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01001114 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100a43c g     F .text	00000008 __udivsi3
0100aa34 g     F .text	000000c4 isatty
01012838 g     O .rodata	000000c8 __mprec_tens
01005a64 g     F .text	00000008 __locale_charset
01012024 g     F .text	00000090 alt_icache_flush
010160f4 g     O .bss	00000004 __malloc_top_pad
01014560 g     O .rwdata	00000004 __mb_cur_max
01005a6c g     F .text	0000000c _localeconv_r
010073dc g     F .text	0000003c __i2b
01005448 g     F .text	0000049c __sfvwrite_r
0100e0d0 g     F .text	000000c0 get_dir_divider_location
01000220 g     F .text	000004cc timer_test
01007de8 g     F .text	00000070 _sbrk_r
0100dd70 g     F .text	000000d0 filename_to_upper_case
01010324 g     F .text	00000090 alt_up_sd_card_set_attributes
0100d0e8 g     F .text	00000284 Read_File_Record_At_Offset
01008490 g     F .text	00000078 _read_r
01012e48 g     O .rwdata	0000000c __lc_ctype
01014580 g     O .rwdata	00000004 alt_max_fd
0100a570 g     F .text	00000138 __unpack_d
0100e990 g     F .text	00000464 find_file_in_directory
01008210 g     F .text	00000110 _fclose_r
01004ce0 g     F .text	00000034 fflush
010160f8 g     O .bss	00000004 __malloc_max_sbrked_mem
01000990 g     F .text	00000054 __extendsfdf2
0100fa84 g     F .text	00000074 alt_up_sd_card_is_FAT16
01009664 g     F .text	00000074 __adddf3
01006934 g     F .text	00000120 __b2d
01008b74 g     F .text	00000660 __umoddi3
0100ac44 g     F .text	000000f4 lseek
0101455c g     O .rwdata	00000004 _global_impure_ptr
0100e47c g     F .text	00000514 get_home_directory_cluster_for_file
01007784 g     F .text	000005f4 _realloc_r
01016978 g       *ABS*	00000000 __bss_end
01011744 g     F .text	000000f8 alt_iic_isr_register
01011d08 g     F .text	0000010c alt_tick
01008508 g     F .text	0000066c __udivdi3
01012900 g     O .rodata	00000028 __mprec_bigtens
01007664 g     F .text	00000120 __s2b
0100a16c g     F .text	00000194 __floatunsidf
01006854 g     F .text	00000060 __mcmp
01016148 g     O .bss	00000004 current_sector_index
01004e48 g     F .text	00000018 __fp_lock_all
010116fc g     F .text	00000048 alt_ic_irq_enabled
01011c70 g     F .text	00000098 alt_alarm_stop
0100ce54 g     F .text	000000e4 mark_cluster
0101614c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
0101325c g     O .rwdata	00000028 alt_dev_null
0100f310 g     F .text	000001b8 convert_filename_to_name_extension
01000cf4 g     F .text	000000c8 __unpack_f
0100c850 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010112b4 g     F .text	0000001c alt_dcache_flush_all
01006720 g     F .text	00000070 __hi0bits
0101611c g     O .bss	00000004 is_sd_card_formated_as_FAT16
0100a094 g     F .text	000000d8 __fixdfsi
0100ef98 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
01014598 g       *ABS*	00000000 __ram_rwdata_end
01014578 g     O .rwdata	00000008 alt_dev_list
0100b0fc g     F .text	00000124 write
01016140 g     O .bss	00000004 device_pointer
0100c32c g     F .text	00000028 alt_timestamp_freq
01012a48 g       *ABS*	00000000 __ram_rodata_end
0100a8fc g     F .text	000000d8 fstat
01007544 g     F .text	00000120 __pow5mult
010160e8 g     O .bss	00000004 __nlocale_changed
0100a444 g     F .text	00000008 __umodsi3
01016978 g       *ABS*	00000000 end
01000b94 g     F .text	00000160 __pack_f
0100c884 g     F .text	00000084 alt_up_char_buffer_init
0100b788 g     F .text	000000c0 altera_avalon_jtag_uart_init
01012528 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100c15c g     F .text	00000090 alt_avalon_timer_sc_init
01000b14 g     F .text	00000080 __clzsi2
0100beac g     F .text	00000240 altera_avalon_jtag_uart_write
01004d6c g     F .text	00000004 __sfp_lock_acquire
010063fc g     F .text	000000e4 memchr
0100c478 g     F .text	00000078 alt_up_character_lcd_write
010012c8 g     F .text	00001ec4 ___vfprintf_internal_r
01005134 g     F .text	00000314 _free_r
010122ac g     F .text	000001b0 __call_exitprocs
010160ec g     O .bss	00000004 __mlocale_changed
0101456c g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
01016150 g     O .bss	00000004 _alt_tick_rate
0100703c g     F .text	0000014c __lshift
01016154 g     O .bss	00000004 _alt_nticks
0100ae44 g     F .text	00000124 read
0100b2b4 g     F .text	00000354 alt_sys_init
0100c6dc g     F .text	000000b0 alt_up_character_lcd_shift_display
01012174 g     F .text	00000134 __register_exitproc
01007188 g     F .text	00000254 __multiply
0100c78c g     F .text	00000090 alt_up_character_lcd_erase_pos
0100bb20 g     F .text	00000074 altera_avalon_jtag_uart_close
01000adc g     F .text	00000038 __mulsi3
01012a48 g       *ABS*	00000000 __ram_rwdata_start
0101252c g       *ABS*	00000000 __ram_rodata_start
01016158 g     O .bss	00000028 __malloc_current_mallinfo
01006d34 g     F .text	0000017c __d2b
01016118 g     O .bss	00000004 initialized
0100b640 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01011f54 g     F .text	000000d0 alt_get_fd
01016180 g     O .bss	00000014 search_data
0100a6a8 g     F .text	000000c8 __fpcmp_parts_d
010081a0 g     F .text	00000070 _close_r
01012100 g     F .text	00000074 memcmp
0100b6f0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01016978 g       *ABS*	00000000 __alt_stack_base
0100b738 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010031b0 g     F .text	0000013c __swsetup_r
01009a9c g     F .text	00000258 __divdf3
01004f18 g     F .text	000000f0 __sfp
01016194 g     O .bss	00000054 boot_sector_data
01006b98 g     F .text	00000058 __copybits
01012e54 g     O .rwdata	00000408 __malloc_av_
01004d78 g     F .text	00000004 __sinit_lock_release
010096d8 g     F .text	000003c4 __muldf3
01007f44 g     F .text	00000060 __sread
01012650 g     O .rodata	00000010 __thenan_sf
01011e34 g     F .text	00000120 alt_find_file
010112d0 g     F .text	000000b4 alt_dev_llist_insert
0100ae04 g     F .text	00000020 __malloc_lock
0100b040 g     F .text	000000bc sbrk
01004ae4 g     F .text	000001fc _fflush_r
010080d8 g     F .text	000000c8 _calloc_r
010160e8 g       *ABS*	00000000 __bss_start
01006660 g     F .text	00000098 memset
010001f0 g     F .text	00000030 main
0101610c g     O .bss	00000004 alt_envp
010160fc g     O .bss	00000004 __malloc_max_total_mem
0100c908 g     F .text	00000040 alt_up_char_buffer_open_dev
0100b698 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
010103b4 g     F .text	0000008c alt_up_sd_card_get_attributes
0100cb88 g     F .text	000000c8 Write_Sector_Data
010107dc g     F .text	00000624 alt_up_sd_card_write
0100c62c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01007e58 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01008320 g     F .text	00000014 fclose
0100c1ec g     F .text	000000a4 alt_timestamp_start
010167e8 g     O .bss	00000190 _atexit0
01003530 g     F .text	000015b4 _dtoa_r
01005cbc g     F .text	00000740 _malloc_r
01014584 g     O .rwdata	00000004 alt_errno
010059ac g     F .text	000000b8 _fwalk
0100a37c g     F .text	00000060 __divsi3
0101295c g     O .rodata	00000014 __thenan_df
0100c438 g     F .text	00000040 alt_up_character_lcd_open_dev
01005008 g     F .text	0000012c _malloc_trim_r
0101252c g       *ABS*	00000000 __CTOR_END__
01016124 g     O .bss	00000004 status_register
0100c404 g     F .text	00000034 alt_up_character_lcd_init
01007fa4 g     F .text	000000bc strcmp
0101612c g     O .bss	00000004 command_register
0101252c g       *ABS*	00000000 __flash_rodata_start
0101252c g       *ABS*	00000000 __DTOR_LIST__
01009d7c g     F .text	00000088 __nedf2
0100b280 g     F .text	00000034 alt_irq_init
0100afc8 g     F .text	00000078 alt_release_fd
0100cd9c g     F .text	000000b8 get_cluster_flag
0100c81c g     F .text	00000034 alt_up_character_lcd_cursor_off
01012660 g     O .rodata	00000100 __clz_tab
0100d36c g     F .text	000002b8 Write_File_Record_At_Offset
010160f0 g     O .bss	00000004 _PathLocale
010120b4 g     F .text	00000014 atexit
01008060 g     F .text	00000078 _write_r
01005b0c g     F .text	0000001c setlocale
0100d624 g     F .text	00000648 Check_for_DOS_FAT
0100f4c8 g     F .text	000002dc create_file
01014558 g     O .rwdata	00000004 _impure_ptr
01016128 g     O .bss	00000004 CSD_register_w0
01016104 g     O .bss	00000004 alt_argc
01016110 g     O .bss	00000004 altera_avalon_timer_ts_base
01011448 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
010068b4 g     F .text	00000080 __ulp
01007d78 g     F .text	00000040 __isinfd
01004e30 g     F .text	00000018 __fp_unlock_all
01014570 g     O .rwdata	00000008 alt_fs_list
0100de40 g     F .text	00000290 check_file_name_for_FAT16_compliance
01016134 g     O .bss	00000004 buffer_memory
01000020 g       *ABS*	00000000 __ram_exceptions_start
01005a78 g     F .text	00000010 localeconv
0100c290 g     F .text	0000009c alt_timestamp
01011570 g     F .text	00000050 alt_ic_isr_register
01016138 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
01014598 g       *ABS*	00000000 _edata
01016978 g       *ABS*	00000000 _end
010161e8 g     O .bss	00000500 active_files
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100f7a4 g     F .text	00000154 copy_file_record_name_to_string
0100bb94 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100dc6c g     F .text	00000104 Look_for_FAT16
0101165c g     F .text	000000a0 alt_ic_irq_disable
01007ec8 g     F .text	0000007c __swrite
01014568 g     O .rwdata	00000004 __malloc_trim_threshold
01011e14 g     F .text	00000020 altera_nios2_qsys_irq_init
010120c8 g     F .text	00000038 exit
0100fbcc g     F .text	000003b0 alt_up_sd_card_find_next
010058e4 g     F .text	000000c8 _fwalk_reent
010009e4 g     F .text	000000c0 __floatunsisf
01006eb0 g     F .text	0000018c __mdiff
010006ec g     F .text	00000130 sd_card
0100a3dc g     F .text	00000060 __modsi3
0100cca0 g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004d70 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100c4f0 g     F .text	00000078 alt_up_character_lcd_string
0101249c g     F .text	00000020 _exit
01007db8 g     F .text	00000030 __isnand
01011160 g     F .text	00000154 alt_alarm_start
0100a44c g     F .text	00000124 __muldi3
01010fd4 g     F .text	000000fc Read_Sector_Data_CRC
01010440 g     F .text	0000039c alt_up_sd_card_read
01005b28 g     F .text	00000194 __smakebuf_r
010011fc g     F .text	00000074 strlen
01011a84 g     F .text	0000018c open
01009e8c g     F .text	00000088 __gedf2
01011540 g     F .text	00000030 alt_icache_flush_all
0100c5b4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101458c g     O .rwdata	00000004 alt_priority_mask
010115c0 g     F .text	0000009c alt_ic_irq_enable
0100318c g     F .text	00000024 __vfprintf_internal
010095e4 g     F .text	00000080 __subdf3
01006790 g     F .text	000000c4 __lo0bits
01014590 g     O .rwdata	00000008 alt_alarm_list
010113e4 g     F .text	00000064 _do_ctors
0100a770 g     F .text	00000100 close
0100ab58 g     F .text	00000080 alt_load
01000dbc g     F .text	00000314 __pack_d
0100e190 g     F .text	000002ec match_file_record_to_name_ext
00000000  w      *UND*	00000000 free
01004d74 g     F .text	00000004 __sinit_lock_acquire
01007418 g     F .text	0000012c __multadd
010066f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18d9ba04 	addi	r3,r3,26344
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18d9ba04 	addi	r3,r3,26344
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6b15614 	ori	gp,gp,50520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10983a14 	ori	r2,r2,24808

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18da5e14 	ori	r3,r3,27000

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100ab580 	call	100ab58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100ad980 	call	100ad98 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:

void timer_test(void);
void sd_card (void);


int main(void) {
 10001f0:	defffe04 	addi	sp,sp,-8
 10001f4:	dfc00115 	stw	ra,4(sp)
 10001f8:	df000015 	stw	fp,0(sp)
 10001fc:	d839883a 	mov	fp,sp
	timer_test();
 1000200:	10002200 	call	1000220 <timer_test>
	sd_card();
 1000204:	10006ec0 	call	10006ec <sd_card>
	return 0;
 1000208:	0005883a 	mov	r2,zero
}
 100020c:	e037883a 	mov	sp,fp
 1000210:	dfc00117 	ldw	ra,4(sp)
 1000214:	df000017 	ldw	fp,0(sp)
 1000218:	dec00204 	addi	sp,sp,8
 100021c:	f800283a 	ret

01000220 <timer_test>:

//from exercise 1.2 creates two 100 by 100 array and multiply them and time it
void timer_test(void) {
 1000220:	defffb04 	addi	sp,sp,-20
 1000224:	dfc00415 	stw	ra,16(sp)
 1000228:	df000315 	stw	fp,12(sp)
 100022c:	dc800215 	stw	r18,8(sp)
 1000230:	dc400115 	stw	r17,4(sp)
 1000234:	dc000015 	stw	r16,0(sp)
 1000238:	d839883a 	mov	fp,sp
 100023c:	023fffb4 	movhi	r8,65534
 1000240:	420aca04 	addi	r8,r8,11048
 1000244:	da37883a 	add	sp,sp,r8
	int i,k,j;
	int sum;
	unsigned int start_time;
	unsigned int end_time;

	start_time=(unsigned int)alt_timestamp_start();
 1000248:	100c1ec0 	call	100c1ec <alt_timestamp_start>
 100024c:	00ffffb4 	movhi	r3,65534
 1000250:	18cacb04 	addi	r3,r3,11052
 1000254:	1f07883a 	add	r3,r3,fp
 1000258:	18800015 	stw	r2,0(r3)
	for(i=0;i<100;i++)
 100025c:	013fffb4 	movhi	r4,65534
 1000260:	210acf04 	addi	r4,r4,11068
 1000264:	2709883a 	add	r4,r4,fp
 1000268:	20000015 	stw	zero,0(r4)
 100026c:	00004c06 	br	10003a0 <timer_test+0x180>
	{
		for(j=0; j<100;j++)
 1000270:	00bfffb4 	movhi	r2,65534
 1000274:	108acd04 	addi	r2,r2,11060
 1000278:	1705883a 	add	r2,r2,fp
 100027c:	10000015 	stw	zero,0(r2)
 1000280:	00003806 	br	1000364 <timer_test+0x144>
		{
			a[i][j]=i;
 1000284:	00ffffb4 	movhi	r3,65534
 1000288:	18cacf04 	addi	r3,r3,11068
 100028c:	1f07883a 	add	r3,r3,fp
 1000290:	19000017 	ldw	r4,0(r3)
 1000294:	00bfffb4 	movhi	r2,65534
 1000298:	108acd04 	addi	r2,r2,11060
 100029c:	1705883a 	add	r2,r2,fp
 10002a0:	14000017 	ldw	r16,0(r2)
 10002a4:	01401904 	movi	r5,100
 10002a8:	1000adc0 	call	1000adc <__mulsi3>
 10002ac:	1405883a 	add	r2,r2,r16
 10002b0:	1085883a 	add	r2,r2,r2
 10002b4:	1085883a 	add	r2,r2,r2
 10002b8:	00ffffb4 	movhi	r3,65534
 10002bc:	18caca04 	addi	r3,r3,11048
 10002c0:	1f07883a 	add	r3,r3,fp
 10002c4:	10c5883a 	add	r2,r2,r3
 10002c8:	10c00604 	addi	r3,r2,24
 10002cc:	013fffb4 	movhi	r4,65534
 10002d0:	210acf04 	addi	r4,r4,11068
 10002d4:	2709883a 	add	r4,r4,fp
 10002d8:	20800017 	ldw	r2,0(r4)
 10002dc:	18800015 	stw	r2,0(r3)
			b[i][j]=j;
 10002e0:	00bfffb4 	movhi	r2,65534
 10002e4:	108acf04 	addi	r2,r2,11068
 10002e8:	1705883a 	add	r2,r2,fp
 10002ec:	11000017 	ldw	r4,0(r2)
 10002f0:	00ffffb4 	movhi	r3,65534
 10002f4:	18cacd04 	addi	r3,r3,11060
 10002f8:	1f07883a 	add	r3,r3,fp
 10002fc:	1c000017 	ldw	r16,0(r3)
 1000300:	00a71614 	movui	r2,40024
 1000304:	00ffffb4 	movhi	r3,65534
 1000308:	18caca04 	addi	r3,r3,11048
 100030c:	1f07883a 	add	r3,r3,fp
 1000310:	18a3883a 	add	r17,r3,r2
 1000314:	01401904 	movi	r5,100
 1000318:	1000adc0 	call	1000adc <__mulsi3>
 100031c:	1405883a 	add	r2,r2,r16
 1000320:	1085883a 	add	r2,r2,r2
 1000324:	1085883a 	add	r2,r2,r2
 1000328:	1447883a 	add	r3,r2,r17
 100032c:	013fffb4 	movhi	r4,65534
 1000330:	210acd04 	addi	r4,r4,11060
 1000334:	2709883a 	add	r4,r4,fp
 1000338:	20800017 	ldw	r2,0(r4)
 100033c:	18800015 	stw	r2,0(r3)
	unsigned int end_time;

	start_time=(unsigned int)alt_timestamp_start();
	for(i=0;i<100;i++)
	{
		for(j=0; j<100;j++)
 1000340:	00ffffb4 	movhi	r3,65534
 1000344:	18cacd04 	addi	r3,r3,11060
 1000348:	1f07883a 	add	r3,r3,fp
 100034c:	18800017 	ldw	r2,0(r3)
 1000350:	10800044 	addi	r2,r2,1
 1000354:	013fffb4 	movhi	r4,65534
 1000358:	210acd04 	addi	r4,r4,11060
 100035c:	2709883a 	add	r4,r4,fp
 1000360:	20800015 	stw	r2,0(r4)
 1000364:	00ffffb4 	movhi	r3,65534
 1000368:	18cacd04 	addi	r3,r3,11060
 100036c:	1f07883a 	add	r3,r3,fp
 1000370:	18800017 	ldw	r2,0(r3)
 1000374:	10801910 	cmplti	r2,r2,100
 1000378:	103fc21e 	bne	r2,zero,1000284 <timer_test+0x64>
	int sum;
	unsigned int start_time;
	unsigned int end_time;

	start_time=(unsigned int)alt_timestamp_start();
	for(i=0;i<100;i++)
 100037c:	013fffb4 	movhi	r4,65534
 1000380:	210acf04 	addi	r4,r4,11068
 1000384:	2709883a 	add	r4,r4,fp
 1000388:	20800017 	ldw	r2,0(r4)
 100038c:	10800044 	addi	r2,r2,1
 1000390:	00ffffb4 	movhi	r3,65534
 1000394:	18cacf04 	addi	r3,r3,11068
 1000398:	1f07883a 	add	r3,r3,fp
 100039c:	18800015 	stw	r2,0(r3)
 10003a0:	013fffb4 	movhi	r4,65534
 10003a4:	210acf04 	addi	r4,r4,11068
 10003a8:	2709883a 	add	r4,r4,fp
 10003ac:	20800017 	ldw	r2,0(r4)
 10003b0:	10801910 	cmplti	r2,r2,100
 10003b4:	103fae1e 	bne	r2,zero,1000270 <timer_test+0x50>
			b[i][j]=j;
		}
	}


	for(i=0;i<100;i++){
 10003b8:	00bfffb4 	movhi	r2,65534
 10003bc:	108acf04 	addi	r2,r2,11068
 10003c0:	1705883a 	add	r2,r2,fp
 10003c4:	10000015 	stw	zero,0(r2)
 10003c8:	00008106 	br	10005d0 <timer_test+0x3b0>
		for(j=0;j<100;j++){
 10003cc:	00ffffb4 	movhi	r3,65534
 10003d0:	18cacd04 	addi	r3,r3,11060
 10003d4:	1f07883a 	add	r3,r3,fp
 10003d8:	18000015 	stw	zero,0(r3)
 10003dc:	00006d06 	br	1000594 <timer_test+0x374>
			sum=0;
 10003e0:	013fffb4 	movhi	r4,65534
 10003e4:	210acc04 	addi	r4,r4,11056
 10003e8:	2709883a 	add	r4,r4,fp
 10003ec:	20000015 	stw	zero,0(r4)
			for(k=0;k<100;k++){
 10003f0:	00bfffb4 	movhi	r2,65534
 10003f4:	108ace04 	addi	r2,r2,11064
 10003f8:	1705883a 	add	r2,r2,fp
 10003fc:	10000015 	stw	zero,0(r2)
 1000400:	00003c06 	br	10004f4 <timer_test+0x2d4>
				sum=sum + a[i][k]*b[k][j];
 1000404:	00ffffb4 	movhi	r3,65534
 1000408:	18cacf04 	addi	r3,r3,11068
 100040c:	1f07883a 	add	r3,r3,fp
 1000410:	19000017 	ldw	r4,0(r3)
 1000414:	00bfffb4 	movhi	r2,65534
 1000418:	108ace04 	addi	r2,r2,11064
 100041c:	1705883a 	add	r2,r2,fp
 1000420:	14000017 	ldw	r16,0(r2)
 1000424:	01401904 	movi	r5,100
 1000428:	1000adc0 	call	1000adc <__mulsi3>
 100042c:	1405883a 	add	r2,r2,r16
 1000430:	1085883a 	add	r2,r2,r2
 1000434:	1085883a 	add	r2,r2,r2
 1000438:	00ffffb4 	movhi	r3,65534
 100043c:	18caca04 	addi	r3,r3,11048
 1000440:	1f07883a 	add	r3,r3,fp
 1000444:	10c5883a 	add	r2,r2,r3
 1000448:	10800604 	addi	r2,r2,24
 100044c:	14800017 	ldw	r18,0(r2)
 1000450:	00bfffb4 	movhi	r2,65534
 1000454:	108ace04 	addi	r2,r2,11064
 1000458:	1705883a 	add	r2,r2,fp
 100045c:	11000017 	ldw	r4,0(r2)
 1000460:	00ffffb4 	movhi	r3,65534
 1000464:	18cacd04 	addi	r3,r3,11060
 1000468:	1f07883a 	add	r3,r3,fp
 100046c:	1c000017 	ldw	r16,0(r3)
 1000470:	00a71614 	movui	r2,40024
 1000474:	00ffffb4 	movhi	r3,65534
 1000478:	18caca04 	addi	r3,r3,11048
 100047c:	1f07883a 	add	r3,r3,fp
 1000480:	18a3883a 	add	r17,r3,r2
 1000484:	01401904 	movi	r5,100
 1000488:	1000adc0 	call	1000adc <__mulsi3>
 100048c:	1405883a 	add	r2,r2,r16
 1000490:	1085883a 	add	r2,r2,r2
 1000494:	1085883a 	add	r2,r2,r2
 1000498:	1445883a 	add	r2,r2,r17
 100049c:	11400017 	ldw	r5,0(r2)
 10004a0:	9009883a 	mov	r4,r18
 10004a4:	1000adc0 	call	1000adc <__mulsi3>
 10004a8:	1007883a 	mov	r3,r2
 10004ac:	013fffb4 	movhi	r4,65534
 10004b0:	210acc04 	addi	r4,r4,11056
 10004b4:	2709883a 	add	r4,r4,fp
 10004b8:	20800017 	ldw	r2,0(r4)
 10004bc:	10c5883a 	add	r2,r2,r3
 10004c0:	00ffffb4 	movhi	r3,65534
 10004c4:	18cacc04 	addi	r3,r3,11056
 10004c8:	1f07883a 	add	r3,r3,fp
 10004cc:	18800015 	stw	r2,0(r3)


	for(i=0;i<100;i++){
		for(j=0;j<100;j++){
			sum=0;
			for(k=0;k<100;k++){
 10004d0:	013fffb4 	movhi	r4,65534
 10004d4:	210ace04 	addi	r4,r4,11064
 10004d8:	2709883a 	add	r4,r4,fp
 10004dc:	20800017 	ldw	r2,0(r4)
 10004e0:	10800044 	addi	r2,r2,1
 10004e4:	00ffffb4 	movhi	r3,65534
 10004e8:	18cace04 	addi	r3,r3,11064
 10004ec:	1f07883a 	add	r3,r3,fp
 10004f0:	18800015 	stw	r2,0(r3)
 10004f4:	013fffb4 	movhi	r4,65534
 10004f8:	210ace04 	addi	r4,r4,11064
 10004fc:	2709883a 	add	r4,r4,fp
 1000500:	20800017 	ldw	r2,0(r4)
 1000504:	10801910 	cmplti	r2,r2,100
 1000508:	103fbe1e 	bne	r2,zero,1000404 <timer_test+0x1e4>
				sum=sum + a[i][k]*b[k][j];
			}
			c[i][j]=sum;
 100050c:	00bfffb4 	movhi	r2,65534
 1000510:	108acf04 	addi	r2,r2,11068
 1000514:	1705883a 	add	r2,r2,fp
 1000518:	11000017 	ldw	r4,0(r2)
 100051c:	00ffffb4 	movhi	r3,65534
 1000520:	18cacd04 	addi	r3,r3,11060
 1000524:	1f07883a 	add	r3,r3,fp
 1000528:	1c000017 	ldw	r16,0(r3)
 100052c:	00800074 	movhi	r2,1
 1000530:	108e2604 	addi	r2,r2,14488
 1000534:	00ffffb4 	movhi	r3,65534
 1000538:	18caca04 	addi	r3,r3,11048
 100053c:	1f07883a 	add	r3,r3,fp
 1000540:	18a3883a 	add	r17,r3,r2
 1000544:	01401904 	movi	r5,100
 1000548:	1000adc0 	call	1000adc <__mulsi3>
 100054c:	1405883a 	add	r2,r2,r16
 1000550:	1085883a 	add	r2,r2,r2
 1000554:	1085883a 	add	r2,r2,r2
 1000558:	1447883a 	add	r3,r2,r17
 100055c:	013fffb4 	movhi	r4,65534
 1000560:	210acc04 	addi	r4,r4,11056
 1000564:	2709883a 	add	r4,r4,fp
 1000568:	20800017 	ldw	r2,0(r4)
 100056c:	18800015 	stw	r2,0(r3)
		}
	}


	for(i=0;i<100;i++){
		for(j=0;j<100;j++){
 1000570:	00ffffb4 	movhi	r3,65534
 1000574:	18cacd04 	addi	r3,r3,11060
 1000578:	1f07883a 	add	r3,r3,fp
 100057c:	18800017 	ldw	r2,0(r3)
 1000580:	10800044 	addi	r2,r2,1
 1000584:	013fffb4 	movhi	r4,65534
 1000588:	210acd04 	addi	r4,r4,11060
 100058c:	2709883a 	add	r4,r4,fp
 1000590:	20800015 	stw	r2,0(r4)
 1000594:	00ffffb4 	movhi	r3,65534
 1000598:	18cacd04 	addi	r3,r3,11060
 100059c:	1f07883a 	add	r3,r3,fp
 10005a0:	18800017 	ldw	r2,0(r3)
 10005a4:	10801910 	cmplti	r2,r2,100
 10005a8:	103f8d1e 	bne	r2,zero,10003e0 <timer_test+0x1c0>
			b[i][j]=j;
		}
	}


	for(i=0;i<100;i++){
 10005ac:	013fffb4 	movhi	r4,65534
 10005b0:	210acf04 	addi	r4,r4,11068
 10005b4:	2709883a 	add	r4,r4,fp
 10005b8:	20800017 	ldw	r2,0(r4)
 10005bc:	10800044 	addi	r2,r2,1
 10005c0:	00ffffb4 	movhi	r3,65534
 10005c4:	18cacf04 	addi	r3,r3,11068
 10005c8:	1f07883a 	add	r3,r3,fp
 10005cc:	18800015 	stw	r2,0(r3)
 10005d0:	013fffb4 	movhi	r4,65534
 10005d4:	210acf04 	addi	r4,r4,11068
 10005d8:	2709883a 	add	r4,r4,fp
 10005dc:	20800017 	ldw	r2,0(r4)
 10005e0:	10801910 	cmplti	r2,r2,100
 10005e4:	103f791e 	bne	r2,zero,10003cc <timer_test+0x1ac>
				sum=sum + a[i][k]*b[k][j];
			}
			c[i][j]=sum;
		}
	}
	end_time=(unsigned int)alt_timestamp();
 10005e8:	100c2900 	call	100c290 <alt_timestamp>
 10005ec:	00ffffb4 	movhi	r3,65534
 10005f0:	18caca04 	addi	r3,r3,11048
 10005f4:	1f07883a 	add	r3,r3,fp
 10005f8:	18800015 	stw	r2,0(r3)
	printf("start time: %u clock ticks\n",start_time);
 10005fc:	01004074 	movhi	r4,257
 1000600:	21094b04 	addi	r4,r4,9516
 1000604:	00bfffb4 	movhi	r2,65534
 1000608:	108acb04 	addi	r2,r2,11052
 100060c:	1705883a 	add	r2,r2,fp
 1000610:	11400017 	ldw	r5,0(r2)
 1000614:	10010d00 	call	10010d0 <printf>
	printf("end time: %u clock ticks\n",end_time);
 1000618:	01004074 	movhi	r4,257
 100061c:	21095204 	addi	r4,r4,9544
 1000620:	00ffffb4 	movhi	r3,65534
 1000624:	18caca04 	addi	r3,r3,11048
 1000628:	1f07883a 	add	r3,r3,fp
 100062c:	19400017 	ldw	r5,0(r3)
 1000630:	10010d00 	call	10010d0 <printf>
	printf("time taken: %u clock ticks\n",end_time-start_time);
 1000634:	013fffb4 	movhi	r4,65534
 1000638:	210aca04 	addi	r4,r4,11048
 100063c:	2709883a 	add	r4,r4,fp
 1000640:	20c00017 	ldw	r3,0(r4)
 1000644:	013fffb4 	movhi	r4,65534
 1000648:	210acb04 	addi	r4,r4,11052
 100064c:	2709883a 	add	r4,r4,fp
 1000650:	20800017 	ldw	r2,0(r4)
 1000654:	188bc83a 	sub	r5,r3,r2
 1000658:	01004074 	movhi	r4,257
 100065c:	21095904 	addi	r4,r4,9572
 1000660:	10010d00 	call	10010d0 <printf>
	printf (" %f seconds\n",(float)(end_time-start_time)/(float)alt_timestamp_freq());
 1000664:	00bfffb4 	movhi	r2,65534
 1000668:	108aca04 	addi	r2,r2,11048
 100066c:	1705883a 	add	r2,r2,fp
 1000670:	10c00017 	ldw	r3,0(r2)
 1000674:	013fffb4 	movhi	r4,65534
 1000678:	210acb04 	addi	r4,r4,11052
 100067c:	2709883a 	add	r4,r4,fp
 1000680:	20800017 	ldw	r2,0(r4)
 1000684:	1889c83a 	sub	r4,r3,r2
 1000688:	10009e40 	call	10009e4 <__floatunsisf>
 100068c:	1021883a 	mov	r16,r2
 1000690:	100c32c0 	call	100c32c <alt_timestamp_freq>
 1000694:	1009883a 	mov	r4,r2
 1000698:	10009e40 	call	10009e4 <__floatunsisf>
 100069c:	8009883a 	mov	r4,r16
 10006a0:	100b883a 	mov	r5,r2
 10006a4:	100081c0 	call	100081c <__divsf3>
 10006a8:	1009883a 	mov	r4,r2
 10006ac:	10009900 	call	1000990 <__extendsfdf2>
 10006b0:	100d883a 	mov	r6,r2
 10006b4:	180f883a 	mov	r7,r3
 10006b8:	01004074 	movhi	r4,257
 10006bc:	21096004 	addi	r4,r4,9600
 10006c0:	300b883a 	mov	r5,r6
 10006c4:	380d883a 	mov	r6,r7
 10006c8:	10010d00 	call	10010d0 <printf>
}
 10006cc:	e037883a 	mov	sp,fp
 10006d0:	dfc00417 	ldw	ra,16(sp)
 10006d4:	df000317 	ldw	fp,12(sp)
 10006d8:	dc800217 	ldw	r18,8(sp)
 10006dc:	dc400117 	ldw	r17,4(sp)
 10006e0:	dc000017 	ldw	r16,0(sp)
 10006e4:	dec00504 	addi	sp,sp,20
 10006e8:	f800283a 	ret

010006ec <sd_card>:

void sd_card(void){
 10006ec:	defff904 	addi	sp,sp,-28
 10006f0:	dfc00615 	stw	ra,24(sp)
 10006f4:	df000515 	stw	fp,20(sp)
 10006f8:	df000504 	addi	fp,sp,20
	char file_name[10];
		alt_up_sd_card_dev *device_reference = NULL;
 10006fc:	e03ffc15 	stw	zero,-16(fp)
		int connected = 0;
 1000700:	e03ffb15 	stw	zero,-20(fp)

		device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
 1000704:	01004074 	movhi	r4,257
 1000708:	21096404 	addi	r4,r4,9616
 100070c:	100f8f80 	call	100f8f8 <alt_up_sd_card_open_dev>
 1000710:	e0bffc15 	stw	r2,-16(fp)
		if (device_reference != NULL) {
 1000714:	e0bffc17 	ldw	r2,-16(fp)
 1000718:	1005003a 	cmpeq	r2,r2,zero
 100071c:	1000341e 	bne	r2,zero,10007f0 <sd_card+0x104>
			while(1) {
				if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 1000720:	e0bffb17 	ldw	r2,-20(fp)
 1000724:	1004c03a 	cmpne	r2,r2,zero
 1000728:	1000261e 	bne	r2,zero,10007c4 <sd_card+0xd8>
 100072c:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 1000730:	1005003a 	cmpeq	r2,r2,zero
 1000734:	1000231e 	bne	r2,zero,10007c4 <sd_card+0xd8>
					printf("Card connected.\n");
 1000738:	01004074 	movhi	r4,257
 100073c:	21096f04 	addi	r4,r4,9660
 1000740:	10011e80 	call	10011e8 <puts>
					if (alt_up_sd_card_is_FAT16()) {
 1000744:	100fa840 	call	100fa84 <alt_up_sd_card_is_FAT16>
 1000748:	1005003a 	cmpeq	r2,r2,zero
 100074c:	1000171e 	bne	r2,zero,10007ac <sd_card+0xc0>
						printf("FAT16 file system detected.\n");
 1000750:	01004074 	movhi	r4,257
 1000754:	21097304 	addi	r4,r4,9676
 1000758:	10011e80 	call	10011e8 <puts>
						if(alt_up_sd_card_find_first(".", (char*) file_name)==0){
 100075c:	e17ffd04 	addi	r5,fp,-12
 1000760:	01004074 	movhi	r4,257
 1000764:	21097a04 	addi	r4,r4,9704
 1000768:	100faf80 	call	100faf8 <alt_up_sd_card_find_first>
 100076c:	10bfffcc 	andi	r2,r2,65535
 1000770:	10a0001c 	xori	r2,r2,32768
 1000774:	10a00004 	addi	r2,r2,-32768
 1000778:	1004c03a 	cmpne	r2,r2,zero
 100077c:	10000e1e 	bne	r2,zero,10007b8 <sd_card+0xcc>
							//printf("%s\n",file_name);
							while(alt_up_sd_card_find_next((char*)file_name)==0)
 1000780:	00000206 	br	100078c <sd_card+0xa0>
							{
								printf("%s\n", file_name);
 1000784:	e13ffd04 	addi	r4,fp,-12
 1000788:	10011e80 	call	10011e8 <puts>
					printf("Card connected.\n");
					if (alt_up_sd_card_is_FAT16()) {
						printf("FAT16 file system detected.\n");
						if(alt_up_sd_card_find_first(".", (char*) file_name)==0){
							//printf("%s\n",file_name);
							while(alt_up_sd_card_find_next((char*)file_name)==0)
 100078c:	e13ffd04 	addi	r4,fp,-12
 1000790:	100fbcc0 	call	100fbcc <alt_up_sd_card_find_next>
 1000794:	10bfffcc 	andi	r2,r2,65535
 1000798:	10a0001c 	xori	r2,r2,32768
 100079c:	10a00004 	addi	r2,r2,-32768
 10007a0:	1005003a 	cmpeq	r2,r2,zero
 10007a4:	103ff71e 	bne	r2,zero,1000784 <sd_card+0x98>
 10007a8:	00000306 	br	10007b8 <sd_card+0xcc>
							{
								printf("%s\n", file_name);
							}
						}
					} else {
						printf("Unknown file system.\n");
 10007ac:	01004074 	movhi	r4,257
 10007b0:	21097b04 	addi	r4,r4,9708
 10007b4:	10011e80 	call	10011e8 <puts>
					}
					connected = 1;
 10007b8:	00800044 	movi	r2,1
 10007bc:	e0bffb15 	stw	r2,-20(fp)
		int connected = 0;

		device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
		if (device_reference != NULL) {
			while(1) {
				if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 10007c0:	00000e06 	br	10007fc <sd_card+0x110>
						}
					} else {
						printf("Unknown file system.\n");
					}
					connected = 1;
				} else if ((connected == 1) && (alt_up_sd_card_is_Present() == false)) {
 10007c4:	e0bffb17 	ldw	r2,-20(fp)
 10007c8:	10800058 	cmpnei	r2,r2,1
 10007cc:	10000b1e 	bne	r2,zero,10007fc <sd_card+0x110>
 10007d0:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 10007d4:	1004c03a 	cmpne	r2,r2,zero
 10007d8:	1000081e 	bne	r2,zero,10007fc <sd_card+0x110>
					printf("Card disconnected.\n");
 10007dc:	01004074 	movhi	r4,257
 10007e0:	21098104 	addi	r4,r4,9732
 10007e4:	10011e80 	call	10011e8 <puts>
					connected = 0;
 10007e8:	e03ffb15 	stw	zero,-20(fp)
 10007ec:	00000306 	br	10007fc <sd_card+0x110>
				}
				break;
			}
		} else {
			printf("Card could not be opened\n");
 10007f0:	01004074 	movhi	r4,257
 10007f4:	21098604 	addi	r4,r4,9752
 10007f8:	10011e80 	call	10011e8 <puts>
		}
		printf("sd_card function finished");
 10007fc:	01004074 	movhi	r4,257
 1000800:	21098d04 	addi	r4,r4,9780
 1000804:	10010d00 	call	10010d0 <printf>
}
 1000808:	e037883a 	mov	sp,fp
 100080c:	dfc00117 	ldw	ra,4(sp)
 1000810:	df000017 	ldw	fp,0(sp)
 1000814:	dec00204 	addi	sp,sp,8
 1000818:	f800283a 	ret

0100081c <__divsf3>:
 100081c:	defff304 	addi	sp,sp,-52
 1000820:	dc400b15 	stw	r17,44(sp)
 1000824:	dc400204 	addi	r17,sp,8
 1000828:	dc000a15 	stw	r16,40(sp)
 100082c:	d9000015 	stw	r4,0(sp)
 1000830:	d9400115 	stw	r5,4(sp)
 1000834:	d809883a 	mov	r4,sp
 1000838:	880b883a 	mov	r5,r17
 100083c:	dc000604 	addi	r16,sp,24
 1000840:	dfc00c15 	stw	ra,48(sp)
 1000844:	1000cf40 	call	1000cf4 <__unpack_f>
 1000848:	d9000104 	addi	r4,sp,4
 100084c:	800b883a 	mov	r5,r16
 1000850:	1000cf40 	call	1000cf4 <__unpack_f>
 1000854:	d9000217 	ldw	r4,8(sp)
 1000858:	00800044 	movi	r2,1
 100085c:	01800104 	movi	r6,4
 1000860:	11000a2e 	bgeu	r2,r4,100088c <__divsf3+0x70>
 1000864:	d9400617 	ldw	r5,24(sp)
 1000868:	1140432e 	bgeu	r2,r5,1000978 <__divsf3+0x15c>
 100086c:	d8800317 	ldw	r2,12(sp)
 1000870:	d8c00717 	ldw	r3,28(sp)
 1000874:	10c4f03a 	xor	r2,r2,r3
 1000878:	d8800315 	stw	r2,12(sp)
 100087c:	21800226 	beq	r4,r6,1000888 <__divsf3+0x6c>
 1000880:	00800084 	movi	r2,2
 1000884:	2080101e 	bne	r4,r2,10008c8 <__divsf3+0xac>
 1000888:	29000726 	beq	r5,r4,10008a8 <__divsf3+0x8c>
 100088c:	8809883a 	mov	r4,r17
 1000890:	1000b940 	call	1000b94 <__pack_f>
 1000894:	dfc00c17 	ldw	ra,48(sp)
 1000898:	dc400b17 	ldw	r17,44(sp)
 100089c:	dc000a17 	ldw	r16,40(sp)
 10008a0:	dec00d04 	addi	sp,sp,52
 10008a4:	f800283a 	ret
 10008a8:	01004074 	movhi	r4,257
 10008ac:	21099404 	addi	r4,r4,9808
 10008b0:	1000b940 	call	1000b94 <__pack_f>
 10008b4:	dfc00c17 	ldw	ra,48(sp)
 10008b8:	dc400b17 	ldw	r17,44(sp)
 10008bc:	dc000a17 	ldw	r16,40(sp)
 10008c0:	dec00d04 	addi	sp,sp,52
 10008c4:	f800283a 	ret
 10008c8:	29802d26 	beq	r5,r6,1000980 <__divsf3+0x164>
 10008cc:	28801a26 	beq	r5,r2,1000938 <__divsf3+0x11c>
 10008d0:	d8c00417 	ldw	r3,16(sp)
 10008d4:	d8800817 	ldw	r2,32(sp)
 10008d8:	d9000517 	ldw	r4,20(sp)
 10008dc:	d9800917 	ldw	r6,36(sp)
 10008e0:	1885c83a 	sub	r2,r3,r2
 10008e4:	d8800415 	stw	r2,16(sp)
 10008e8:	2180032e 	bgeu	r4,r6,10008f8 <__divsf3+0xdc>
 10008ec:	10bfffc4 	addi	r2,r2,-1
 10008f0:	d8800415 	stw	r2,16(sp)
 10008f4:	2109883a 	add	r4,r4,r4
 10008f8:	01500034 	movhi	r5,16384
 10008fc:	0007883a 	mov	r3,zero
 1000900:	0005883a 	mov	r2,zero
 1000904:	01c007c4 	movi	r7,31
 1000908:	10800044 	addi	r2,r2,1
 100090c:	21800236 	bltu	r4,r6,1000918 <__divsf3+0xfc>
 1000910:	1946b03a 	or	r3,r3,r5
 1000914:	2189c83a 	sub	r4,r4,r6
 1000918:	280ad07a 	srli	r5,r5,1
 100091c:	2109883a 	add	r4,r4,r4
 1000920:	11fff91e 	bne	r2,r7,1000908 <__divsf3+0xec>
 1000924:	19401fcc 	andi	r5,r3,127
 1000928:	00801004 	movi	r2,64
 100092c:	28800a26 	beq	r5,r2,1000958 <__divsf3+0x13c>
 1000930:	d8c00515 	stw	r3,20(sp)
 1000934:	003fd506 	br	100088c <__divsf3+0x70>
 1000938:	8809883a 	mov	r4,r17
 100093c:	d9800215 	stw	r6,8(sp)
 1000940:	1000b940 	call	1000b94 <__pack_f>
 1000944:	dfc00c17 	ldw	ra,48(sp)
 1000948:	dc400b17 	ldw	r17,44(sp)
 100094c:	dc000a17 	ldw	r16,40(sp)
 1000950:	dec00d04 	addi	sp,sp,52
 1000954:	f800283a 	ret
 1000958:	1880200c 	andi	r2,r3,128
 100095c:	103ff41e 	bne	r2,zero,1000930 <__divsf3+0x114>
 1000960:	203ff326 	beq	r4,zero,1000930 <__divsf3+0x114>
 1000964:	1947883a 	add	r3,r3,r5
 1000968:	00bfe004 	movi	r2,-128
 100096c:	1886703a 	and	r3,r3,r2
 1000970:	d8c00515 	stw	r3,20(sp)
 1000974:	003fc506 	br	100088c <__divsf3+0x70>
 1000978:	8009883a 	mov	r4,r16
 100097c:	003fc406 	br	1000890 <__divsf3+0x74>
 1000980:	8809883a 	mov	r4,r17
 1000984:	d8000515 	stw	zero,20(sp)
 1000988:	d8000415 	stw	zero,16(sp)
 100098c:	003fc006 	br	1000890 <__divsf3+0x74>

01000990 <__extendsfdf2>:
 1000990:	defff904 	addi	sp,sp,-28
 1000994:	d9000115 	stw	r4,4(sp)
 1000998:	d9400204 	addi	r5,sp,8
 100099c:	d9000104 	addi	r4,sp,4
 10009a0:	dfc00615 	stw	ra,24(sp)
 10009a4:	1000cf40 	call	1000cf4 <__unpack_f>
 10009a8:	d9c00517 	ldw	r7,20(sp)
 10009ac:	0011883a 	mov	r8,zero
 10009b0:	400697ba 	slli	r3,r8,30
 10009b4:	3812d0ba 	srli	r9,r7,2
 10009b8:	380497ba 	slli	r2,r7,30
 10009bc:	d9000217 	ldw	r4,8(sp)
 10009c0:	d9400317 	ldw	r5,12(sp)
 10009c4:	d9800417 	ldw	r6,16(sp)
 10009c8:	48c6b03a 	or	r3,r9,r3
 10009cc:	100f883a 	mov	r7,r2
 10009d0:	d8c00015 	stw	r3,0(sp)
 10009d4:	1000aa40 	call	1000aa4 <__make_dp>
 10009d8:	dfc00617 	ldw	ra,24(sp)
 10009dc:	dec00704 	addi	sp,sp,28
 10009e0:	f800283a 	ret

010009e4 <__floatunsisf>:
 10009e4:	defff904 	addi	sp,sp,-28
 10009e8:	dc400515 	stw	r17,20(sp)
 10009ec:	dc000415 	stw	r16,16(sp)
 10009f0:	dfc00615 	stw	ra,24(sp)
 10009f4:	04400784 	movi	r17,30
 10009f8:	2021883a 	mov	r16,r4
 10009fc:	d8000115 	stw	zero,4(sp)
 1000a00:	2000091e 	bne	r4,zero,1000a28 <__floatunsisf+0x44>
 1000a04:	00800084 	movi	r2,2
 1000a08:	d8800015 	stw	r2,0(sp)
 1000a0c:	d809883a 	mov	r4,sp
 1000a10:	1000b940 	call	1000b94 <__pack_f>
 1000a14:	dfc00617 	ldw	ra,24(sp)
 1000a18:	dc400517 	ldw	r17,20(sp)
 1000a1c:	dc000417 	ldw	r16,16(sp)
 1000a20:	dec00704 	addi	sp,sp,28
 1000a24:	f800283a 	ret
 1000a28:	008000c4 	movi	r2,3
 1000a2c:	d9000315 	stw	r4,12(sp)
 1000a30:	d8800015 	stw	r2,0(sp)
 1000a34:	dc400215 	stw	r17,8(sp)
 1000a38:	1000b140 	call	1000b14 <__clzsi2>
 1000a3c:	117fffc4 	addi	r5,r2,-1
 1000a40:	0147c83a 	sub	r3,zero,r5
 1000a44:	00800044 	movi	r2,1
 1000a48:	10c4983a 	sll	r2,r2,r3
 1000a4c:	80c6d83a 	srl	r3,r16,r3
 1000a50:	8949c83a 	sub	r4,r17,r5
 1000a54:	10bfffc4 	addi	r2,r2,-1
 1000a58:	8084703a 	and	r2,r16,r2
 1000a5c:	1004c03a 	cmpne	r2,r2,zero
 1000a60:	1886b03a 	or	r3,r3,r2
 1000a64:	28000c16 	blt	r5,zero,1000a98 <__floatunsisf+0xb4>
 1000a68:	8144983a 	sll	r2,r16,r5
 1000a6c:	8947c83a 	sub	r3,r17,r5
 1000a70:	283fe626 	beq	r5,zero,1000a0c <__floatunsisf+0x28>
 1000a74:	d809883a 	mov	r4,sp
 1000a78:	d8800315 	stw	r2,12(sp)
 1000a7c:	d8c00215 	stw	r3,8(sp)
 1000a80:	1000b940 	call	1000b94 <__pack_f>
 1000a84:	dfc00617 	ldw	ra,24(sp)
 1000a88:	dc400517 	ldw	r17,20(sp)
 1000a8c:	dc000417 	ldw	r16,16(sp)
 1000a90:	dec00704 	addi	sp,sp,28
 1000a94:	f800283a 	ret
 1000a98:	d8c00315 	stw	r3,12(sp)
 1000a9c:	d9000215 	stw	r4,8(sp)
 1000aa0:	003fda06 	br	1000a0c <__floatunsisf+0x28>

01000aa4 <__make_dp>:
 1000aa4:	defff904 	addi	sp,sp,-28
 1000aa8:	d8c00717 	ldw	r3,28(sp)
 1000aac:	d9000015 	stw	r4,0(sp)
 1000ab0:	d809883a 	mov	r4,sp
 1000ab4:	dfc00515 	stw	ra,20(sp)
 1000ab8:	d9c00615 	stw	r7,24(sp)
 1000abc:	d9400115 	stw	r5,4(sp)
 1000ac0:	d9800215 	stw	r6,8(sp)
 1000ac4:	d8c00415 	stw	r3,16(sp)
 1000ac8:	d9c00315 	stw	r7,12(sp)
 1000acc:	1000dbc0 	call	1000dbc <__pack_d>
 1000ad0:	dfc00517 	ldw	ra,20(sp)
 1000ad4:	dec00704 	addi	sp,sp,28
 1000ad8:	f800283a 	ret

01000adc <__mulsi3>:
 1000adc:	20000a26 	beq	r4,zero,1000b08 <__mulsi3+0x2c>
 1000ae0:	0007883a 	mov	r3,zero
 1000ae4:	2080004c 	andi	r2,r4,1
 1000ae8:	1005003a 	cmpeq	r2,r2,zero
 1000aec:	2008d07a 	srli	r4,r4,1
 1000af0:	1000011e 	bne	r2,zero,1000af8 <__mulsi3+0x1c>
 1000af4:	1947883a 	add	r3,r3,r5
 1000af8:	294b883a 	add	r5,r5,r5
 1000afc:	203ff91e 	bne	r4,zero,1000ae4 <__mulsi3+0x8>
 1000b00:	1805883a 	mov	r2,r3
 1000b04:	f800283a 	ret
 1000b08:	0007883a 	mov	r3,zero
 1000b0c:	1805883a 	mov	r2,r3
 1000b10:	f800283a 	ret

01000b14 <__clzsi2>:
 1000b14:	00bfffd4 	movui	r2,65535
 1000b18:	11000e36 	bltu	r2,r4,1000b54 <__clzsi2+0x40>
 1000b1c:	00803fc4 	movi	r2,255
 1000b20:	01400204 	movi	r5,8
 1000b24:	0007883a 	mov	r3,zero
 1000b28:	11001036 	bltu	r2,r4,1000b6c <__clzsi2+0x58>
 1000b2c:	000b883a 	mov	r5,zero
 1000b30:	20c6d83a 	srl	r3,r4,r3
 1000b34:	00804074 	movhi	r2,257
 1000b38:	10899804 	addi	r2,r2,9824
 1000b3c:	1887883a 	add	r3,r3,r2
 1000b40:	18800003 	ldbu	r2,0(r3)
 1000b44:	00c00804 	movi	r3,32
 1000b48:	2885883a 	add	r2,r5,r2
 1000b4c:	1885c83a 	sub	r2,r3,r2
 1000b50:	f800283a 	ret
 1000b54:	01400404 	movi	r5,16
 1000b58:	00804034 	movhi	r2,256
 1000b5c:	10bfffc4 	addi	r2,r2,-1
 1000b60:	2807883a 	mov	r3,r5
 1000b64:	113ff22e 	bgeu	r2,r4,1000b30 <__clzsi2+0x1c>
 1000b68:	01400604 	movi	r5,24
 1000b6c:	2807883a 	mov	r3,r5
 1000b70:	20c6d83a 	srl	r3,r4,r3
 1000b74:	00804074 	movhi	r2,257
 1000b78:	10899804 	addi	r2,r2,9824
 1000b7c:	1887883a 	add	r3,r3,r2
 1000b80:	18800003 	ldbu	r2,0(r3)
 1000b84:	00c00804 	movi	r3,32
 1000b88:	2885883a 	add	r2,r5,r2
 1000b8c:	1885c83a 	sub	r2,r3,r2
 1000b90:	f800283a 	ret

01000b94 <__pack_f>:
 1000b94:	20c00017 	ldw	r3,0(r4)
 1000b98:	01c00044 	movi	r7,1
 1000b9c:	21800317 	ldw	r6,12(r4)
 1000ba0:	21400117 	ldw	r5,4(r4)
 1000ba4:	38c02d2e 	bgeu	r7,r3,1000c5c <__pack_f+0xc8>
 1000ba8:	00800104 	movi	r2,4
 1000bac:	18802826 	beq	r3,r2,1000c50 <__pack_f+0xbc>
 1000bb0:	00800084 	movi	r2,2
 1000bb4:	18800126 	beq	r3,r2,1000bbc <__pack_f+0x28>
 1000bb8:	3000101e 	bne	r6,zero,1000bfc <__pack_f+0x68>
 1000bbc:	000d883a 	mov	r6,zero
 1000bc0:	0007883a 	mov	r3,zero
 1000bc4:	19003fcc 	andi	r4,r3,255
 1000bc8:	200895fa 	slli	r4,r4,23
 1000bcc:	00c02034 	movhi	r3,128
 1000bd0:	18ffffc4 	addi	r3,r3,-1
 1000bd4:	30c6703a 	and	r3,r6,r3
 1000bd8:	10a0002c 	andhi	r2,r2,32768
 1000bdc:	10c4b03a 	or	r2,r2,r3
 1000be0:	280a97fa 	slli	r5,r5,31
 1000be4:	1104b03a 	or	r2,r2,r4
 1000be8:	00e00034 	movhi	r3,32768
 1000bec:	18ffffc4 	addi	r3,r3,-1
 1000bf0:	10c4703a 	and	r2,r2,r3
 1000bf4:	1144b03a 	or	r2,r2,r5
 1000bf8:	f800283a 	ret
 1000bfc:	21000217 	ldw	r4,8(r4)
 1000c00:	00bfe084 	movi	r2,-126
 1000c04:	20801b16 	blt	r4,r2,1000c74 <__pack_f+0xe0>
 1000c08:	00801fc4 	movi	r2,127
 1000c0c:	11001016 	blt	r2,r4,1000c50 <__pack_f+0xbc>
 1000c10:	308e703a 	and	r7,r6,r2
 1000c14:	2087883a 	add	r3,r4,r2
 1000c18:	00801004 	movi	r2,64
 1000c1c:	38800526 	beq	r7,r2,1000c34 <__pack_f+0xa0>
 1000c20:	31800fc4 	addi	r6,r6,63
 1000c24:	30000716 	blt	r6,zero,1000c44 <__pack_f+0xb0>
 1000c28:	300490ba 	slli	r2,r6,2
 1000c2c:	100cd27a 	srli	r6,r2,9
 1000c30:	003fe406 	br	1000bc4 <__pack_f+0x30>
 1000c34:	3080200c 	andi	r2,r6,128
 1000c38:	103ffa26 	beq	r2,zero,1000c24 <__pack_f+0x90>
 1000c3c:	31cd883a 	add	r6,r6,r7
 1000c40:	003ff806 	br	1000c24 <__pack_f+0x90>
 1000c44:	300cd07a 	srli	r6,r6,1
 1000c48:	18c00044 	addi	r3,r3,1
 1000c4c:	003ff606 	br	1000c28 <__pack_f+0x94>
 1000c50:	000d883a 	mov	r6,zero
 1000c54:	00ffffc4 	movi	r3,-1
 1000c58:	003fda06 	br	1000bc4 <__pack_f+0x30>
 1000c5c:	31800434 	orhi	r6,r6,16
 1000c60:	00802034 	movhi	r2,128
 1000c64:	10bfffc4 	addi	r2,r2,-1
 1000c68:	308c703a 	and	r6,r6,r2
 1000c6c:	00ffffc4 	movi	r3,-1
 1000c70:	003fd406 	br	1000bc4 <__pack_f+0x30>
 1000c74:	1109c83a 	sub	r4,r2,r4
 1000c78:	00800644 	movi	r2,25
 1000c7c:	11001216 	blt	r2,r4,1000cc8 <__pack_f+0x134>
 1000c80:	3904983a 	sll	r2,r7,r4
 1000c84:	3106d83a 	srl	r3,r6,r4
 1000c88:	10bfffc4 	addi	r2,r2,-1
 1000c8c:	3084703a 	and	r2,r6,r2
 1000c90:	1004c03a 	cmpne	r2,r2,zero
 1000c94:	1886b03a 	or	r3,r3,r2
 1000c98:	19001fcc 	andi	r4,r3,127
 1000c9c:	00801004 	movi	r2,64
 1000ca0:	20800c26 	beq	r4,r2,1000cd4 <__pack_f+0x140>
 1000ca4:	18c00fc4 	addi	r3,r3,63
 1000ca8:	00900034 	movhi	r2,16384
 1000cac:	10bfffc4 	addi	r2,r2,-1
 1000cb0:	180cd1fa 	srli	r6,r3,7
 1000cb4:	10c7803a 	cmpltu	r3,r2,r3
 1000cb8:	00802034 	movhi	r2,128
 1000cbc:	10bfffc4 	addi	r2,r2,-1
 1000cc0:	308c703a 	and	r6,r6,r2
 1000cc4:	003fbf06 	br	1000bc4 <__pack_f+0x30>
 1000cc8:	0007883a 	mov	r3,zero
 1000ccc:	000d883a 	mov	r6,zero
 1000cd0:	003ff906 	br	1000cb8 <__pack_f+0x124>
 1000cd4:	1880200c 	andi	r2,r3,128
 1000cd8:	10000126 	beq	r2,zero,1000ce0 <__pack_f+0x14c>
 1000cdc:	1907883a 	add	r3,r3,r4
 1000ce0:	180cd1fa 	srli	r6,r3,7
 1000ce4:	00900034 	movhi	r2,16384
 1000ce8:	10bfffc4 	addi	r2,r2,-1
 1000cec:	10c7803a 	cmpltu	r3,r2,r3
 1000cf0:	003ff106 	br	1000cb8 <__pack_f+0x124>

01000cf4 <__unpack_f>:
 1000cf4:	21800017 	ldw	r6,0(r4)
 1000cf8:	00c02034 	movhi	r3,128
 1000cfc:	18ffffc4 	addi	r3,r3,-1
 1000d00:	3004d5fa 	srli	r2,r6,23
 1000d04:	3008d7fa 	srli	r4,r6,31
 1000d08:	30ce703a 	and	r7,r6,r3
 1000d0c:	10c03fcc 	andi	r3,r2,255
 1000d10:	29000115 	stw	r4,4(r5)
 1000d14:	1800131e 	bne	r3,zero,1000d64 <__unpack_f+0x70>
 1000d18:	38000f26 	beq	r7,zero,1000d58 <__unpack_f+0x64>
 1000d1c:	380691fa 	slli	r3,r7,7
 1000d20:	01bfe084 	movi	r6,-126
 1000d24:	008000c4 	movi	r2,3
 1000d28:	01100034 	movhi	r4,16384
 1000d2c:	213fffc4 	addi	r4,r4,-1
 1000d30:	28800015 	stw	r2,0(r5)
 1000d34:	29800215 	stw	r6,8(r5)
 1000d38:	20c00536 	bltu	r4,r3,1000d50 <__unpack_f+0x5c>
 1000d3c:	3005883a 	mov	r2,r6
 1000d40:	18c7883a 	add	r3,r3,r3
 1000d44:	10bfffc4 	addi	r2,r2,-1
 1000d48:	20fffd2e 	bgeu	r4,r3,1000d40 <__unpack_f+0x4c>
 1000d4c:	28800215 	stw	r2,8(r5)
 1000d50:	28c00315 	stw	r3,12(r5)
 1000d54:	f800283a 	ret
 1000d58:	00800084 	movi	r2,2
 1000d5c:	28800015 	stw	r2,0(r5)
 1000d60:	f800283a 	ret
 1000d64:	00803fc4 	movi	r2,255
 1000d68:	18800826 	beq	r3,r2,1000d8c <__unpack_f+0x98>
 1000d6c:	380491fa 	slli	r2,r7,7
 1000d70:	18ffe044 	addi	r3,r3,-127
 1000d74:	28c00215 	stw	r3,8(r5)
 1000d78:	10900034 	orhi	r2,r2,16384
 1000d7c:	28800315 	stw	r2,12(r5)
 1000d80:	008000c4 	movi	r2,3
 1000d84:	28800015 	stw	r2,0(r5)
 1000d88:	f800283a 	ret
 1000d8c:	3800031e 	bne	r7,zero,1000d9c <__unpack_f+0xa8>
 1000d90:	00800104 	movi	r2,4
 1000d94:	28800015 	stw	r2,0(r5)
 1000d98:	f800283a 	ret
 1000d9c:	3080042c 	andhi	r2,r6,16
 1000da0:	10000426 	beq	r2,zero,1000db4 <__unpack_f+0xc0>
 1000da4:	00800044 	movi	r2,1
 1000da8:	28800015 	stw	r2,0(r5)
 1000dac:	29c00315 	stw	r7,12(r5)
 1000db0:	f800283a 	ret
 1000db4:	28000015 	stw	zero,0(r5)
 1000db8:	003ffc06 	br	1000dac <__unpack_f+0xb8>

01000dbc <__pack_d>:
 1000dbc:	20c00017 	ldw	r3,0(r4)
 1000dc0:	defffd04 	addi	sp,sp,-12
 1000dc4:	dc000015 	stw	r16,0(sp)
 1000dc8:	dc800215 	stw	r18,8(sp)
 1000dcc:	dc400115 	stw	r17,4(sp)
 1000dd0:	00800044 	movi	r2,1
 1000dd4:	22000317 	ldw	r8,12(r4)
 1000dd8:	001f883a 	mov	r15,zero
 1000ddc:	22400417 	ldw	r9,16(r4)
 1000de0:	24000117 	ldw	r16,4(r4)
 1000de4:	10c0552e 	bgeu	r2,r3,1000f3c <__pack_d+0x180>
 1000de8:	00800104 	movi	r2,4
 1000dec:	18804f26 	beq	r3,r2,1000f2c <__pack_d+0x170>
 1000df0:	00800084 	movi	r2,2
 1000df4:	18800226 	beq	r3,r2,1000e00 <__pack_d+0x44>
 1000df8:	4244b03a 	or	r2,r8,r9
 1000dfc:	10001a1e 	bne	r2,zero,1000e68 <__pack_d+0xac>
 1000e00:	000d883a 	mov	r6,zero
 1000e04:	000f883a 	mov	r7,zero
 1000e08:	0011883a 	mov	r8,zero
 1000e0c:	00800434 	movhi	r2,16
 1000e10:	10bfffc4 	addi	r2,r2,-1
 1000e14:	301d883a 	mov	r14,r6
 1000e18:	3884703a 	and	r2,r7,r2
 1000e1c:	400a953a 	slli	r5,r8,20
 1000e20:	79bffc2c 	andhi	r6,r15,65520
 1000e24:	308cb03a 	or	r6,r6,r2
 1000e28:	00e00434 	movhi	r3,32784
 1000e2c:	18ffffc4 	addi	r3,r3,-1
 1000e30:	800497fa 	slli	r2,r16,31
 1000e34:	30c6703a 	and	r3,r6,r3
 1000e38:	1946b03a 	or	r3,r3,r5
 1000e3c:	01600034 	movhi	r5,32768
 1000e40:	297fffc4 	addi	r5,r5,-1
 1000e44:	194a703a 	and	r5,r3,r5
 1000e48:	288ab03a 	or	r5,r5,r2
 1000e4c:	2807883a 	mov	r3,r5
 1000e50:	7005883a 	mov	r2,r14
 1000e54:	dc800217 	ldw	r18,8(sp)
 1000e58:	dc400117 	ldw	r17,4(sp)
 1000e5c:	dc000017 	ldw	r16,0(sp)
 1000e60:	dec00304 	addi	sp,sp,12
 1000e64:	f800283a 	ret
 1000e68:	21000217 	ldw	r4,8(r4)
 1000e6c:	00bf0084 	movi	r2,-1022
 1000e70:	20803f16 	blt	r4,r2,1000f70 <__pack_d+0x1b4>
 1000e74:	0080ffc4 	movi	r2,1023
 1000e78:	11002c16 	blt	r2,r4,1000f2c <__pack_d+0x170>
 1000e7c:	00803fc4 	movi	r2,255
 1000e80:	408c703a 	and	r6,r8,r2
 1000e84:	00802004 	movi	r2,128
 1000e88:	0007883a 	mov	r3,zero
 1000e8c:	000f883a 	mov	r7,zero
 1000e90:	2280ffc4 	addi	r10,r4,1023
 1000e94:	30801e26 	beq	r6,r2,1000f10 <__pack_d+0x154>
 1000e98:	00801fc4 	movi	r2,127
 1000e9c:	4089883a 	add	r4,r8,r2
 1000ea0:	220d803a 	cmpltu	r6,r4,r8
 1000ea4:	324d883a 	add	r6,r6,r9
 1000ea8:	2011883a 	mov	r8,r4
 1000eac:	3013883a 	mov	r9,r6
 1000eb0:	00880034 	movhi	r2,8192
 1000eb4:	10bfffc4 	addi	r2,r2,-1
 1000eb8:	12400d36 	bltu	r2,r9,1000ef0 <__pack_d+0x134>
 1000ebc:	4804963a 	slli	r2,r9,24
 1000ec0:	400cd23a 	srli	r6,r8,8
 1000ec4:	480ed23a 	srli	r7,r9,8
 1000ec8:	013fffc4 	movi	r4,-1
 1000ecc:	118cb03a 	or	r6,r2,r6
 1000ed0:	01400434 	movhi	r5,16
 1000ed4:	297fffc4 	addi	r5,r5,-1
 1000ed8:	3104703a 	and	r2,r6,r4
 1000edc:	3946703a 	and	r3,r7,r5
 1000ee0:	5201ffcc 	andi	r8,r10,2047
 1000ee4:	100d883a 	mov	r6,r2
 1000ee8:	180f883a 	mov	r7,r3
 1000eec:	003fc706 	br	1000e0c <__pack_d+0x50>
 1000ef0:	480897fa 	slli	r4,r9,31
 1000ef4:	4004d07a 	srli	r2,r8,1
 1000ef8:	4806d07a 	srli	r3,r9,1
 1000efc:	52800044 	addi	r10,r10,1
 1000f00:	2084b03a 	or	r2,r4,r2
 1000f04:	1011883a 	mov	r8,r2
 1000f08:	1813883a 	mov	r9,r3
 1000f0c:	003feb06 	br	1000ebc <__pack_d+0x100>
 1000f10:	383fe11e 	bne	r7,zero,1000e98 <__pack_d+0xdc>
 1000f14:	01004004 	movi	r4,256
 1000f18:	4104703a 	and	r2,r8,r4
 1000f1c:	10c4b03a 	or	r2,r2,r3
 1000f20:	103fe326 	beq	r2,zero,1000eb0 <__pack_d+0xf4>
 1000f24:	3005883a 	mov	r2,r6
 1000f28:	003fdc06 	br	1000e9c <__pack_d+0xe0>
 1000f2c:	000d883a 	mov	r6,zero
 1000f30:	000f883a 	mov	r7,zero
 1000f34:	0201ffc4 	movi	r8,2047
 1000f38:	003fb406 	br	1000e0c <__pack_d+0x50>
 1000f3c:	0005883a 	mov	r2,zero
 1000f40:	00c00234 	movhi	r3,8
 1000f44:	408cb03a 	or	r6,r8,r2
 1000f48:	48ceb03a 	or	r7,r9,r3
 1000f4c:	013fffc4 	movi	r4,-1
 1000f50:	01400434 	movhi	r5,16
 1000f54:	297fffc4 	addi	r5,r5,-1
 1000f58:	3104703a 	and	r2,r6,r4
 1000f5c:	3946703a 	and	r3,r7,r5
 1000f60:	100d883a 	mov	r6,r2
 1000f64:	180f883a 	mov	r7,r3
 1000f68:	0201ffc4 	movi	r8,2047
 1000f6c:	003fa706 	br	1000e0c <__pack_d+0x50>
 1000f70:	1109c83a 	sub	r4,r2,r4
 1000f74:	00800e04 	movi	r2,56
 1000f78:	11004316 	blt	r2,r4,1001088 <__pack_d+0x2cc>
 1000f7c:	21fff804 	addi	r7,r4,-32
 1000f80:	38004516 	blt	r7,zero,1001098 <__pack_d+0x2dc>
 1000f84:	49d8d83a 	srl	r12,r9,r7
 1000f88:	001b883a 	mov	r13,zero
 1000f8c:	0023883a 	mov	r17,zero
 1000f90:	01400044 	movi	r5,1
 1000f94:	0025883a 	mov	r18,zero
 1000f98:	38004716 	blt	r7,zero,10010b8 <__pack_d+0x2fc>
 1000f9c:	29d6983a 	sll	r11,r5,r7
 1000fa0:	0015883a 	mov	r10,zero
 1000fa4:	00bfffc4 	movi	r2,-1
 1000fa8:	5089883a 	add	r4,r10,r2
 1000fac:	588b883a 	add	r5,r11,r2
 1000fb0:	228d803a 	cmpltu	r6,r4,r10
 1000fb4:	314b883a 	add	r5,r6,r5
 1000fb8:	4104703a 	and	r2,r8,r4
 1000fbc:	4946703a 	and	r3,r9,r5
 1000fc0:	10c4b03a 	or	r2,r2,r3
 1000fc4:	10000226 	beq	r2,zero,1000fd0 <__pack_d+0x214>
 1000fc8:	04400044 	movi	r17,1
 1000fcc:	0025883a 	mov	r18,zero
 1000fd0:	00803fc4 	movi	r2,255
 1000fd4:	644eb03a 	or	r7,r12,r17
 1000fd8:	3892703a 	and	r9,r7,r2
 1000fdc:	00802004 	movi	r2,128
 1000fe0:	6c90b03a 	or	r8,r13,r18
 1000fe4:	0015883a 	mov	r10,zero
 1000fe8:	48801626 	beq	r9,r2,1001044 <__pack_d+0x288>
 1000fec:	01001fc4 	movi	r4,127
 1000ff0:	3905883a 	add	r2,r7,r4
 1000ff4:	11cd803a 	cmpltu	r6,r2,r7
 1000ff8:	320d883a 	add	r6,r6,r8
 1000ffc:	100f883a 	mov	r7,r2
 1001000:	00840034 	movhi	r2,4096
 1001004:	10bfffc4 	addi	r2,r2,-1
 1001008:	3011883a 	mov	r8,r6
 100100c:	0007883a 	mov	r3,zero
 1001010:	11801b36 	bltu	r2,r6,1001080 <__pack_d+0x2c4>
 1001014:	4004963a 	slli	r2,r8,24
 1001018:	3808d23a 	srli	r4,r7,8
 100101c:	400ad23a 	srli	r5,r8,8
 1001020:	1813883a 	mov	r9,r3
 1001024:	1108b03a 	or	r4,r2,r4
 1001028:	00bfffc4 	movi	r2,-1
 100102c:	00c00434 	movhi	r3,16
 1001030:	18ffffc4 	addi	r3,r3,-1
 1001034:	208c703a 	and	r6,r4,r2
 1001038:	28ce703a 	and	r7,r5,r3
 100103c:	4a01ffcc 	andi	r8,r9,2047
 1001040:	003f7206 	br	1000e0c <__pack_d+0x50>
 1001044:	503fe91e 	bne	r10,zero,1000fec <__pack_d+0x230>
 1001048:	01004004 	movi	r4,256
 100104c:	3904703a 	and	r2,r7,r4
 1001050:	0007883a 	mov	r3,zero
 1001054:	10c4b03a 	or	r2,r2,r3
 1001058:	10000626 	beq	r2,zero,1001074 <__pack_d+0x2b8>
 100105c:	3a45883a 	add	r2,r7,r9
 1001060:	11cd803a 	cmpltu	r6,r2,r7
 1001064:	320d883a 	add	r6,r6,r8
 1001068:	100f883a 	mov	r7,r2
 100106c:	3011883a 	mov	r8,r6
 1001070:	0007883a 	mov	r3,zero
 1001074:	00840034 	movhi	r2,4096
 1001078:	10bfffc4 	addi	r2,r2,-1
 100107c:	123fe52e 	bgeu	r2,r8,1001014 <__pack_d+0x258>
 1001080:	00c00044 	movi	r3,1
 1001084:	003fe306 	br	1001014 <__pack_d+0x258>
 1001088:	0009883a 	mov	r4,zero
 100108c:	0013883a 	mov	r9,zero
 1001090:	000b883a 	mov	r5,zero
 1001094:	003fe406 	br	1001028 <__pack_d+0x26c>
 1001098:	4a47883a 	add	r3,r9,r9
 100109c:	008007c4 	movi	r2,31
 10010a0:	1105c83a 	sub	r2,r2,r4
 10010a4:	1886983a 	sll	r3,r3,r2
 10010a8:	4118d83a 	srl	r12,r8,r4
 10010ac:	491ad83a 	srl	r13,r9,r4
 10010b0:	1b18b03a 	or	r12,r3,r12
 10010b4:	003fb506 	br	1000f8c <__pack_d+0x1d0>
 10010b8:	2806d07a 	srli	r3,r5,1
 10010bc:	008007c4 	movi	r2,31
 10010c0:	1105c83a 	sub	r2,r2,r4
 10010c4:	1896d83a 	srl	r11,r3,r2
 10010c8:	2914983a 	sll	r10,r5,r4
 10010cc:	003fb506 	br	1000fa4 <__pack_d+0x1e8>

010010d0 <printf>:
 10010d0:	defffb04 	addi	sp,sp,-20
 10010d4:	dfc00115 	stw	ra,4(sp)
 10010d8:	d9400215 	stw	r5,8(sp)
 10010dc:	d9800315 	stw	r6,12(sp)
 10010e0:	d9c00415 	stw	r7,16(sp)
 10010e4:	00804074 	movhi	r2,257
 10010e8:	10915604 	addi	r2,r2,17752
 10010ec:	10c00017 	ldw	r3,0(r2)
 10010f0:	200b883a 	mov	r5,r4
 10010f4:	d8800204 	addi	r2,sp,8
 10010f8:	19000217 	ldw	r4,8(r3)
 10010fc:	100d883a 	mov	r6,r2
 1001100:	d8800015 	stw	r2,0(sp)
 1001104:	100318c0 	call	100318c <__vfprintf_internal>
 1001108:	dfc00117 	ldw	ra,4(sp)
 100110c:	dec00504 	addi	sp,sp,20
 1001110:	f800283a 	ret

01001114 <_printf_r>:
 1001114:	defffc04 	addi	sp,sp,-16
 1001118:	dfc00115 	stw	ra,4(sp)
 100111c:	d9800215 	stw	r6,8(sp)
 1001120:	d9c00315 	stw	r7,12(sp)
 1001124:	280d883a 	mov	r6,r5
 1001128:	21400217 	ldw	r5,8(r4)
 100112c:	d8c00204 	addi	r3,sp,8
 1001130:	180f883a 	mov	r7,r3
 1001134:	d8c00015 	stw	r3,0(sp)
 1001138:	10012c80 	call	10012c8 <___vfprintf_internal_r>
 100113c:	dfc00117 	ldw	ra,4(sp)
 1001140:	dec00404 	addi	sp,sp,16
 1001144:	f800283a 	ret

01001148 <_puts_r>:
 1001148:	defff604 	addi	sp,sp,-40
 100114c:	dc400715 	stw	r17,28(sp)
 1001150:	2023883a 	mov	r17,r4
 1001154:	2809883a 	mov	r4,r5
 1001158:	dfc00915 	stw	ra,36(sp)
 100115c:	dcc00815 	stw	r19,32(sp)
 1001160:	2827883a 	mov	r19,r5
 1001164:	10011fc0 	call	10011fc <strlen>
 1001168:	89400217 	ldw	r5,8(r17)
 100116c:	00c04074 	movhi	r3,257
 1001170:	18c9d804 	addi	r3,r3,10080
 1001174:	01c00044 	movi	r7,1
 1001178:	12000044 	addi	r8,r2,1
 100117c:	d8c00515 	stw	r3,20(sp)
 1001180:	d9c00615 	stw	r7,24(sp)
 1001184:	d8c00304 	addi	r3,sp,12
 1001188:	01c00084 	movi	r7,2
 100118c:	8809883a 	mov	r4,r17
 1001190:	d80d883a 	mov	r6,sp
 1001194:	d8c00015 	stw	r3,0(sp)
 1001198:	dcc00315 	stw	r19,12(sp)
 100119c:	da000215 	stw	r8,8(sp)
 10011a0:	d9c00115 	stw	r7,4(sp)
 10011a4:	d8800415 	stw	r2,16(sp)
 10011a8:	10054480 	call	1005448 <__sfvwrite_r>
 10011ac:	00ffffc4 	movi	r3,-1
 10011b0:	10000626 	beq	r2,zero,10011cc <_puts_r+0x84>
 10011b4:	1805883a 	mov	r2,r3
 10011b8:	dfc00917 	ldw	ra,36(sp)
 10011bc:	dcc00817 	ldw	r19,32(sp)
 10011c0:	dc400717 	ldw	r17,28(sp)
 10011c4:	dec00a04 	addi	sp,sp,40
 10011c8:	f800283a 	ret
 10011cc:	00c00284 	movi	r3,10
 10011d0:	1805883a 	mov	r2,r3
 10011d4:	dfc00917 	ldw	ra,36(sp)
 10011d8:	dcc00817 	ldw	r19,32(sp)
 10011dc:	dc400717 	ldw	r17,28(sp)
 10011e0:	dec00a04 	addi	sp,sp,40
 10011e4:	f800283a 	ret

010011e8 <puts>:
 10011e8:	00804074 	movhi	r2,257
 10011ec:	10915604 	addi	r2,r2,17752
 10011f0:	200b883a 	mov	r5,r4
 10011f4:	11000017 	ldw	r4,0(r2)
 10011f8:	10011481 	jmpi	1001148 <_puts_r>

010011fc <strlen>:
 10011fc:	208000cc 	andi	r2,r4,3
 1001200:	2011883a 	mov	r8,r4
 1001204:	1000161e 	bne	r2,zero,1001260 <strlen+0x64>
 1001208:	20c00017 	ldw	r3,0(r4)
 100120c:	017fbff4 	movhi	r5,65279
 1001210:	297fbfc4 	addi	r5,r5,-257
 1001214:	01e02074 	movhi	r7,32897
 1001218:	39e02004 	addi	r7,r7,-32640
 100121c:	1945883a 	add	r2,r3,r5
 1001220:	11c4703a 	and	r2,r2,r7
 1001224:	00c6303a 	nor	r3,zero,r3
 1001228:	1886703a 	and	r3,r3,r2
 100122c:	18000c1e 	bne	r3,zero,1001260 <strlen+0x64>
 1001230:	280d883a 	mov	r6,r5
 1001234:	380b883a 	mov	r5,r7
 1001238:	21000104 	addi	r4,r4,4
 100123c:	20800017 	ldw	r2,0(r4)
 1001240:	1187883a 	add	r3,r2,r6
 1001244:	1946703a 	and	r3,r3,r5
 1001248:	0084303a 	nor	r2,zero,r2
 100124c:	10c4703a 	and	r2,r2,r3
 1001250:	103ff926 	beq	r2,zero,1001238 <strlen+0x3c>
 1001254:	20800007 	ldb	r2,0(r4)
 1001258:	10000326 	beq	r2,zero,1001268 <strlen+0x6c>
 100125c:	21000044 	addi	r4,r4,1
 1001260:	20800007 	ldb	r2,0(r4)
 1001264:	103ffd1e 	bne	r2,zero,100125c <strlen+0x60>
 1001268:	2205c83a 	sub	r2,r4,r8
 100126c:	f800283a 	ret

01001270 <__sprint_r>:
 1001270:	30800217 	ldw	r2,8(r6)
 1001274:	defffe04 	addi	sp,sp,-8
 1001278:	dc000015 	stw	r16,0(sp)
 100127c:	dfc00115 	stw	ra,4(sp)
 1001280:	3021883a 	mov	r16,r6
 1001284:	0007883a 	mov	r3,zero
 1001288:	1000061e 	bne	r2,zero,10012a4 <__sprint_r+0x34>
 100128c:	1805883a 	mov	r2,r3
 1001290:	30000115 	stw	zero,4(r6)
 1001294:	dfc00117 	ldw	ra,4(sp)
 1001298:	dc000017 	ldw	r16,0(sp)
 100129c:	dec00204 	addi	sp,sp,8
 10012a0:	f800283a 	ret
 10012a4:	10054480 	call	1005448 <__sfvwrite_r>
 10012a8:	1007883a 	mov	r3,r2
 10012ac:	1805883a 	mov	r2,r3
 10012b0:	80000115 	stw	zero,4(r16)
 10012b4:	80000215 	stw	zero,8(r16)
 10012b8:	dfc00117 	ldw	ra,4(sp)
 10012bc:	dc000017 	ldw	r16,0(sp)
 10012c0:	dec00204 	addi	sp,sp,8
 10012c4:	f800283a 	ret

010012c8 <___vfprintf_internal_r>:
 10012c8:	defea404 	addi	sp,sp,-1392
 10012cc:	dd815815 	stw	r22,1376(sp)
 10012d0:	dc015215 	stw	r16,1352(sp)
 10012d4:	d9c15115 	stw	r7,1348(sp)
 10012d8:	dfc15b15 	stw	ra,1388(sp)
 10012dc:	df015a15 	stw	fp,1384(sp)
 10012e0:	ddc15915 	stw	r23,1380(sp)
 10012e4:	dd415715 	stw	r21,1372(sp)
 10012e8:	dd015615 	stw	r20,1368(sp)
 10012ec:	dcc15515 	stw	r19,1364(sp)
 10012f0:	dc815415 	stw	r18,1360(sp)
 10012f4:	dc415315 	stw	r17,1356(sp)
 10012f8:	282d883a 	mov	r22,r5
 10012fc:	3021883a 	mov	r16,r6
 1001300:	d9014f15 	stw	r4,1340(sp)
 1001304:	1005a6c0 	call	1005a6c <_localeconv_r>
 1001308:	10800017 	ldw	r2,0(r2)
 100130c:	d9c15117 	ldw	r7,1348(sp)
 1001310:	d8814915 	stw	r2,1316(sp)
 1001314:	d8814f17 	ldw	r2,1340(sp)
 1001318:	10000226 	beq	r2,zero,1001324 <___vfprintf_internal_r+0x5c>
 100131c:	10800e17 	ldw	r2,56(r2)
 1001320:	10020d26 	beq	r2,zero,1001b58 <___vfprintf_internal_r+0x890>
 1001324:	b080030b 	ldhu	r2,12(r22)
 1001328:	1080020c 	andi	r2,r2,8
 100132c:	10020e26 	beq	r2,zero,1001b68 <___vfprintf_internal_r+0x8a0>
 1001330:	b0800417 	ldw	r2,16(r22)
 1001334:	10020c26 	beq	r2,zero,1001b68 <___vfprintf_internal_r+0x8a0>
 1001338:	b200030b 	ldhu	r8,12(r22)
 100133c:	00800284 	movi	r2,10
 1001340:	40c0068c 	andi	r3,r8,26
 1001344:	18802f1e 	bne	r3,r2,1001404 <___vfprintf_internal_r+0x13c>
 1001348:	b080038f 	ldh	r2,14(r22)
 100134c:	10002d16 	blt	r2,zero,1001404 <___vfprintf_internal_r+0x13c>
 1001350:	b240038b 	ldhu	r9,14(r22)
 1001354:	b2800717 	ldw	r10,28(r22)
 1001358:	b2c00917 	ldw	r11,36(r22)
 100135c:	d9014f17 	ldw	r4,1340(sp)
 1001360:	dc402904 	addi	r17,sp,164
 1001364:	d8804004 	addi	r2,sp,256
 1001368:	00c10004 	movi	r3,1024
 100136c:	423fff4c 	andi	r8,r8,65533
 1001370:	800d883a 	mov	r6,r16
 1001374:	880b883a 	mov	r5,r17
 1001378:	da002c0d 	sth	r8,176(sp)
 100137c:	da402c8d 	sth	r9,178(sp)
 1001380:	da803015 	stw	r10,192(sp)
 1001384:	dac03215 	stw	r11,200(sp)
 1001388:	d8802d15 	stw	r2,180(sp)
 100138c:	d8c02e15 	stw	r3,184(sp)
 1001390:	d8802915 	stw	r2,164(sp)
 1001394:	d8c02b15 	stw	r3,172(sp)
 1001398:	d8002f15 	stw	zero,188(sp)
 100139c:	10012c80 	call	10012c8 <___vfprintf_internal_r>
 10013a0:	d8814b15 	stw	r2,1324(sp)
 10013a4:	10000416 	blt	r2,zero,10013b8 <___vfprintf_internal_r+0xf0>
 10013a8:	d9014f17 	ldw	r4,1340(sp)
 10013ac:	880b883a 	mov	r5,r17
 10013b0:	1004ae40 	call	1004ae4 <_fflush_r>
 10013b4:	1002321e 	bne	r2,zero,1001c80 <___vfprintf_internal_r+0x9b8>
 10013b8:	d8802c0b 	ldhu	r2,176(sp)
 10013bc:	1080100c 	andi	r2,r2,64
 10013c0:	10000326 	beq	r2,zero,10013d0 <___vfprintf_internal_r+0x108>
 10013c4:	b080030b 	ldhu	r2,12(r22)
 10013c8:	10801014 	ori	r2,r2,64
 10013cc:	b080030d 	sth	r2,12(r22)
 10013d0:	d8814b17 	ldw	r2,1324(sp)
 10013d4:	dfc15b17 	ldw	ra,1388(sp)
 10013d8:	df015a17 	ldw	fp,1384(sp)
 10013dc:	ddc15917 	ldw	r23,1380(sp)
 10013e0:	dd815817 	ldw	r22,1376(sp)
 10013e4:	dd415717 	ldw	r21,1372(sp)
 10013e8:	dd015617 	ldw	r20,1368(sp)
 10013ec:	dcc15517 	ldw	r19,1364(sp)
 10013f0:	dc815417 	ldw	r18,1360(sp)
 10013f4:	dc415317 	ldw	r17,1356(sp)
 10013f8:	dc015217 	ldw	r16,1352(sp)
 10013fc:	dec15c04 	addi	sp,sp,1392
 1001400:	f800283a 	ret
 1001404:	0005883a 	mov	r2,zero
 1001408:	0007883a 	mov	r3,zero
 100140c:	dd401904 	addi	r21,sp,100
 1001410:	d8814215 	stw	r2,1288(sp)
 1001414:	802f883a 	mov	r23,r16
 1001418:	d8c14315 	stw	r3,1292(sp)
 100141c:	d8014b15 	stw	zero,1324(sp)
 1001420:	d8014815 	stw	zero,1312(sp)
 1001424:	d8014415 	stw	zero,1296(sp)
 1001428:	d8014715 	stw	zero,1308(sp)
 100142c:	dd400c15 	stw	r21,48(sp)
 1001430:	d8000e15 	stw	zero,56(sp)
 1001434:	d8000d15 	stw	zero,52(sp)
 1001438:	b8800007 	ldb	r2,0(r23)
 100143c:	10001926 	beq	r2,zero,10014a4 <___vfprintf_internal_r+0x1dc>
 1001440:	00c00944 	movi	r3,37
 1001444:	10c01726 	beq	r2,r3,10014a4 <___vfprintf_internal_r+0x1dc>
 1001448:	b821883a 	mov	r16,r23
 100144c:	00000106 	br	1001454 <___vfprintf_internal_r+0x18c>
 1001450:	10c00326 	beq	r2,r3,1001460 <___vfprintf_internal_r+0x198>
 1001454:	84000044 	addi	r16,r16,1
 1001458:	80800007 	ldb	r2,0(r16)
 100145c:	103ffc1e 	bne	r2,zero,1001450 <___vfprintf_internal_r+0x188>
 1001460:	85e7c83a 	sub	r19,r16,r23
 1001464:	98000e26 	beq	r19,zero,10014a0 <___vfprintf_internal_r+0x1d8>
 1001468:	dc800e17 	ldw	r18,56(sp)
 100146c:	dc400d17 	ldw	r17,52(sp)
 1001470:	008001c4 	movi	r2,7
 1001474:	94e5883a 	add	r18,r18,r19
 1001478:	8c400044 	addi	r17,r17,1
 100147c:	adc00015 	stw	r23,0(r21)
 1001480:	dc800e15 	stw	r18,56(sp)
 1001484:	acc00115 	stw	r19,4(r21)
 1001488:	dc400d15 	stw	r17,52(sp)
 100148c:	14428b16 	blt	r2,r17,1001ebc <___vfprintf_internal_r+0xbf4>
 1001490:	ad400204 	addi	r21,r21,8
 1001494:	d9014b17 	ldw	r4,1324(sp)
 1001498:	24c9883a 	add	r4,r4,r19
 100149c:	d9014b15 	stw	r4,1324(sp)
 10014a0:	802f883a 	mov	r23,r16
 10014a4:	b8800007 	ldb	r2,0(r23)
 10014a8:	10013c26 	beq	r2,zero,100199c <___vfprintf_internal_r+0x6d4>
 10014ac:	bdc00044 	addi	r23,r23,1
 10014b0:	d8000405 	stb	zero,16(sp)
 10014b4:	b8c00007 	ldb	r3,0(r23)
 10014b8:	04ffffc4 	movi	r19,-1
 10014bc:	d8014c15 	stw	zero,1328(sp)
 10014c0:	d8014a15 	stw	zero,1320(sp)
 10014c4:	d8c14d15 	stw	r3,1332(sp)
 10014c8:	bdc00044 	addi	r23,r23,1
 10014cc:	d9414d17 	ldw	r5,1332(sp)
 10014d0:	00801604 	movi	r2,88
 10014d4:	28fff804 	addi	r3,r5,-32
 10014d8:	10c06036 	bltu	r2,r3,100165c <___vfprintf_internal_r+0x394>
 10014dc:	18c5883a 	add	r2,r3,r3
 10014e0:	1085883a 	add	r2,r2,r2
 10014e4:	00c04034 	movhi	r3,256
 10014e8:	18c53e04 	addi	r3,r3,5368
 10014ec:	10c5883a 	add	r2,r2,r3
 10014f0:	11000017 	ldw	r4,0(r2)
 10014f4:	2000683a 	jmp	r4
 10014f8:	0100246c 	andhi	r4,zero,145
 10014fc:	0100165c 	xori	r4,zero,89
 1001500:	0100165c 	xori	r4,zero,89
 1001504:	01002458 	cmpnei	r4,zero,145
 1001508:	0100165c 	xori	r4,zero,89
 100150c:	0100165c 	xori	r4,zero,89
 1001510:	0100165c 	xori	r4,zero,89
 1001514:	0100165c 	xori	r4,zero,89
 1001518:	0100165c 	xori	r4,zero,89
 100151c:	0100165c 	xori	r4,zero,89
 1001520:	01002238 	rdprs	r4,zero,136
 1001524:	01002448 	cmpgei	r4,zero,145
 1001528:	0100165c 	xori	r4,zero,89
 100152c:	01002250 	cmplti	r4,zero,137
 1001530:	010024f0 	cmpltui	r4,zero,147
 1001534:	0100165c 	xori	r4,zero,89
 1001538:	010024dc 	xori	r4,zero,147
 100153c:	01002498 	cmpnei	r4,zero,146
 1001540:	01002498 	cmpnei	r4,zero,146
 1001544:	01002498 	cmpnei	r4,zero,146
 1001548:	01002498 	cmpnei	r4,zero,146
 100154c:	01002498 	cmpnei	r4,zero,146
 1001550:	01002498 	cmpnei	r4,zero,146
 1001554:	01002498 	cmpnei	r4,zero,146
 1001558:	01002498 	cmpnei	r4,zero,146
 100155c:	01002498 	cmpnei	r4,zero,146
 1001560:	0100165c 	xori	r4,zero,89
 1001564:	0100165c 	xori	r4,zero,89
 1001568:	0100165c 	xori	r4,zero,89
 100156c:	0100165c 	xori	r4,zero,89
 1001570:	0100165c 	xori	r4,zero,89
 1001574:	0100165c 	xori	r4,zero,89
 1001578:	0100165c 	xori	r4,zero,89
 100157c:	0100165c 	xori	r4,zero,89
 1001580:	0100165c 	xori	r4,zero,89
 1001584:	0100165c 	xori	r4,zero,89
 1001588:	01001cb4 	movhi	r4,114
 100158c:	01002320 	cmpeqi	r4,zero,140
 1001590:	0100165c 	xori	r4,zero,89
 1001594:	01002320 	cmpeqi	r4,zero,140
 1001598:	0100165c 	xori	r4,zero,89
 100159c:	0100165c 	xori	r4,zero,89
 10015a0:	0100165c 	xori	r4,zero,89
 10015a4:	0100165c 	xori	r4,zero,89
 10015a8:	01002484 	movi	r4,146
 10015ac:	0100165c 	xori	r4,zero,89
 10015b0:	0100165c 	xori	r4,zero,89
 10015b4:	01001d68 	cmpgeui	r4,zero,117
 10015b8:	0100165c 	xori	r4,zero,89
 10015bc:	0100165c 	xori	r4,zero,89
 10015c0:	0100165c 	xori	r4,zero,89
 10015c4:	0100165c 	xori	r4,zero,89
 10015c8:	0100165c 	xori	r4,zero,89
 10015cc:	01001db4 	movhi	r4,118
 10015d0:	0100165c 	xori	r4,zero,89
 10015d4:	0100165c 	xori	r4,zero,89
 10015d8:	010023d4 	movui	r4,143
 10015dc:	0100165c 	xori	r4,zero,89
 10015e0:	0100165c 	xori	r4,zero,89
 10015e4:	0100165c 	xori	r4,zero,89
 10015e8:	0100165c 	xori	r4,zero,89
 10015ec:	0100165c 	xori	r4,zero,89
 10015f0:	0100165c 	xori	r4,zero,89
 10015f4:	0100165c 	xori	r4,zero,89
 10015f8:	0100165c 	xori	r4,zero,89
 10015fc:	0100165c 	xori	r4,zero,89
 1001600:	0100165c 	xori	r4,zero,89
 1001604:	010023a8 	cmpgeui	r4,zero,142
 1001608:	01001cc0 	call	1001cc <__alt_mem_onchip_memory2_0+0x1001cc>
 100160c:	01002320 	cmpeqi	r4,zero,140
 1001610:	01002320 	cmpeqi	r4,zero,140
 1001614:	01002320 	cmpeqi	r4,zero,140
 1001618:	0100230c 	andi	r4,zero,140
 100161c:	01001cc0 	call	1001cc <__alt_mem_onchip_memory2_0+0x1001cc>
 1001620:	0100165c 	xori	r4,zero,89
 1001624:	0100165c 	xori	r4,zero,89
 1001628:	01002294 	movui	r4,138
 100162c:	0100165c 	xori	r4,zero,89
 1001630:	01002264 	muli	r4,zero,137
 1001634:	01001d74 	movhi	r4,117
 1001638:	010022c4 	movi	r4,139
 100163c:	010022b0 	cmpltui	r4,zero,138
 1001640:	0100165c 	xori	r4,zero,89
 1001644:	01002558 	cmpnei	r4,zero,149
 1001648:	0100165c 	xori	r4,zero,89
 100164c:	01001dc0 	call	1001dc <__alt_mem_onchip_memory2_0+0x1001dc>
 1001650:	0100165c 	xori	r4,zero,89
 1001654:	0100165c 	xori	r4,zero,89
 1001658:	01002438 	rdprs	r4,zero,144
 100165c:	d9014d17 	ldw	r4,1332(sp)
 1001660:	2000ce26 	beq	r4,zero,100199c <___vfprintf_internal_r+0x6d4>
 1001664:	01400044 	movi	r5,1
 1001668:	d9800f04 	addi	r6,sp,60
 100166c:	d9c14015 	stw	r7,1280(sp)
 1001670:	d9414515 	stw	r5,1300(sp)
 1001674:	d9814115 	stw	r6,1284(sp)
 1001678:	280f883a 	mov	r7,r5
 100167c:	d9000f05 	stb	r4,60(sp)
 1001680:	d8000405 	stb	zero,16(sp)
 1001684:	d8014615 	stw	zero,1304(sp)
 1001688:	d8c14c17 	ldw	r3,1328(sp)
 100168c:	1880008c 	andi	r2,r3,2
 1001690:	1005003a 	cmpeq	r2,r2,zero
 1001694:	d8815015 	stw	r2,1344(sp)
 1001698:	1000031e 	bne	r2,zero,10016a8 <___vfprintf_internal_r+0x3e0>
 100169c:	d9014517 	ldw	r4,1300(sp)
 10016a0:	21000084 	addi	r4,r4,2
 10016a4:	d9014515 	stw	r4,1300(sp)
 10016a8:	d9414c17 	ldw	r5,1328(sp)
 10016ac:	2940210c 	andi	r5,r5,132
 10016b0:	d9414e15 	stw	r5,1336(sp)
 10016b4:	28002d1e 	bne	r5,zero,100176c <___vfprintf_internal_r+0x4a4>
 10016b8:	d9814a17 	ldw	r6,1320(sp)
 10016bc:	d8814517 	ldw	r2,1300(sp)
 10016c0:	30a1c83a 	sub	r16,r6,r2
 10016c4:	0400290e 	bge	zero,r16,100176c <___vfprintf_internal_r+0x4a4>
 10016c8:	00800404 	movi	r2,16
 10016cc:	14045e0e 	bge	r2,r16,1002848 <___vfprintf_internal_r+0x1580>
 10016d0:	dc800e17 	ldw	r18,56(sp)
 10016d4:	dc400d17 	ldw	r17,52(sp)
 10016d8:	1027883a 	mov	r19,r2
 10016dc:	07004074 	movhi	fp,257
 10016e0:	e709f484 	addi	fp,fp,10194
 10016e4:	050001c4 	movi	r20,7
 10016e8:	00000306 	br	10016f8 <___vfprintf_internal_r+0x430>
 10016ec:	843ffc04 	addi	r16,r16,-16
 10016f0:	ad400204 	addi	r21,r21,8
 10016f4:	9c00130e 	bge	r19,r16,1001744 <___vfprintf_internal_r+0x47c>
 10016f8:	94800404 	addi	r18,r18,16
 10016fc:	8c400044 	addi	r17,r17,1
 1001700:	af000015 	stw	fp,0(r21)
 1001704:	acc00115 	stw	r19,4(r21)
 1001708:	dc800e15 	stw	r18,56(sp)
 100170c:	dc400d15 	stw	r17,52(sp)
 1001710:	a47ff60e 	bge	r20,r17,10016ec <___vfprintf_internal_r+0x424>
 1001714:	d9014f17 	ldw	r4,1340(sp)
 1001718:	b00b883a 	mov	r5,r22
 100171c:	d9800c04 	addi	r6,sp,48
 1001720:	d9c15115 	stw	r7,1348(sp)
 1001724:	10012700 	call	1001270 <__sprint_r>
 1001728:	d9c15117 	ldw	r7,1348(sp)
 100172c:	10009e1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001730:	843ffc04 	addi	r16,r16,-16
 1001734:	dc800e17 	ldw	r18,56(sp)
 1001738:	dc400d17 	ldw	r17,52(sp)
 100173c:	dd401904 	addi	r21,sp,100
 1001740:	9c3fed16 	blt	r19,r16,10016f8 <___vfprintf_internal_r+0x430>
 1001744:	9425883a 	add	r18,r18,r16
 1001748:	8c400044 	addi	r17,r17,1
 100174c:	008001c4 	movi	r2,7
 1001750:	af000015 	stw	fp,0(r21)
 1001754:	ac000115 	stw	r16,4(r21)
 1001758:	dc800e15 	stw	r18,56(sp)
 100175c:	dc400d15 	stw	r17,52(sp)
 1001760:	1441f516 	blt	r2,r17,1001f38 <___vfprintf_internal_r+0xc70>
 1001764:	ad400204 	addi	r21,r21,8
 1001768:	00000206 	br	1001774 <___vfprintf_internal_r+0x4ac>
 100176c:	dc800e17 	ldw	r18,56(sp)
 1001770:	dc400d17 	ldw	r17,52(sp)
 1001774:	d8800407 	ldb	r2,16(sp)
 1001778:	10000b26 	beq	r2,zero,10017a8 <___vfprintf_internal_r+0x4e0>
 100177c:	00800044 	movi	r2,1
 1001780:	94800044 	addi	r18,r18,1
 1001784:	8c400044 	addi	r17,r17,1
 1001788:	a8800115 	stw	r2,4(r21)
 100178c:	d8c00404 	addi	r3,sp,16
 1001790:	008001c4 	movi	r2,7
 1001794:	a8c00015 	stw	r3,0(r21)
 1001798:	dc800e15 	stw	r18,56(sp)
 100179c:	dc400d15 	stw	r17,52(sp)
 10017a0:	1441da16 	blt	r2,r17,1001f0c <___vfprintf_internal_r+0xc44>
 10017a4:	ad400204 	addi	r21,r21,8
 10017a8:	d9015017 	ldw	r4,1344(sp)
 10017ac:	20000b1e 	bne	r4,zero,10017dc <___vfprintf_internal_r+0x514>
 10017b0:	d8800444 	addi	r2,sp,17
 10017b4:	94800084 	addi	r18,r18,2
 10017b8:	8c400044 	addi	r17,r17,1
 10017bc:	a8800015 	stw	r2,0(r21)
 10017c0:	00c00084 	movi	r3,2
 10017c4:	008001c4 	movi	r2,7
 10017c8:	a8c00115 	stw	r3,4(r21)
 10017cc:	dc800e15 	stw	r18,56(sp)
 10017d0:	dc400d15 	stw	r17,52(sp)
 10017d4:	1441c216 	blt	r2,r17,1001ee0 <___vfprintf_internal_r+0xc18>
 10017d8:	ad400204 	addi	r21,r21,8
 10017dc:	d9414e17 	ldw	r5,1336(sp)
 10017e0:	00802004 	movi	r2,128
 10017e4:	2880b126 	beq	r5,r2,1001aac <___vfprintf_internal_r+0x7e4>
 10017e8:	d8c14617 	ldw	r3,1304(sp)
 10017ec:	19e1c83a 	sub	r16,r3,r7
 10017f0:	0400260e 	bge	zero,r16,100188c <___vfprintf_internal_r+0x5c4>
 10017f4:	00800404 	movi	r2,16
 10017f8:	1403cf0e 	bge	r2,r16,1002738 <___vfprintf_internal_r+0x1470>
 10017fc:	1027883a 	mov	r19,r2
 1001800:	07004074 	movhi	fp,257
 1001804:	e709f084 	addi	fp,fp,10178
 1001808:	050001c4 	movi	r20,7
 100180c:	00000306 	br	100181c <___vfprintf_internal_r+0x554>
 1001810:	843ffc04 	addi	r16,r16,-16
 1001814:	ad400204 	addi	r21,r21,8
 1001818:	9c00130e 	bge	r19,r16,1001868 <___vfprintf_internal_r+0x5a0>
 100181c:	94800404 	addi	r18,r18,16
 1001820:	8c400044 	addi	r17,r17,1
 1001824:	af000015 	stw	fp,0(r21)
 1001828:	acc00115 	stw	r19,4(r21)
 100182c:	dc800e15 	stw	r18,56(sp)
 1001830:	dc400d15 	stw	r17,52(sp)
 1001834:	a47ff60e 	bge	r20,r17,1001810 <___vfprintf_internal_r+0x548>
 1001838:	d9014f17 	ldw	r4,1340(sp)
 100183c:	b00b883a 	mov	r5,r22
 1001840:	d9800c04 	addi	r6,sp,48
 1001844:	d9c15115 	stw	r7,1348(sp)
 1001848:	10012700 	call	1001270 <__sprint_r>
 100184c:	d9c15117 	ldw	r7,1348(sp)
 1001850:	1000551e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001854:	843ffc04 	addi	r16,r16,-16
 1001858:	dc800e17 	ldw	r18,56(sp)
 100185c:	dc400d17 	ldw	r17,52(sp)
 1001860:	dd401904 	addi	r21,sp,100
 1001864:	9c3fed16 	blt	r19,r16,100181c <___vfprintf_internal_r+0x554>
 1001868:	9425883a 	add	r18,r18,r16
 100186c:	8c400044 	addi	r17,r17,1
 1001870:	008001c4 	movi	r2,7
 1001874:	af000015 	stw	fp,0(r21)
 1001878:	ac000115 	stw	r16,4(r21)
 100187c:	dc800e15 	stw	r18,56(sp)
 1001880:	dc400d15 	stw	r17,52(sp)
 1001884:	14418216 	blt	r2,r17,1001e90 <___vfprintf_internal_r+0xbc8>
 1001888:	ad400204 	addi	r21,r21,8
 100188c:	d9014c17 	ldw	r4,1328(sp)
 1001890:	2080400c 	andi	r2,r4,256
 1001894:	10004a1e 	bne	r2,zero,10019c0 <___vfprintf_internal_r+0x6f8>
 1001898:	d9414117 	ldw	r5,1284(sp)
 100189c:	91e5883a 	add	r18,r18,r7
 10018a0:	8c400044 	addi	r17,r17,1
 10018a4:	008001c4 	movi	r2,7
 10018a8:	a9400015 	stw	r5,0(r21)
 10018ac:	a9c00115 	stw	r7,4(r21)
 10018b0:	dc800e15 	stw	r18,56(sp)
 10018b4:	dc400d15 	stw	r17,52(sp)
 10018b8:	14416716 	blt	r2,r17,1001e58 <___vfprintf_internal_r+0xb90>
 10018bc:	a8c00204 	addi	r3,r21,8
 10018c0:	d9814c17 	ldw	r6,1328(sp)
 10018c4:	3080010c 	andi	r2,r6,4
 10018c8:	10002826 	beq	r2,zero,100196c <___vfprintf_internal_r+0x6a4>
 10018cc:	d8814a17 	ldw	r2,1320(sp)
 10018d0:	d9014517 	ldw	r4,1300(sp)
 10018d4:	1121c83a 	sub	r16,r2,r4
 10018d8:	0400240e 	bge	zero,r16,100196c <___vfprintf_internal_r+0x6a4>
 10018dc:	00800404 	movi	r2,16
 10018e0:	1404550e 	bge	r2,r16,1002a38 <___vfprintf_internal_r+0x1770>
 10018e4:	dc400d17 	ldw	r17,52(sp)
 10018e8:	1027883a 	mov	r19,r2
 10018ec:	07004074 	movhi	fp,257
 10018f0:	e709f484 	addi	fp,fp,10194
 10018f4:	050001c4 	movi	r20,7
 10018f8:	00000306 	br	1001908 <___vfprintf_internal_r+0x640>
 10018fc:	843ffc04 	addi	r16,r16,-16
 1001900:	18c00204 	addi	r3,r3,8
 1001904:	9c00110e 	bge	r19,r16,100194c <___vfprintf_internal_r+0x684>
 1001908:	94800404 	addi	r18,r18,16
 100190c:	8c400044 	addi	r17,r17,1
 1001910:	1f000015 	stw	fp,0(r3)
 1001914:	1cc00115 	stw	r19,4(r3)
 1001918:	dc800e15 	stw	r18,56(sp)
 100191c:	dc400d15 	stw	r17,52(sp)
 1001920:	a47ff60e 	bge	r20,r17,10018fc <___vfprintf_internal_r+0x634>
 1001924:	d9014f17 	ldw	r4,1340(sp)
 1001928:	b00b883a 	mov	r5,r22
 100192c:	d9800c04 	addi	r6,sp,48
 1001930:	10012700 	call	1001270 <__sprint_r>
 1001934:	10001c1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001938:	843ffc04 	addi	r16,r16,-16
 100193c:	dc800e17 	ldw	r18,56(sp)
 1001940:	dc400d17 	ldw	r17,52(sp)
 1001944:	d8c01904 	addi	r3,sp,100
 1001948:	9c3fef16 	blt	r19,r16,1001908 <___vfprintf_internal_r+0x640>
 100194c:	9425883a 	add	r18,r18,r16
 1001950:	8c400044 	addi	r17,r17,1
 1001954:	008001c4 	movi	r2,7
 1001958:	1f000015 	stw	fp,0(r3)
 100195c:	1c000115 	stw	r16,4(r3)
 1001960:	dc800e15 	stw	r18,56(sp)
 1001964:	dc400d15 	stw	r17,52(sp)
 1001968:	1440cb16 	blt	r2,r17,1001c98 <___vfprintf_internal_r+0x9d0>
 100196c:	d8814a17 	ldw	r2,1320(sp)
 1001970:	d9414517 	ldw	r5,1300(sp)
 1001974:	1140010e 	bge	r2,r5,100197c <___vfprintf_internal_r+0x6b4>
 1001978:	2805883a 	mov	r2,r5
 100197c:	d9814b17 	ldw	r6,1324(sp)
 1001980:	308d883a 	add	r6,r6,r2
 1001984:	d9814b15 	stw	r6,1324(sp)
 1001988:	90013b1e 	bne	r18,zero,1001e78 <___vfprintf_internal_r+0xbb0>
 100198c:	d9c14017 	ldw	r7,1280(sp)
 1001990:	dd401904 	addi	r21,sp,100
 1001994:	d8000d15 	stw	zero,52(sp)
 1001998:	003ea706 	br	1001438 <___vfprintf_internal_r+0x170>
 100199c:	d8800e17 	ldw	r2,56(sp)
 10019a0:	1005451e 	bne	r2,zero,1002eb8 <___vfprintf_internal_r+0x1bf0>
 10019a4:	d8000d15 	stw	zero,52(sp)
 10019a8:	b080030b 	ldhu	r2,12(r22)
 10019ac:	1080100c 	andi	r2,r2,64
 10019b0:	103e8726 	beq	r2,zero,10013d0 <___vfprintf_internal_r+0x108>
 10019b4:	00bfffc4 	movi	r2,-1
 10019b8:	d8814b15 	stw	r2,1324(sp)
 10019bc:	003e8406 	br	10013d0 <___vfprintf_internal_r+0x108>
 10019c0:	d9814d17 	ldw	r6,1332(sp)
 10019c4:	00801944 	movi	r2,101
 10019c8:	11806e16 	blt	r2,r6,1001b84 <___vfprintf_internal_r+0x8bc>
 10019cc:	d9414717 	ldw	r5,1308(sp)
 10019d0:	00c00044 	movi	r3,1
 10019d4:	1943490e 	bge	r3,r5,10026fc <___vfprintf_internal_r+0x1434>
 10019d8:	d8814117 	ldw	r2,1284(sp)
 10019dc:	94800044 	addi	r18,r18,1
 10019e0:	8c400044 	addi	r17,r17,1
 10019e4:	a8800015 	stw	r2,0(r21)
 10019e8:	008001c4 	movi	r2,7
 10019ec:	a8c00115 	stw	r3,4(r21)
 10019f0:	dc800e15 	stw	r18,56(sp)
 10019f4:	dc400d15 	stw	r17,52(sp)
 10019f8:	1441ca16 	blt	r2,r17,1002124 <___vfprintf_internal_r+0xe5c>
 10019fc:	a8c00204 	addi	r3,r21,8
 1001a00:	d9014917 	ldw	r4,1316(sp)
 1001a04:	00800044 	movi	r2,1
 1001a08:	94800044 	addi	r18,r18,1
 1001a0c:	8c400044 	addi	r17,r17,1
 1001a10:	18800115 	stw	r2,4(r3)
 1001a14:	008001c4 	movi	r2,7
 1001a18:	19000015 	stw	r4,0(r3)
 1001a1c:	dc800e15 	stw	r18,56(sp)
 1001a20:	dc400d15 	stw	r17,52(sp)
 1001a24:	1441b616 	blt	r2,r17,1002100 <___vfprintf_internal_r+0xe38>
 1001a28:	1cc00204 	addi	r19,r3,8
 1001a2c:	d9014217 	ldw	r4,1288(sp)
 1001a30:	d9414317 	ldw	r5,1292(sp)
 1001a34:	000d883a 	mov	r6,zero
 1001a38:	000f883a 	mov	r7,zero
 1001a3c:	1009d7c0 	call	1009d7c <__nedf2>
 1001a40:	10017426 	beq	r2,zero,1002014 <___vfprintf_internal_r+0xd4c>
 1001a44:	d9414717 	ldw	r5,1308(sp)
 1001a48:	d9814117 	ldw	r6,1284(sp)
 1001a4c:	8c400044 	addi	r17,r17,1
 1001a50:	2c85883a 	add	r2,r5,r18
 1001a54:	14bfffc4 	addi	r18,r2,-1
 1001a58:	28bfffc4 	addi	r2,r5,-1
 1001a5c:	30c00044 	addi	r3,r6,1
 1001a60:	98800115 	stw	r2,4(r19)
 1001a64:	008001c4 	movi	r2,7
 1001a68:	98c00015 	stw	r3,0(r19)
 1001a6c:	dc800e15 	stw	r18,56(sp)
 1001a70:	dc400d15 	stw	r17,52(sp)
 1001a74:	14418e16 	blt	r2,r17,10020b0 <___vfprintf_internal_r+0xde8>
 1001a78:	9cc00204 	addi	r19,r19,8
 1001a7c:	d9414817 	ldw	r5,1312(sp)
 1001a80:	d8800804 	addi	r2,sp,32
 1001a84:	8c400044 	addi	r17,r17,1
 1001a88:	9165883a 	add	r18,r18,r5
 1001a8c:	98800015 	stw	r2,0(r19)
 1001a90:	008001c4 	movi	r2,7
 1001a94:	99400115 	stw	r5,4(r19)
 1001a98:	dc800e15 	stw	r18,56(sp)
 1001a9c:	dc400d15 	stw	r17,52(sp)
 1001aa0:	1440ed16 	blt	r2,r17,1001e58 <___vfprintf_internal_r+0xb90>
 1001aa4:	98c00204 	addi	r3,r19,8
 1001aa8:	003f8506 	br	10018c0 <___vfprintf_internal_r+0x5f8>
 1001aac:	d9814a17 	ldw	r6,1320(sp)
 1001ab0:	d8814517 	ldw	r2,1300(sp)
 1001ab4:	30a1c83a 	sub	r16,r6,r2
 1001ab8:	043f4b0e 	bge	zero,r16,10017e8 <___vfprintf_internal_r+0x520>
 1001abc:	00800404 	movi	r2,16
 1001ac0:	14043a0e 	bge	r2,r16,1002bac <___vfprintf_internal_r+0x18e4>
 1001ac4:	1027883a 	mov	r19,r2
 1001ac8:	07004074 	movhi	fp,257
 1001acc:	e709f084 	addi	fp,fp,10178
 1001ad0:	050001c4 	movi	r20,7
 1001ad4:	00000306 	br	1001ae4 <___vfprintf_internal_r+0x81c>
 1001ad8:	843ffc04 	addi	r16,r16,-16
 1001adc:	ad400204 	addi	r21,r21,8
 1001ae0:	9c00130e 	bge	r19,r16,1001b30 <___vfprintf_internal_r+0x868>
 1001ae4:	94800404 	addi	r18,r18,16
 1001ae8:	8c400044 	addi	r17,r17,1
 1001aec:	af000015 	stw	fp,0(r21)
 1001af0:	acc00115 	stw	r19,4(r21)
 1001af4:	dc800e15 	stw	r18,56(sp)
 1001af8:	dc400d15 	stw	r17,52(sp)
 1001afc:	a47ff60e 	bge	r20,r17,1001ad8 <___vfprintf_internal_r+0x810>
 1001b00:	d9014f17 	ldw	r4,1340(sp)
 1001b04:	b00b883a 	mov	r5,r22
 1001b08:	d9800c04 	addi	r6,sp,48
 1001b0c:	d9c15115 	stw	r7,1348(sp)
 1001b10:	10012700 	call	1001270 <__sprint_r>
 1001b14:	d9c15117 	ldw	r7,1348(sp)
 1001b18:	103fa31e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001b1c:	843ffc04 	addi	r16,r16,-16
 1001b20:	dc800e17 	ldw	r18,56(sp)
 1001b24:	dc400d17 	ldw	r17,52(sp)
 1001b28:	dd401904 	addi	r21,sp,100
 1001b2c:	9c3fed16 	blt	r19,r16,1001ae4 <___vfprintf_internal_r+0x81c>
 1001b30:	9425883a 	add	r18,r18,r16
 1001b34:	8c400044 	addi	r17,r17,1
 1001b38:	008001c4 	movi	r2,7
 1001b3c:	af000015 	stw	fp,0(r21)
 1001b40:	ac000115 	stw	r16,4(r21)
 1001b44:	dc800e15 	stw	r18,56(sp)
 1001b48:	dc400d15 	stw	r17,52(sp)
 1001b4c:	14416116 	blt	r2,r17,10020d4 <___vfprintf_internal_r+0xe0c>
 1001b50:	ad400204 	addi	r21,r21,8
 1001b54:	003f2406 	br	10017e8 <___vfprintf_internal_r+0x520>
 1001b58:	d9014f17 	ldw	r4,1340(sp)
 1001b5c:	1004d7c0 	call	1004d7c <__sinit>
 1001b60:	d9c15117 	ldw	r7,1348(sp)
 1001b64:	003def06 	br	1001324 <___vfprintf_internal_r+0x5c>
 1001b68:	d9014f17 	ldw	r4,1340(sp)
 1001b6c:	b00b883a 	mov	r5,r22
 1001b70:	d9c15115 	stw	r7,1348(sp)
 1001b74:	10031b00 	call	10031b0 <__swsetup_r>
 1001b78:	d9c15117 	ldw	r7,1348(sp)
 1001b7c:	103dee26 	beq	r2,zero,1001338 <___vfprintf_internal_r+0x70>
 1001b80:	003f8c06 	br	10019b4 <___vfprintf_internal_r+0x6ec>
 1001b84:	d9014217 	ldw	r4,1288(sp)
 1001b88:	d9414317 	ldw	r5,1292(sp)
 1001b8c:	000d883a 	mov	r6,zero
 1001b90:	000f883a 	mov	r7,zero
 1001b94:	1009cf40 	call	1009cf4 <__eqdf2>
 1001b98:	1000f21e 	bne	r2,zero,1001f64 <___vfprintf_internal_r+0xc9c>
 1001b9c:	00804074 	movhi	r2,257
 1001ba0:	1089f004 	addi	r2,r2,10176
 1001ba4:	94800044 	addi	r18,r18,1
 1001ba8:	8c400044 	addi	r17,r17,1
 1001bac:	a8800015 	stw	r2,0(r21)
 1001bb0:	00c00044 	movi	r3,1
 1001bb4:	008001c4 	movi	r2,7
 1001bb8:	a8c00115 	stw	r3,4(r21)
 1001bbc:	dc800e15 	stw	r18,56(sp)
 1001bc0:	dc400d15 	stw	r17,52(sp)
 1001bc4:	14430016 	blt	r2,r17,10027c8 <___vfprintf_internal_r+0x1500>
 1001bc8:	a8c00204 	addi	r3,r21,8
 1001bcc:	d8800517 	ldw	r2,20(sp)
 1001bd0:	d9014717 	ldw	r4,1308(sp)
 1001bd4:	11015c0e 	bge	r2,r4,1002148 <___vfprintf_internal_r+0xe80>
 1001bd8:	dc400d17 	ldw	r17,52(sp)
 1001bdc:	d9814917 	ldw	r6,1316(sp)
 1001be0:	00800044 	movi	r2,1
 1001be4:	94800044 	addi	r18,r18,1
 1001be8:	8c400044 	addi	r17,r17,1
 1001bec:	18800115 	stw	r2,4(r3)
 1001bf0:	008001c4 	movi	r2,7
 1001bf4:	19800015 	stw	r6,0(r3)
 1001bf8:	dc800e15 	stw	r18,56(sp)
 1001bfc:	dc400d15 	stw	r17,52(sp)
 1001c00:	14431616 	blt	r2,r17,100285c <___vfprintf_internal_r+0x1594>
 1001c04:	18c00204 	addi	r3,r3,8
 1001c08:	d8814717 	ldw	r2,1308(sp)
 1001c0c:	143fffc4 	addi	r16,r2,-1
 1001c10:	043f2b0e 	bge	zero,r16,10018c0 <___vfprintf_internal_r+0x5f8>
 1001c14:	00800404 	movi	r2,16
 1001c18:	1402a80e 	bge	r2,r16,10026bc <___vfprintf_internal_r+0x13f4>
 1001c1c:	dc400d17 	ldw	r17,52(sp)
 1001c20:	1027883a 	mov	r19,r2
 1001c24:	07004074 	movhi	fp,257
 1001c28:	e709f084 	addi	fp,fp,10178
 1001c2c:	050001c4 	movi	r20,7
 1001c30:	00000306 	br	1001c40 <___vfprintf_internal_r+0x978>
 1001c34:	18c00204 	addi	r3,r3,8
 1001c38:	843ffc04 	addi	r16,r16,-16
 1001c3c:	9c02a20e 	bge	r19,r16,10026c8 <___vfprintf_internal_r+0x1400>
 1001c40:	94800404 	addi	r18,r18,16
 1001c44:	8c400044 	addi	r17,r17,1
 1001c48:	1f000015 	stw	fp,0(r3)
 1001c4c:	1cc00115 	stw	r19,4(r3)
 1001c50:	dc800e15 	stw	r18,56(sp)
 1001c54:	dc400d15 	stw	r17,52(sp)
 1001c58:	a47ff60e 	bge	r20,r17,1001c34 <___vfprintf_internal_r+0x96c>
 1001c5c:	d9014f17 	ldw	r4,1340(sp)
 1001c60:	b00b883a 	mov	r5,r22
 1001c64:	d9800c04 	addi	r6,sp,48
 1001c68:	10012700 	call	1001270 <__sprint_r>
 1001c6c:	103f4e1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001c70:	dc800e17 	ldw	r18,56(sp)
 1001c74:	dc400d17 	ldw	r17,52(sp)
 1001c78:	d8c01904 	addi	r3,sp,100
 1001c7c:	003fee06 	br	1001c38 <___vfprintf_internal_r+0x970>
 1001c80:	d8802c0b 	ldhu	r2,176(sp)
 1001c84:	00ffffc4 	movi	r3,-1
 1001c88:	d8c14b15 	stw	r3,1324(sp)
 1001c8c:	1080100c 	andi	r2,r2,64
 1001c90:	103dcc1e 	bne	r2,zero,10013c4 <___vfprintf_internal_r+0xfc>
 1001c94:	003dce06 	br	10013d0 <___vfprintf_internal_r+0x108>
 1001c98:	d9014f17 	ldw	r4,1340(sp)
 1001c9c:	b00b883a 	mov	r5,r22
 1001ca0:	d9800c04 	addi	r6,sp,48
 1001ca4:	10012700 	call	1001270 <__sprint_r>
 1001ca8:	103f3f1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001cac:	dc800e17 	ldw	r18,56(sp)
 1001cb0:	003f2e06 	br	100196c <___vfprintf_internal_r+0x6a4>
 1001cb4:	d9414c17 	ldw	r5,1328(sp)
 1001cb8:	29400414 	ori	r5,r5,16
 1001cbc:	d9414c15 	stw	r5,1328(sp)
 1001cc0:	d9814c17 	ldw	r6,1328(sp)
 1001cc4:	3080080c 	andi	r2,r6,32
 1001cc8:	10014f1e 	bne	r2,zero,1002208 <___vfprintf_internal_r+0xf40>
 1001ccc:	d8c14c17 	ldw	r3,1328(sp)
 1001cd0:	1880040c 	andi	r2,r3,16
 1001cd4:	1002f01e 	bne	r2,zero,1002898 <___vfprintf_internal_r+0x15d0>
 1001cd8:	d9014c17 	ldw	r4,1328(sp)
 1001cdc:	2080100c 	andi	r2,r4,64
 1001ce0:	1002ed26 	beq	r2,zero,1002898 <___vfprintf_internal_r+0x15d0>
 1001ce4:	3880000f 	ldh	r2,0(r7)
 1001ce8:	39c00104 	addi	r7,r7,4
 1001cec:	d9c14015 	stw	r7,1280(sp)
 1001cf0:	1023d7fa 	srai	r17,r2,31
 1001cf4:	1021883a 	mov	r16,r2
 1001cf8:	88037816 	blt	r17,zero,1002adc <___vfprintf_internal_r+0x1814>
 1001cfc:	01000044 	movi	r4,1
 1001d00:	98000416 	blt	r19,zero,1001d14 <___vfprintf_internal_r+0xa4c>
 1001d04:	d8c14c17 	ldw	r3,1328(sp)
 1001d08:	00bfdfc4 	movi	r2,-129
 1001d0c:	1886703a 	and	r3,r3,r2
 1001d10:	d8c14c15 	stw	r3,1328(sp)
 1001d14:	8444b03a 	or	r2,r16,r17
 1001d18:	10022c1e 	bne	r2,zero,10025cc <___vfprintf_internal_r+0x1304>
 1001d1c:	98022b1e 	bne	r19,zero,10025cc <___vfprintf_internal_r+0x1304>
 1001d20:	20803fcc 	andi	r2,r4,255
 1001d24:	1002a126 	beq	r2,zero,10027ac <___vfprintf_internal_r+0x14e4>
 1001d28:	d8c01904 	addi	r3,sp,100
 1001d2c:	dd000f04 	addi	r20,sp,60
 1001d30:	d8c14115 	stw	r3,1284(sp)
 1001d34:	d8c14117 	ldw	r3,1284(sp)
 1001d38:	dcc14515 	stw	r19,1300(sp)
 1001d3c:	a0c5c83a 	sub	r2,r20,r3
 1001d40:	11c00a04 	addi	r7,r2,40
 1001d44:	99c0010e 	bge	r19,r7,1001d4c <___vfprintf_internal_r+0xa84>
 1001d48:	d9c14515 	stw	r7,1300(sp)
 1001d4c:	dcc14615 	stw	r19,1304(sp)
 1001d50:	d8800407 	ldb	r2,16(sp)
 1001d54:	103e4c26 	beq	r2,zero,1001688 <___vfprintf_internal_r+0x3c0>
 1001d58:	d8814517 	ldw	r2,1300(sp)
 1001d5c:	10800044 	addi	r2,r2,1
 1001d60:	d8814515 	stw	r2,1300(sp)
 1001d64:	003e4806 	br	1001688 <___vfprintf_internal_r+0x3c0>
 1001d68:	d9814c17 	ldw	r6,1328(sp)
 1001d6c:	31800414 	ori	r6,r6,16
 1001d70:	d9814c15 	stw	r6,1328(sp)
 1001d74:	d8c14c17 	ldw	r3,1328(sp)
 1001d78:	1880080c 	andi	r2,r3,32
 1001d7c:	1001271e 	bne	r2,zero,100221c <___vfprintf_internal_r+0xf54>
 1001d80:	d9414c17 	ldw	r5,1328(sp)
 1001d84:	2880040c 	andi	r2,r5,16
 1001d88:	1002bc1e 	bne	r2,zero,100287c <___vfprintf_internal_r+0x15b4>
 1001d8c:	d9814c17 	ldw	r6,1328(sp)
 1001d90:	3080100c 	andi	r2,r6,64
 1001d94:	1002b926 	beq	r2,zero,100287c <___vfprintf_internal_r+0x15b4>
 1001d98:	3c00000b 	ldhu	r16,0(r7)
 1001d9c:	0009883a 	mov	r4,zero
 1001da0:	39c00104 	addi	r7,r7,4
 1001da4:	0023883a 	mov	r17,zero
 1001da8:	d9c14015 	stw	r7,1280(sp)
 1001dac:	d8000405 	stb	zero,16(sp)
 1001db0:	003fd306 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1001db4:	d9014c17 	ldw	r4,1328(sp)
 1001db8:	21000414 	ori	r4,r4,16
 1001dbc:	d9014c15 	stw	r4,1328(sp)
 1001dc0:	d9414c17 	ldw	r5,1328(sp)
 1001dc4:	2880080c 	andi	r2,r5,32
 1001dc8:	1001081e 	bne	r2,zero,10021ec <___vfprintf_internal_r+0xf24>
 1001dcc:	d8c14c17 	ldw	r3,1328(sp)
 1001dd0:	1880040c 	andi	r2,r3,16
 1001dd4:	1002b61e 	bne	r2,zero,10028b0 <___vfprintf_internal_r+0x15e8>
 1001dd8:	d9014c17 	ldw	r4,1328(sp)
 1001ddc:	2080100c 	andi	r2,r4,64
 1001de0:	1002b326 	beq	r2,zero,10028b0 <___vfprintf_internal_r+0x15e8>
 1001de4:	3c00000b 	ldhu	r16,0(r7)
 1001de8:	01000044 	movi	r4,1
 1001dec:	39c00104 	addi	r7,r7,4
 1001df0:	0023883a 	mov	r17,zero
 1001df4:	d9c14015 	stw	r7,1280(sp)
 1001df8:	d8000405 	stb	zero,16(sp)
 1001dfc:	003fc006 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1001e00:	d9014f17 	ldw	r4,1340(sp)
 1001e04:	b00b883a 	mov	r5,r22
 1001e08:	d9800c04 	addi	r6,sp,48
 1001e0c:	10012700 	call	1001270 <__sprint_r>
 1001e10:	103ee51e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001e14:	dc800e17 	ldw	r18,56(sp)
 1001e18:	d8c01904 	addi	r3,sp,100
 1001e1c:	d9814c17 	ldw	r6,1328(sp)
 1001e20:	3080004c 	andi	r2,r6,1
 1001e24:	1005003a 	cmpeq	r2,r2,zero
 1001e28:	103ea51e 	bne	r2,zero,10018c0 <___vfprintf_internal_r+0x5f8>
 1001e2c:	00800044 	movi	r2,1
 1001e30:	dc400d17 	ldw	r17,52(sp)
 1001e34:	18800115 	stw	r2,4(r3)
 1001e38:	d8814917 	ldw	r2,1316(sp)
 1001e3c:	94800044 	addi	r18,r18,1
 1001e40:	8c400044 	addi	r17,r17,1
 1001e44:	18800015 	stw	r2,0(r3)
 1001e48:	008001c4 	movi	r2,7
 1001e4c:	dc800e15 	stw	r18,56(sp)
 1001e50:	dc400d15 	stw	r17,52(sp)
 1001e54:	1442240e 	bge	r2,r17,10026e8 <___vfprintf_internal_r+0x1420>
 1001e58:	d9014f17 	ldw	r4,1340(sp)
 1001e5c:	b00b883a 	mov	r5,r22
 1001e60:	d9800c04 	addi	r6,sp,48
 1001e64:	10012700 	call	1001270 <__sprint_r>
 1001e68:	103ecf1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001e6c:	dc800e17 	ldw	r18,56(sp)
 1001e70:	d8c01904 	addi	r3,sp,100
 1001e74:	003e9206 	br	10018c0 <___vfprintf_internal_r+0x5f8>
 1001e78:	d9014f17 	ldw	r4,1340(sp)
 1001e7c:	b00b883a 	mov	r5,r22
 1001e80:	d9800c04 	addi	r6,sp,48
 1001e84:	10012700 	call	1001270 <__sprint_r>
 1001e88:	103ec026 	beq	r2,zero,100198c <___vfprintf_internal_r+0x6c4>
 1001e8c:	003ec606 	br	10019a8 <___vfprintf_internal_r+0x6e0>
 1001e90:	d9014f17 	ldw	r4,1340(sp)
 1001e94:	b00b883a 	mov	r5,r22
 1001e98:	d9800c04 	addi	r6,sp,48
 1001e9c:	d9c15115 	stw	r7,1348(sp)
 1001ea0:	10012700 	call	1001270 <__sprint_r>
 1001ea4:	d9c15117 	ldw	r7,1348(sp)
 1001ea8:	103ebf1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001eac:	dc800e17 	ldw	r18,56(sp)
 1001eb0:	dc400d17 	ldw	r17,52(sp)
 1001eb4:	dd401904 	addi	r21,sp,100
 1001eb8:	003e7406 	br	100188c <___vfprintf_internal_r+0x5c4>
 1001ebc:	d9014f17 	ldw	r4,1340(sp)
 1001ec0:	b00b883a 	mov	r5,r22
 1001ec4:	d9800c04 	addi	r6,sp,48
 1001ec8:	d9c15115 	stw	r7,1348(sp)
 1001ecc:	10012700 	call	1001270 <__sprint_r>
 1001ed0:	d9c15117 	ldw	r7,1348(sp)
 1001ed4:	103eb41e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001ed8:	dd401904 	addi	r21,sp,100
 1001edc:	003d6d06 	br	1001494 <___vfprintf_internal_r+0x1cc>
 1001ee0:	d9014f17 	ldw	r4,1340(sp)
 1001ee4:	b00b883a 	mov	r5,r22
 1001ee8:	d9800c04 	addi	r6,sp,48
 1001eec:	d9c15115 	stw	r7,1348(sp)
 1001ef0:	10012700 	call	1001270 <__sprint_r>
 1001ef4:	d9c15117 	ldw	r7,1348(sp)
 1001ef8:	103eab1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001efc:	dc800e17 	ldw	r18,56(sp)
 1001f00:	dc400d17 	ldw	r17,52(sp)
 1001f04:	dd401904 	addi	r21,sp,100
 1001f08:	003e3406 	br	10017dc <___vfprintf_internal_r+0x514>
 1001f0c:	d9014f17 	ldw	r4,1340(sp)
 1001f10:	b00b883a 	mov	r5,r22
 1001f14:	d9800c04 	addi	r6,sp,48
 1001f18:	d9c15115 	stw	r7,1348(sp)
 1001f1c:	10012700 	call	1001270 <__sprint_r>
 1001f20:	d9c15117 	ldw	r7,1348(sp)
 1001f24:	103ea01e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001f28:	dc800e17 	ldw	r18,56(sp)
 1001f2c:	dc400d17 	ldw	r17,52(sp)
 1001f30:	dd401904 	addi	r21,sp,100
 1001f34:	003e1c06 	br	10017a8 <___vfprintf_internal_r+0x4e0>
 1001f38:	d9014f17 	ldw	r4,1340(sp)
 1001f3c:	b00b883a 	mov	r5,r22
 1001f40:	d9800c04 	addi	r6,sp,48
 1001f44:	d9c15115 	stw	r7,1348(sp)
 1001f48:	10012700 	call	1001270 <__sprint_r>
 1001f4c:	d9c15117 	ldw	r7,1348(sp)
 1001f50:	103e951e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1001f54:	dc800e17 	ldw	r18,56(sp)
 1001f58:	dc400d17 	ldw	r17,52(sp)
 1001f5c:	dd401904 	addi	r21,sp,100
 1001f60:	003e0406 	br	1001774 <___vfprintf_internal_r+0x4ac>
 1001f64:	d9000517 	ldw	r4,20(sp)
 1001f68:	0102580e 	bge	zero,r4,10028cc <___vfprintf_internal_r+0x1604>
 1001f6c:	d9814717 	ldw	r6,1308(sp)
 1001f70:	21807a16 	blt	r4,r6,100215c <___vfprintf_internal_r+0xe94>
 1001f74:	d8814117 	ldw	r2,1284(sp)
 1001f78:	91a5883a 	add	r18,r18,r6
 1001f7c:	8c400044 	addi	r17,r17,1
 1001f80:	a8800015 	stw	r2,0(r21)
 1001f84:	008001c4 	movi	r2,7
 1001f88:	a9800115 	stw	r6,4(r21)
 1001f8c:	dc800e15 	stw	r18,56(sp)
 1001f90:	dc400d15 	stw	r17,52(sp)
 1001f94:	1442fc16 	blt	r2,r17,1002b88 <___vfprintf_internal_r+0x18c0>
 1001f98:	a8c00204 	addi	r3,r21,8
 1001f9c:	d9414717 	ldw	r5,1308(sp)
 1001fa0:	2161c83a 	sub	r16,r4,r5
 1001fa4:	043f9d0e 	bge	zero,r16,1001e1c <___vfprintf_internal_r+0xb54>
 1001fa8:	00800404 	movi	r2,16
 1001fac:	1402190e 	bge	r2,r16,1002814 <___vfprintf_internal_r+0x154c>
 1001fb0:	dc400d17 	ldw	r17,52(sp)
 1001fb4:	1027883a 	mov	r19,r2
 1001fb8:	07004074 	movhi	fp,257
 1001fbc:	e709f084 	addi	fp,fp,10178
 1001fc0:	050001c4 	movi	r20,7
 1001fc4:	00000306 	br	1001fd4 <___vfprintf_internal_r+0xd0c>
 1001fc8:	18c00204 	addi	r3,r3,8
 1001fcc:	843ffc04 	addi	r16,r16,-16
 1001fd0:	9c02130e 	bge	r19,r16,1002820 <___vfprintf_internal_r+0x1558>
 1001fd4:	94800404 	addi	r18,r18,16
 1001fd8:	8c400044 	addi	r17,r17,1
 1001fdc:	1f000015 	stw	fp,0(r3)
 1001fe0:	1cc00115 	stw	r19,4(r3)
 1001fe4:	dc800e15 	stw	r18,56(sp)
 1001fe8:	dc400d15 	stw	r17,52(sp)
 1001fec:	a47ff60e 	bge	r20,r17,1001fc8 <___vfprintf_internal_r+0xd00>
 1001ff0:	d9014f17 	ldw	r4,1340(sp)
 1001ff4:	b00b883a 	mov	r5,r22
 1001ff8:	d9800c04 	addi	r6,sp,48
 1001ffc:	10012700 	call	1001270 <__sprint_r>
 1002000:	103e691e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002004:	dc800e17 	ldw	r18,56(sp)
 1002008:	dc400d17 	ldw	r17,52(sp)
 100200c:	d8c01904 	addi	r3,sp,100
 1002010:	003fee06 	br	1001fcc <___vfprintf_internal_r+0xd04>
 1002014:	d8814717 	ldw	r2,1308(sp)
 1002018:	143fffc4 	addi	r16,r2,-1
 100201c:	043e970e 	bge	zero,r16,1001a7c <___vfprintf_internal_r+0x7b4>
 1002020:	00800404 	movi	r2,16
 1002024:	1400180e 	bge	r2,r16,1002088 <___vfprintf_internal_r+0xdc0>
 1002028:	1029883a 	mov	r20,r2
 100202c:	07004074 	movhi	fp,257
 1002030:	e709f084 	addi	fp,fp,10178
 1002034:	054001c4 	movi	r21,7
 1002038:	00000306 	br	1002048 <___vfprintf_internal_r+0xd80>
 100203c:	9cc00204 	addi	r19,r19,8
 1002040:	843ffc04 	addi	r16,r16,-16
 1002044:	a400120e 	bge	r20,r16,1002090 <___vfprintf_internal_r+0xdc8>
 1002048:	94800404 	addi	r18,r18,16
 100204c:	8c400044 	addi	r17,r17,1
 1002050:	9f000015 	stw	fp,0(r19)
 1002054:	9d000115 	stw	r20,4(r19)
 1002058:	dc800e15 	stw	r18,56(sp)
 100205c:	dc400d15 	stw	r17,52(sp)
 1002060:	ac7ff60e 	bge	r21,r17,100203c <___vfprintf_internal_r+0xd74>
 1002064:	d9014f17 	ldw	r4,1340(sp)
 1002068:	b00b883a 	mov	r5,r22
 100206c:	d9800c04 	addi	r6,sp,48
 1002070:	10012700 	call	1001270 <__sprint_r>
 1002074:	103e4c1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002078:	dc800e17 	ldw	r18,56(sp)
 100207c:	dc400d17 	ldw	r17,52(sp)
 1002080:	dcc01904 	addi	r19,sp,100
 1002084:	003fee06 	br	1002040 <___vfprintf_internal_r+0xd78>
 1002088:	07004074 	movhi	fp,257
 100208c:	e709f084 	addi	fp,fp,10178
 1002090:	9425883a 	add	r18,r18,r16
 1002094:	8c400044 	addi	r17,r17,1
 1002098:	008001c4 	movi	r2,7
 100209c:	9f000015 	stw	fp,0(r19)
 10020a0:	9c000115 	stw	r16,4(r19)
 10020a4:	dc800e15 	stw	r18,56(sp)
 10020a8:	dc400d15 	stw	r17,52(sp)
 10020ac:	147e720e 	bge	r2,r17,1001a78 <___vfprintf_internal_r+0x7b0>
 10020b0:	d9014f17 	ldw	r4,1340(sp)
 10020b4:	b00b883a 	mov	r5,r22
 10020b8:	d9800c04 	addi	r6,sp,48
 10020bc:	10012700 	call	1001270 <__sprint_r>
 10020c0:	103e391e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 10020c4:	dc800e17 	ldw	r18,56(sp)
 10020c8:	dc400d17 	ldw	r17,52(sp)
 10020cc:	dcc01904 	addi	r19,sp,100
 10020d0:	003e6a06 	br	1001a7c <___vfprintf_internal_r+0x7b4>
 10020d4:	d9014f17 	ldw	r4,1340(sp)
 10020d8:	b00b883a 	mov	r5,r22
 10020dc:	d9800c04 	addi	r6,sp,48
 10020e0:	d9c15115 	stw	r7,1348(sp)
 10020e4:	10012700 	call	1001270 <__sprint_r>
 10020e8:	d9c15117 	ldw	r7,1348(sp)
 10020ec:	103e2e1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 10020f0:	dc800e17 	ldw	r18,56(sp)
 10020f4:	dc400d17 	ldw	r17,52(sp)
 10020f8:	dd401904 	addi	r21,sp,100
 10020fc:	003dba06 	br	10017e8 <___vfprintf_internal_r+0x520>
 1002100:	d9014f17 	ldw	r4,1340(sp)
 1002104:	b00b883a 	mov	r5,r22
 1002108:	d9800c04 	addi	r6,sp,48
 100210c:	10012700 	call	1001270 <__sprint_r>
 1002110:	103e251e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002114:	dc800e17 	ldw	r18,56(sp)
 1002118:	dc400d17 	ldw	r17,52(sp)
 100211c:	dcc01904 	addi	r19,sp,100
 1002120:	003e4206 	br	1001a2c <___vfprintf_internal_r+0x764>
 1002124:	d9014f17 	ldw	r4,1340(sp)
 1002128:	b00b883a 	mov	r5,r22
 100212c:	d9800c04 	addi	r6,sp,48
 1002130:	10012700 	call	1001270 <__sprint_r>
 1002134:	103e1c1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002138:	dc800e17 	ldw	r18,56(sp)
 100213c:	dc400d17 	ldw	r17,52(sp)
 1002140:	d8c01904 	addi	r3,sp,100
 1002144:	003e2e06 	br	1001a00 <___vfprintf_internal_r+0x738>
 1002148:	d9414c17 	ldw	r5,1328(sp)
 100214c:	2880004c 	andi	r2,r5,1
 1002150:	1005003a 	cmpeq	r2,r2,zero
 1002154:	103dda1e 	bne	r2,zero,10018c0 <___vfprintf_internal_r+0x5f8>
 1002158:	003e9f06 	br	1001bd8 <___vfprintf_internal_r+0x910>
 100215c:	d8c14117 	ldw	r3,1284(sp)
 1002160:	9125883a 	add	r18,r18,r4
 1002164:	8c400044 	addi	r17,r17,1
 1002168:	008001c4 	movi	r2,7
 100216c:	a8c00015 	stw	r3,0(r21)
 1002170:	a9000115 	stw	r4,4(r21)
 1002174:	dc800e15 	stw	r18,56(sp)
 1002178:	dc400d15 	stw	r17,52(sp)
 100217c:	14426c16 	blt	r2,r17,1002b30 <___vfprintf_internal_r+0x1868>
 1002180:	a8c00204 	addi	r3,r21,8
 1002184:	d9414917 	ldw	r5,1316(sp)
 1002188:	00800044 	movi	r2,1
 100218c:	94800044 	addi	r18,r18,1
 1002190:	8c400044 	addi	r17,r17,1
 1002194:	18800115 	stw	r2,4(r3)
 1002198:	008001c4 	movi	r2,7
 100219c:	19400015 	stw	r5,0(r3)
 10021a0:	dc800e15 	stw	r18,56(sp)
 10021a4:	dc400d15 	stw	r17,52(sp)
 10021a8:	2021883a 	mov	r16,r4
 10021ac:	14425616 	blt	r2,r17,1002b08 <___vfprintf_internal_r+0x1840>
 10021b0:	19400204 	addi	r5,r3,8
 10021b4:	d9814717 	ldw	r6,1308(sp)
 10021b8:	8c400044 	addi	r17,r17,1
 10021bc:	dc400d15 	stw	r17,52(sp)
 10021c0:	3107c83a 	sub	r3,r6,r4
 10021c4:	d9014117 	ldw	r4,1284(sp)
 10021c8:	90e5883a 	add	r18,r18,r3
 10021cc:	28c00115 	stw	r3,4(r5)
 10021d0:	8105883a 	add	r2,r16,r4
 10021d4:	28800015 	stw	r2,0(r5)
 10021d8:	008001c4 	movi	r2,7
 10021dc:	dc800e15 	stw	r18,56(sp)
 10021e0:	147f1d16 	blt	r2,r17,1001e58 <___vfprintf_internal_r+0xb90>
 10021e4:	28c00204 	addi	r3,r5,8
 10021e8:	003db506 	br	10018c0 <___vfprintf_internal_r+0x5f8>
 10021ec:	3c000017 	ldw	r16,0(r7)
 10021f0:	3c400117 	ldw	r17,4(r7)
 10021f4:	39800204 	addi	r6,r7,8
 10021f8:	01000044 	movi	r4,1
 10021fc:	d9814015 	stw	r6,1280(sp)
 1002200:	d8000405 	stb	zero,16(sp)
 1002204:	003ebe06 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1002208:	3c000017 	ldw	r16,0(r7)
 100220c:	3c400117 	ldw	r17,4(r7)
 1002210:	38800204 	addi	r2,r7,8
 1002214:	d8814015 	stw	r2,1280(sp)
 1002218:	003eb706 	br	1001cf8 <___vfprintf_internal_r+0xa30>
 100221c:	3c000017 	ldw	r16,0(r7)
 1002220:	3c400117 	ldw	r17,4(r7)
 1002224:	39000204 	addi	r4,r7,8
 1002228:	d9014015 	stw	r4,1280(sp)
 100222c:	0009883a 	mov	r4,zero
 1002230:	d8000405 	stb	zero,16(sp)
 1002234:	003eb206 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1002238:	38c00017 	ldw	r3,0(r7)
 100223c:	39c00104 	addi	r7,r7,4
 1002240:	d8c14a15 	stw	r3,1320(sp)
 1002244:	1800d70e 	bge	r3,zero,10025a4 <___vfprintf_internal_r+0x12dc>
 1002248:	00c7c83a 	sub	r3,zero,r3
 100224c:	d8c14a15 	stw	r3,1320(sp)
 1002250:	d9014c17 	ldw	r4,1328(sp)
 1002254:	b8c00007 	ldb	r3,0(r23)
 1002258:	21000114 	ori	r4,r4,4
 100225c:	d9014c15 	stw	r4,1328(sp)
 1002260:	003c9806 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1002264:	d9814c17 	ldw	r6,1328(sp)
 1002268:	3080080c 	andi	r2,r6,32
 100226c:	1001f626 	beq	r2,zero,1002a48 <___vfprintf_internal_r+0x1780>
 1002270:	d9014b17 	ldw	r4,1324(sp)
 1002274:	38800017 	ldw	r2,0(r7)
 1002278:	39c00104 	addi	r7,r7,4
 100227c:	d9c14015 	stw	r7,1280(sp)
 1002280:	2007d7fa 	srai	r3,r4,31
 1002284:	d9c14017 	ldw	r7,1280(sp)
 1002288:	11000015 	stw	r4,0(r2)
 100228c:	10c00115 	stw	r3,4(r2)
 1002290:	003c6906 	br	1001438 <___vfprintf_internal_r+0x170>
 1002294:	b8c00007 	ldb	r3,0(r23)
 1002298:	00801b04 	movi	r2,108
 100229c:	18825526 	beq	r3,r2,1002bf4 <___vfprintf_internal_r+0x192c>
 10022a0:	d9414c17 	ldw	r5,1328(sp)
 10022a4:	29400414 	ori	r5,r5,16
 10022a8:	d9414c15 	stw	r5,1328(sp)
 10022ac:	003c8506 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 10022b0:	d9814c17 	ldw	r6,1328(sp)
 10022b4:	b8c00007 	ldb	r3,0(r23)
 10022b8:	31800814 	ori	r6,r6,32
 10022bc:	d9814c15 	stw	r6,1328(sp)
 10022c0:	003c8006 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 10022c4:	d8814c17 	ldw	r2,1328(sp)
 10022c8:	3c000017 	ldw	r16,0(r7)
 10022cc:	00c01e04 	movi	r3,120
 10022d0:	10800094 	ori	r2,r2,2
 10022d4:	d8814c15 	stw	r2,1328(sp)
 10022d8:	39c00104 	addi	r7,r7,4
 10022dc:	01404074 	movhi	r5,257
 10022e0:	2949d904 	addi	r5,r5,10084
 10022e4:	00800c04 	movi	r2,48
 10022e8:	0023883a 	mov	r17,zero
 10022ec:	01000084 	movi	r4,2
 10022f0:	d9c14015 	stw	r7,1280(sp)
 10022f4:	d8c14d15 	stw	r3,1332(sp)
 10022f8:	d9414415 	stw	r5,1296(sp)
 10022fc:	d8800445 	stb	r2,17(sp)
 1002300:	d8c00485 	stb	r3,18(sp)
 1002304:	d8000405 	stb	zero,16(sp)
 1002308:	003e7d06 	br	1001d00 <___vfprintf_internal_r+0xa38>
 100230c:	d8814c17 	ldw	r2,1328(sp)
 1002310:	b8c00007 	ldb	r3,0(r23)
 1002314:	10801014 	ori	r2,r2,64
 1002318:	d8814c15 	stw	r2,1328(sp)
 100231c:	003c6906 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1002320:	d9414c17 	ldw	r5,1328(sp)
 1002324:	2880020c 	andi	r2,r5,8
 1002328:	1001e526 	beq	r2,zero,1002ac0 <___vfprintf_internal_r+0x17f8>
 100232c:	39800017 	ldw	r6,0(r7)
 1002330:	38800204 	addi	r2,r7,8
 1002334:	d8814015 	stw	r2,1280(sp)
 1002338:	d9814215 	stw	r6,1288(sp)
 100233c:	39c00117 	ldw	r7,4(r7)
 1002340:	d9c14315 	stw	r7,1292(sp)
 1002344:	d9014217 	ldw	r4,1288(sp)
 1002348:	d9414317 	ldw	r5,1292(sp)
 100234c:	1007d780 	call	1007d78 <__isinfd>
 1002350:	10021d26 	beq	r2,zero,1002bc8 <___vfprintf_internal_r+0x1900>
 1002354:	d9014217 	ldw	r4,1288(sp)
 1002358:	d9414317 	ldw	r5,1292(sp)
 100235c:	000d883a 	mov	r6,zero
 1002360:	000f883a 	mov	r7,zero
 1002364:	1009f140 	call	1009f14 <__ltdf2>
 1002368:	1002d016 	blt	r2,zero,1002eac <___vfprintf_internal_r+0x1be4>
 100236c:	d9414d17 	ldw	r5,1332(sp)
 1002370:	008011c4 	movi	r2,71
 1002374:	11421016 	blt	r2,r5,1002bb8 <___vfprintf_internal_r+0x18f0>
 1002378:	01804074 	movhi	r6,257
 100237c:	3189de04 	addi	r6,r6,10104
 1002380:	d9814115 	stw	r6,1284(sp)
 1002384:	d9014c17 	ldw	r4,1328(sp)
 1002388:	00c000c4 	movi	r3,3
 100238c:	00bfdfc4 	movi	r2,-129
 1002390:	2088703a 	and	r4,r4,r2
 1002394:	180f883a 	mov	r7,r3
 1002398:	d8c14515 	stw	r3,1300(sp)
 100239c:	d9014c15 	stw	r4,1328(sp)
 10023a0:	d8014615 	stw	zero,1304(sp)
 10023a4:	003e6a06 	br	1001d50 <___vfprintf_internal_r+0xa88>
 10023a8:	38800017 	ldw	r2,0(r7)
 10023ac:	00c00044 	movi	r3,1
 10023b0:	39c00104 	addi	r7,r7,4
 10023b4:	d9c14015 	stw	r7,1280(sp)
 10023b8:	d9000f04 	addi	r4,sp,60
 10023bc:	180f883a 	mov	r7,r3
 10023c0:	d8c14515 	stw	r3,1300(sp)
 10023c4:	d9014115 	stw	r4,1284(sp)
 10023c8:	d8800f05 	stb	r2,60(sp)
 10023cc:	d8000405 	stb	zero,16(sp)
 10023d0:	003cac06 	br	1001684 <___vfprintf_internal_r+0x3bc>
 10023d4:	01404074 	movhi	r5,257
 10023d8:	2949e404 	addi	r5,r5,10128
 10023dc:	d9414415 	stw	r5,1296(sp)
 10023e0:	d9814c17 	ldw	r6,1328(sp)
 10023e4:	3080080c 	andi	r2,r6,32
 10023e8:	1000ff26 	beq	r2,zero,10027e8 <___vfprintf_internal_r+0x1520>
 10023ec:	3c000017 	ldw	r16,0(r7)
 10023f0:	3c400117 	ldw	r17,4(r7)
 10023f4:	38800204 	addi	r2,r7,8
 10023f8:	d8814015 	stw	r2,1280(sp)
 10023fc:	d9414c17 	ldw	r5,1328(sp)
 1002400:	2880004c 	andi	r2,r5,1
 1002404:	1005003a 	cmpeq	r2,r2,zero
 1002408:	1000b91e 	bne	r2,zero,10026f0 <___vfprintf_internal_r+0x1428>
 100240c:	8444b03a 	or	r2,r16,r17
 1002410:	1000b726 	beq	r2,zero,10026f0 <___vfprintf_internal_r+0x1428>
 1002414:	d9814d17 	ldw	r6,1332(sp)
 1002418:	29400094 	ori	r5,r5,2
 100241c:	00800c04 	movi	r2,48
 1002420:	01000084 	movi	r4,2
 1002424:	d9414c15 	stw	r5,1328(sp)
 1002428:	d8800445 	stb	r2,17(sp)
 100242c:	d9800485 	stb	r6,18(sp)
 1002430:	d8000405 	stb	zero,16(sp)
 1002434:	003e3206 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1002438:	01804074 	movhi	r6,257
 100243c:	3189d904 	addi	r6,r6,10084
 1002440:	d9814415 	stw	r6,1296(sp)
 1002444:	003fe606 	br	10023e0 <___vfprintf_internal_r+0x1118>
 1002448:	00800ac4 	movi	r2,43
 100244c:	d8800405 	stb	r2,16(sp)
 1002450:	b8c00007 	ldb	r3,0(r23)
 1002454:	003c1b06 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1002458:	d8814c17 	ldw	r2,1328(sp)
 100245c:	b8c00007 	ldb	r3,0(r23)
 1002460:	10800054 	ori	r2,r2,1
 1002464:	d8814c15 	stw	r2,1328(sp)
 1002468:	003c1606 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 100246c:	d8800407 	ldb	r2,16(sp)
 1002470:	10004c1e 	bne	r2,zero,10025a4 <___vfprintf_internal_r+0x12dc>
 1002474:	00800804 	movi	r2,32
 1002478:	d8800405 	stb	r2,16(sp)
 100247c:	b8c00007 	ldb	r3,0(r23)
 1002480:	003c1006 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1002484:	d9814c17 	ldw	r6,1328(sp)
 1002488:	b8c00007 	ldb	r3,0(r23)
 100248c:	31800214 	ori	r6,r6,8
 1002490:	d9814c15 	stw	r6,1328(sp)
 1002494:	003c0b06 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1002498:	0009883a 	mov	r4,zero
 100249c:	04000244 	movi	r16,9
 10024a0:	01400284 	movi	r5,10
 10024a4:	d9c15115 	stw	r7,1348(sp)
 10024a8:	1000adc0 	call	1000adc <__mulsi3>
 10024ac:	b9000007 	ldb	r4,0(r23)
 10024b0:	d8c14d17 	ldw	r3,1332(sp)
 10024b4:	bdc00044 	addi	r23,r23,1
 10024b8:	d9014d15 	stw	r4,1332(sp)
 10024bc:	d9414d17 	ldw	r5,1332(sp)
 10024c0:	1885883a 	add	r2,r3,r2
 10024c4:	113ff404 	addi	r4,r2,-48
 10024c8:	28bff404 	addi	r2,r5,-48
 10024cc:	d9c15117 	ldw	r7,1348(sp)
 10024d0:	80bff32e 	bgeu	r16,r2,10024a0 <___vfprintf_internal_r+0x11d8>
 10024d4:	d9014a15 	stw	r4,1320(sp)
 10024d8:	003bfc06 	br	10014cc <___vfprintf_internal_r+0x204>
 10024dc:	d8814c17 	ldw	r2,1328(sp)
 10024e0:	b8c00007 	ldb	r3,0(r23)
 10024e4:	10802014 	ori	r2,r2,128
 10024e8:	d8814c15 	stw	r2,1328(sp)
 10024ec:	003bf506 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 10024f0:	b8c00007 	ldb	r3,0(r23)
 10024f4:	00800a84 	movi	r2,42
 10024f8:	bdc00044 	addi	r23,r23,1
 10024fc:	18831826 	beq	r3,r2,1003160 <___vfprintf_internal_r+0x1e98>
 1002500:	d8c14d15 	stw	r3,1332(sp)
 1002504:	18bff404 	addi	r2,r3,-48
 1002508:	00c00244 	movi	r3,9
 100250c:	18827b36 	bltu	r3,r2,1002efc <___vfprintf_internal_r+0x1c34>
 1002510:	1821883a 	mov	r16,r3
 1002514:	0009883a 	mov	r4,zero
 1002518:	01400284 	movi	r5,10
 100251c:	d9c15115 	stw	r7,1348(sp)
 1002520:	1000adc0 	call	1000adc <__mulsi3>
 1002524:	d9414d17 	ldw	r5,1332(sp)
 1002528:	b9800007 	ldb	r6,0(r23)
 100252c:	d9c15117 	ldw	r7,1348(sp)
 1002530:	1145883a 	add	r2,r2,r5
 1002534:	113ff404 	addi	r4,r2,-48
 1002538:	30bff404 	addi	r2,r6,-48
 100253c:	d9814d15 	stw	r6,1332(sp)
 1002540:	bdc00044 	addi	r23,r23,1
 1002544:	80bff42e 	bgeu	r16,r2,1002518 <___vfprintf_internal_r+0x1250>
 1002548:	2027883a 	mov	r19,r4
 100254c:	203bdf0e 	bge	r4,zero,10014cc <___vfprintf_internal_r+0x204>
 1002550:	04ffffc4 	movi	r19,-1
 1002554:	003bdd06 	br	10014cc <___vfprintf_internal_r+0x204>
 1002558:	d8000405 	stb	zero,16(sp)
 100255c:	39800017 	ldw	r6,0(r7)
 1002560:	39c00104 	addi	r7,r7,4
 1002564:	d9c14015 	stw	r7,1280(sp)
 1002568:	d9814115 	stw	r6,1284(sp)
 100256c:	3001c926 	beq	r6,zero,1002c94 <___vfprintf_internal_r+0x19cc>
 1002570:	98000e16 	blt	r19,zero,10025ac <___vfprintf_internal_r+0x12e4>
 1002574:	d9014117 	ldw	r4,1284(sp)
 1002578:	000b883a 	mov	r5,zero
 100257c:	980d883a 	mov	r6,r19
 1002580:	10063fc0 	call	10063fc <memchr>
 1002584:	10025926 	beq	r2,zero,1002eec <___vfprintf_internal_r+0x1c24>
 1002588:	d8c14117 	ldw	r3,1284(sp)
 100258c:	10cfc83a 	sub	r7,r2,r3
 1002590:	99c19e16 	blt	r19,r7,1002c0c <___vfprintf_internal_r+0x1944>
 1002594:	d9c14515 	stw	r7,1300(sp)
 1002598:	38000916 	blt	r7,zero,10025c0 <___vfprintf_internal_r+0x12f8>
 100259c:	d8014615 	stw	zero,1304(sp)
 10025a0:	003deb06 	br	1001d50 <___vfprintf_internal_r+0xa88>
 10025a4:	b8c00007 	ldb	r3,0(r23)
 10025a8:	003bc606 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 10025ac:	d9014117 	ldw	r4,1284(sp)
 10025b0:	10011fc0 	call	10011fc <strlen>
 10025b4:	d8814515 	stw	r2,1300(sp)
 10025b8:	100f883a 	mov	r7,r2
 10025bc:	103ff70e 	bge	r2,zero,100259c <___vfprintf_internal_r+0x12d4>
 10025c0:	d8014515 	stw	zero,1300(sp)
 10025c4:	d8014615 	stw	zero,1304(sp)
 10025c8:	003de106 	br	1001d50 <___vfprintf_internal_r+0xa88>
 10025cc:	20c03fcc 	andi	r3,r4,255
 10025d0:	00800044 	movi	r2,1
 10025d4:	18802d26 	beq	r3,r2,100268c <___vfprintf_internal_r+0x13c4>
 10025d8:	18800e36 	bltu	r3,r2,1002614 <___vfprintf_internal_r+0x134c>
 10025dc:	00800084 	movi	r2,2
 10025e0:	1880fa26 	beq	r3,r2,10029cc <___vfprintf_internal_r+0x1704>
 10025e4:	01004074 	movhi	r4,257
 10025e8:	2109e904 	addi	r4,r4,10148
 10025ec:	10011fc0 	call	10011fc <strlen>
 10025f0:	100f883a 	mov	r7,r2
 10025f4:	dcc14515 	stw	r19,1300(sp)
 10025f8:	9880010e 	bge	r19,r2,1002600 <___vfprintf_internal_r+0x1338>
 10025fc:	d8814515 	stw	r2,1300(sp)
 1002600:	00804074 	movhi	r2,257
 1002604:	1089e904 	addi	r2,r2,10148
 1002608:	dcc14615 	stw	r19,1304(sp)
 100260c:	d8814115 	stw	r2,1284(sp)
 1002610:	003dcf06 	br	1001d50 <___vfprintf_internal_r+0xa88>
 1002614:	d9401904 	addi	r5,sp,100
 1002618:	dd000f04 	addi	r20,sp,60
 100261c:	d9414115 	stw	r5,1284(sp)
 1002620:	880a977a 	slli	r5,r17,29
 1002624:	d9814117 	ldw	r6,1284(sp)
 1002628:	8004d0fa 	srli	r2,r16,3
 100262c:	8806d0fa 	srli	r3,r17,3
 1002630:	810001cc 	andi	r4,r16,7
 1002634:	2884b03a 	or	r2,r5,r2
 1002638:	31bfffc4 	addi	r6,r6,-1
 100263c:	21000c04 	addi	r4,r4,48
 1002640:	d9814115 	stw	r6,1284(sp)
 1002644:	10cab03a 	or	r5,r2,r3
 1002648:	31000005 	stb	r4,0(r6)
 100264c:	1021883a 	mov	r16,r2
 1002650:	1823883a 	mov	r17,r3
 1002654:	283ff21e 	bne	r5,zero,1002620 <___vfprintf_internal_r+0x1358>
 1002658:	d8c14c17 	ldw	r3,1328(sp)
 100265c:	1880004c 	andi	r2,r3,1
 1002660:	1005003a 	cmpeq	r2,r2,zero
 1002664:	103db31e 	bne	r2,zero,1001d34 <___vfprintf_internal_r+0xa6c>
 1002668:	20803fcc 	andi	r2,r4,255
 100266c:	1080201c 	xori	r2,r2,128
 1002670:	10bfe004 	addi	r2,r2,-128
 1002674:	00c00c04 	movi	r3,48
 1002678:	10fdae26 	beq	r2,r3,1001d34 <___vfprintf_internal_r+0xa6c>
 100267c:	31bfffc4 	addi	r6,r6,-1
 1002680:	d9814115 	stw	r6,1284(sp)
 1002684:	30c00005 	stb	r3,0(r6)
 1002688:	003daa06 	br	1001d34 <___vfprintf_internal_r+0xa6c>
 100268c:	88800068 	cmpgeui	r2,r17,1
 1002690:	10002c1e 	bne	r2,zero,1002744 <___vfprintf_internal_r+0x147c>
 1002694:	8800021e 	bne	r17,zero,10026a0 <___vfprintf_internal_r+0x13d8>
 1002698:	00800244 	movi	r2,9
 100269c:	14002936 	bltu	r2,r16,1002744 <___vfprintf_internal_r+0x147c>
 10026a0:	d90018c4 	addi	r4,sp,99
 10026a4:	dd000f04 	addi	r20,sp,60
 10026a8:	d9014115 	stw	r4,1284(sp)
 10026ac:	d9014117 	ldw	r4,1284(sp)
 10026b0:	80800c04 	addi	r2,r16,48
 10026b4:	20800005 	stb	r2,0(r4)
 10026b8:	003d9e06 	br	1001d34 <___vfprintf_internal_r+0xa6c>
 10026bc:	dc400d17 	ldw	r17,52(sp)
 10026c0:	07004074 	movhi	fp,257
 10026c4:	e709f084 	addi	fp,fp,10178
 10026c8:	9425883a 	add	r18,r18,r16
 10026cc:	8c400044 	addi	r17,r17,1
 10026d0:	008001c4 	movi	r2,7
 10026d4:	1f000015 	stw	fp,0(r3)
 10026d8:	1c000115 	stw	r16,4(r3)
 10026dc:	dc800e15 	stw	r18,56(sp)
 10026e0:	dc400d15 	stw	r17,52(sp)
 10026e4:	147ddc16 	blt	r2,r17,1001e58 <___vfprintf_internal_r+0xb90>
 10026e8:	18c00204 	addi	r3,r3,8
 10026ec:	003c7406 	br	10018c0 <___vfprintf_internal_r+0x5f8>
 10026f0:	01000084 	movi	r4,2
 10026f4:	d8000405 	stb	zero,16(sp)
 10026f8:	003d8106 	br	1001d00 <___vfprintf_internal_r+0xa38>
 10026fc:	d9814c17 	ldw	r6,1328(sp)
 1002700:	30c4703a 	and	r2,r6,r3
 1002704:	1005003a 	cmpeq	r2,r2,zero
 1002708:	103cb326 	beq	r2,zero,10019d8 <___vfprintf_internal_r+0x710>
 100270c:	d9014117 	ldw	r4,1284(sp)
 1002710:	94800044 	addi	r18,r18,1
 1002714:	8c400044 	addi	r17,r17,1
 1002718:	008001c4 	movi	r2,7
 100271c:	a9000015 	stw	r4,0(r21)
 1002720:	a8c00115 	stw	r3,4(r21)
 1002724:	dc800e15 	stw	r18,56(sp)
 1002728:	dc400d15 	stw	r17,52(sp)
 100272c:	147e6016 	blt	r2,r17,10020b0 <___vfprintf_internal_r+0xde8>
 1002730:	acc00204 	addi	r19,r21,8
 1002734:	003cd106 	br	1001a7c <___vfprintf_internal_r+0x7b4>
 1002738:	07004074 	movhi	fp,257
 100273c:	e709f084 	addi	fp,fp,10178
 1002740:	003c4906 	br	1001868 <___vfprintf_internal_r+0x5a0>
 1002744:	dd000f04 	addi	r20,sp,60
 1002748:	dc801904 	addi	r18,sp,100
 100274c:	8009883a 	mov	r4,r16
 1002750:	880b883a 	mov	r5,r17
 1002754:	01800284 	movi	r6,10
 1002758:	000f883a 	mov	r7,zero
 100275c:	1008b740 	call	1008b74 <__umoddi3>
 1002760:	12000c04 	addi	r8,r2,48
 1002764:	94bfffc4 	addi	r18,r18,-1
 1002768:	8009883a 	mov	r4,r16
 100276c:	880b883a 	mov	r5,r17
 1002770:	01800284 	movi	r6,10
 1002774:	000f883a 	mov	r7,zero
 1002778:	92000005 	stb	r8,0(r18)
 100277c:	10085080 	call	1008508 <__udivdi3>
 1002780:	1009883a 	mov	r4,r2
 1002784:	1021883a 	mov	r16,r2
 1002788:	18800068 	cmpgeui	r2,r3,1
 100278c:	1823883a 	mov	r17,r3
 1002790:	103fee1e 	bne	r2,zero,100274c <___vfprintf_internal_r+0x1484>
 1002794:	1800021e 	bne	r3,zero,10027a0 <___vfprintf_internal_r+0x14d8>
 1002798:	00800244 	movi	r2,9
 100279c:	113feb36 	bltu	r2,r4,100274c <___vfprintf_internal_r+0x1484>
 10027a0:	94bfffc4 	addi	r18,r18,-1
 10027a4:	dc814115 	stw	r18,1284(sp)
 10027a8:	003fc006 	br	10026ac <___vfprintf_internal_r+0x13e4>
 10027ac:	d9014c17 	ldw	r4,1328(sp)
 10027b0:	2080004c 	andi	r2,r4,1
 10027b4:	10009a1e 	bne	r2,zero,1002a20 <___vfprintf_internal_r+0x1758>
 10027b8:	d9401904 	addi	r5,sp,100
 10027bc:	dd000f04 	addi	r20,sp,60
 10027c0:	d9414115 	stw	r5,1284(sp)
 10027c4:	003d5b06 	br	1001d34 <___vfprintf_internal_r+0xa6c>
 10027c8:	d9014f17 	ldw	r4,1340(sp)
 10027cc:	b00b883a 	mov	r5,r22
 10027d0:	d9800c04 	addi	r6,sp,48
 10027d4:	10012700 	call	1001270 <__sprint_r>
 10027d8:	103c731e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 10027dc:	dc800e17 	ldw	r18,56(sp)
 10027e0:	d8c01904 	addi	r3,sp,100
 10027e4:	003cf906 	br	1001bcc <___vfprintf_internal_r+0x904>
 10027e8:	d8c14c17 	ldw	r3,1328(sp)
 10027ec:	1880040c 	andi	r2,r3,16
 10027f0:	1000711e 	bne	r2,zero,10029b8 <___vfprintf_internal_r+0x16f0>
 10027f4:	d9014c17 	ldw	r4,1328(sp)
 10027f8:	2080100c 	andi	r2,r4,64
 10027fc:	10006e26 	beq	r2,zero,10029b8 <___vfprintf_internal_r+0x16f0>
 1002800:	3c00000b 	ldhu	r16,0(r7)
 1002804:	0023883a 	mov	r17,zero
 1002808:	39c00104 	addi	r7,r7,4
 100280c:	d9c14015 	stw	r7,1280(sp)
 1002810:	003efa06 	br	10023fc <___vfprintf_internal_r+0x1134>
 1002814:	dc400d17 	ldw	r17,52(sp)
 1002818:	07004074 	movhi	fp,257
 100281c:	e709f084 	addi	fp,fp,10178
 1002820:	9425883a 	add	r18,r18,r16
 1002824:	8c400044 	addi	r17,r17,1
 1002828:	008001c4 	movi	r2,7
 100282c:	1f000015 	stw	fp,0(r3)
 1002830:	1c000115 	stw	r16,4(r3)
 1002834:	dc800e15 	stw	r18,56(sp)
 1002838:	dc400d15 	stw	r17,52(sp)
 100283c:	147d7016 	blt	r2,r17,1001e00 <___vfprintf_internal_r+0xb38>
 1002840:	18c00204 	addi	r3,r3,8
 1002844:	003d7506 	br	1001e1c <___vfprintf_internal_r+0xb54>
 1002848:	dc800e17 	ldw	r18,56(sp)
 100284c:	dc400d17 	ldw	r17,52(sp)
 1002850:	07004074 	movhi	fp,257
 1002854:	e709f484 	addi	fp,fp,10194
 1002858:	003bba06 	br	1001744 <___vfprintf_internal_r+0x47c>
 100285c:	d9014f17 	ldw	r4,1340(sp)
 1002860:	b00b883a 	mov	r5,r22
 1002864:	d9800c04 	addi	r6,sp,48
 1002868:	10012700 	call	1001270 <__sprint_r>
 100286c:	103c4e1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002870:	dc800e17 	ldw	r18,56(sp)
 1002874:	d8c01904 	addi	r3,sp,100
 1002878:	003ce306 	br	1001c08 <___vfprintf_internal_r+0x940>
 100287c:	3c000017 	ldw	r16,0(r7)
 1002880:	0009883a 	mov	r4,zero
 1002884:	39c00104 	addi	r7,r7,4
 1002888:	0023883a 	mov	r17,zero
 100288c:	d9c14015 	stw	r7,1280(sp)
 1002890:	d8000405 	stb	zero,16(sp)
 1002894:	003d1a06 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1002898:	38800017 	ldw	r2,0(r7)
 100289c:	39c00104 	addi	r7,r7,4
 10028a0:	d9c14015 	stw	r7,1280(sp)
 10028a4:	1023d7fa 	srai	r17,r2,31
 10028a8:	1021883a 	mov	r16,r2
 10028ac:	003d1206 	br	1001cf8 <___vfprintf_internal_r+0xa30>
 10028b0:	3c000017 	ldw	r16,0(r7)
 10028b4:	01000044 	movi	r4,1
 10028b8:	39c00104 	addi	r7,r7,4
 10028bc:	0023883a 	mov	r17,zero
 10028c0:	d9c14015 	stw	r7,1280(sp)
 10028c4:	d8000405 	stb	zero,16(sp)
 10028c8:	003d0d06 	br	1001d00 <___vfprintf_internal_r+0xa38>
 10028cc:	00804074 	movhi	r2,257
 10028d0:	1089f004 	addi	r2,r2,10176
 10028d4:	94800044 	addi	r18,r18,1
 10028d8:	8c400044 	addi	r17,r17,1
 10028dc:	a8800015 	stw	r2,0(r21)
 10028e0:	00c00044 	movi	r3,1
 10028e4:	008001c4 	movi	r2,7
 10028e8:	a8c00115 	stw	r3,4(r21)
 10028ec:	dc800e15 	stw	r18,56(sp)
 10028f0:	dc400d15 	stw	r17,52(sp)
 10028f4:	1440ca16 	blt	r2,r17,1002c20 <___vfprintf_internal_r+0x1958>
 10028f8:	a8c00204 	addi	r3,r21,8
 10028fc:	2000061e 	bne	r4,zero,1002918 <___vfprintf_internal_r+0x1650>
 1002900:	d9414717 	ldw	r5,1308(sp)
 1002904:	2800041e 	bne	r5,zero,1002918 <___vfprintf_internal_r+0x1650>
 1002908:	d9814c17 	ldw	r6,1328(sp)
 100290c:	3080004c 	andi	r2,r6,1
 1002910:	1005003a 	cmpeq	r2,r2,zero
 1002914:	103bea1e 	bne	r2,zero,10018c0 <___vfprintf_internal_r+0x5f8>
 1002918:	00800044 	movi	r2,1
 100291c:	dc400d17 	ldw	r17,52(sp)
 1002920:	18800115 	stw	r2,4(r3)
 1002924:	d8814917 	ldw	r2,1316(sp)
 1002928:	94800044 	addi	r18,r18,1
 100292c:	8c400044 	addi	r17,r17,1
 1002930:	18800015 	stw	r2,0(r3)
 1002934:	008001c4 	movi	r2,7
 1002938:	dc800e15 	stw	r18,56(sp)
 100293c:	dc400d15 	stw	r17,52(sp)
 1002940:	1440ca16 	blt	r2,r17,1002c6c <___vfprintf_internal_r+0x19a4>
 1002944:	18c00204 	addi	r3,r3,8
 1002948:	0121c83a 	sub	r16,zero,r4
 100294c:	0400500e 	bge	zero,r16,1002a90 <___vfprintf_internal_r+0x17c8>
 1002950:	00800404 	movi	r2,16
 1002954:	1400800e 	bge	r2,r16,1002b58 <___vfprintf_internal_r+0x1890>
 1002958:	1027883a 	mov	r19,r2
 100295c:	07004074 	movhi	fp,257
 1002960:	e709f084 	addi	fp,fp,10178
 1002964:	050001c4 	movi	r20,7
 1002968:	00000306 	br	1002978 <___vfprintf_internal_r+0x16b0>
 100296c:	18c00204 	addi	r3,r3,8
 1002970:	843ffc04 	addi	r16,r16,-16
 1002974:	9c007a0e 	bge	r19,r16,1002b60 <___vfprintf_internal_r+0x1898>
 1002978:	94800404 	addi	r18,r18,16
 100297c:	8c400044 	addi	r17,r17,1
 1002980:	1f000015 	stw	fp,0(r3)
 1002984:	1cc00115 	stw	r19,4(r3)
 1002988:	dc800e15 	stw	r18,56(sp)
 100298c:	dc400d15 	stw	r17,52(sp)
 1002990:	a47ff60e 	bge	r20,r17,100296c <___vfprintf_internal_r+0x16a4>
 1002994:	d9014f17 	ldw	r4,1340(sp)
 1002998:	b00b883a 	mov	r5,r22
 100299c:	d9800c04 	addi	r6,sp,48
 10029a0:	10012700 	call	1001270 <__sprint_r>
 10029a4:	103c001e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 10029a8:	dc800e17 	ldw	r18,56(sp)
 10029ac:	dc400d17 	ldw	r17,52(sp)
 10029b0:	d8c01904 	addi	r3,sp,100
 10029b4:	003fee06 	br	1002970 <___vfprintf_internal_r+0x16a8>
 10029b8:	3c000017 	ldw	r16,0(r7)
 10029bc:	0023883a 	mov	r17,zero
 10029c0:	39c00104 	addi	r7,r7,4
 10029c4:	d9c14015 	stw	r7,1280(sp)
 10029c8:	003e8c06 	br	10023fc <___vfprintf_internal_r+0x1134>
 10029cc:	d9401904 	addi	r5,sp,100
 10029d0:	dd000f04 	addi	r20,sp,60
 10029d4:	d9414115 	stw	r5,1284(sp)
 10029d8:	d9814417 	ldw	r6,1296(sp)
 10029dc:	880a973a 	slli	r5,r17,28
 10029e0:	8004d13a 	srli	r2,r16,4
 10029e4:	810003cc 	andi	r4,r16,15
 10029e8:	3109883a 	add	r4,r6,r4
 10029ec:	2884b03a 	or	r2,r5,r2
 10029f0:	21400003 	ldbu	r5,0(r4)
 10029f4:	d9014117 	ldw	r4,1284(sp)
 10029f8:	8806d13a 	srli	r3,r17,4
 10029fc:	1021883a 	mov	r16,r2
 1002a00:	213fffc4 	addi	r4,r4,-1
 1002a04:	d9014115 	stw	r4,1284(sp)
 1002a08:	d9814117 	ldw	r6,1284(sp)
 1002a0c:	10c8b03a 	or	r4,r2,r3
 1002a10:	1823883a 	mov	r17,r3
 1002a14:	31400005 	stb	r5,0(r6)
 1002a18:	203fef1e 	bne	r4,zero,10029d8 <___vfprintf_internal_r+0x1710>
 1002a1c:	003cc506 	br	1001d34 <___vfprintf_internal_r+0xa6c>
 1002a20:	00800c04 	movi	r2,48
 1002a24:	d98018c4 	addi	r6,sp,99
 1002a28:	dd000f04 	addi	r20,sp,60
 1002a2c:	d88018c5 	stb	r2,99(sp)
 1002a30:	d9814115 	stw	r6,1284(sp)
 1002a34:	003cbf06 	br	1001d34 <___vfprintf_internal_r+0xa6c>
 1002a38:	dc400d17 	ldw	r17,52(sp)
 1002a3c:	07004074 	movhi	fp,257
 1002a40:	e709f484 	addi	fp,fp,10194
 1002a44:	003bc106 	br	100194c <___vfprintf_internal_r+0x684>
 1002a48:	d9414c17 	ldw	r5,1328(sp)
 1002a4c:	2880040c 	andi	r2,r5,16
 1002a50:	10007c26 	beq	r2,zero,1002c44 <___vfprintf_internal_r+0x197c>
 1002a54:	38800017 	ldw	r2,0(r7)
 1002a58:	39c00104 	addi	r7,r7,4
 1002a5c:	d9c14015 	stw	r7,1280(sp)
 1002a60:	d9814b17 	ldw	r6,1324(sp)
 1002a64:	d9c14017 	ldw	r7,1280(sp)
 1002a68:	11800015 	stw	r6,0(r2)
 1002a6c:	003a7206 	br	1001438 <___vfprintf_internal_r+0x170>
 1002a70:	d9014f17 	ldw	r4,1340(sp)
 1002a74:	b00b883a 	mov	r5,r22
 1002a78:	d9800c04 	addi	r6,sp,48
 1002a7c:	10012700 	call	1001270 <__sprint_r>
 1002a80:	103bc91e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002a84:	dc800e17 	ldw	r18,56(sp)
 1002a88:	dc400d17 	ldw	r17,52(sp)
 1002a8c:	d8c01904 	addi	r3,sp,100
 1002a90:	d9014717 	ldw	r4,1308(sp)
 1002a94:	d9414117 	ldw	r5,1284(sp)
 1002a98:	8c400044 	addi	r17,r17,1
 1002a9c:	9125883a 	add	r18,r18,r4
 1002aa0:	008001c4 	movi	r2,7
 1002aa4:	19400015 	stw	r5,0(r3)
 1002aa8:	19000115 	stw	r4,4(r3)
 1002aac:	dc800e15 	stw	r18,56(sp)
 1002ab0:	dc400d15 	stw	r17,52(sp)
 1002ab4:	147ce816 	blt	r2,r17,1001e58 <___vfprintf_internal_r+0xb90>
 1002ab8:	18c00204 	addi	r3,r3,8
 1002abc:	003b8006 	br	10018c0 <___vfprintf_internal_r+0x5f8>
 1002ac0:	38c00017 	ldw	r3,0(r7)
 1002ac4:	39000204 	addi	r4,r7,8
 1002ac8:	d9014015 	stw	r4,1280(sp)
 1002acc:	d8c14215 	stw	r3,1288(sp)
 1002ad0:	39c00117 	ldw	r7,4(r7)
 1002ad4:	d9c14315 	stw	r7,1292(sp)
 1002ad8:	003e1a06 	br	1002344 <___vfprintf_internal_r+0x107c>
 1002adc:	0005883a 	mov	r2,zero
 1002ae0:	1409c83a 	sub	r4,r2,r16
 1002ae4:	1105803a 	cmpltu	r2,r2,r4
 1002ae8:	044bc83a 	sub	r5,zero,r17
 1002aec:	2885c83a 	sub	r2,r5,r2
 1002af0:	2021883a 	mov	r16,r4
 1002af4:	1023883a 	mov	r17,r2
 1002af8:	01000044 	movi	r4,1
 1002afc:	00800b44 	movi	r2,45
 1002b00:	d8800405 	stb	r2,16(sp)
 1002b04:	003c7e06 	br	1001d00 <___vfprintf_internal_r+0xa38>
 1002b08:	d9014f17 	ldw	r4,1340(sp)
 1002b0c:	b00b883a 	mov	r5,r22
 1002b10:	d9800c04 	addi	r6,sp,48
 1002b14:	10012700 	call	1001270 <__sprint_r>
 1002b18:	103ba31e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002b1c:	dc800e17 	ldw	r18,56(sp)
 1002b20:	dc400d17 	ldw	r17,52(sp)
 1002b24:	d9000517 	ldw	r4,20(sp)
 1002b28:	d9401904 	addi	r5,sp,100
 1002b2c:	003da106 	br	10021b4 <___vfprintf_internal_r+0xeec>
 1002b30:	d9014f17 	ldw	r4,1340(sp)
 1002b34:	b00b883a 	mov	r5,r22
 1002b38:	d9800c04 	addi	r6,sp,48
 1002b3c:	10012700 	call	1001270 <__sprint_r>
 1002b40:	103b991e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002b44:	dc800e17 	ldw	r18,56(sp)
 1002b48:	dc400d17 	ldw	r17,52(sp)
 1002b4c:	d9000517 	ldw	r4,20(sp)
 1002b50:	d8c01904 	addi	r3,sp,100
 1002b54:	003d8b06 	br	1002184 <___vfprintf_internal_r+0xebc>
 1002b58:	07004074 	movhi	fp,257
 1002b5c:	e709f084 	addi	fp,fp,10178
 1002b60:	9425883a 	add	r18,r18,r16
 1002b64:	8c400044 	addi	r17,r17,1
 1002b68:	008001c4 	movi	r2,7
 1002b6c:	1f000015 	stw	fp,0(r3)
 1002b70:	1c000115 	stw	r16,4(r3)
 1002b74:	dc800e15 	stw	r18,56(sp)
 1002b78:	dc400d15 	stw	r17,52(sp)
 1002b7c:	147fbc16 	blt	r2,r17,1002a70 <___vfprintf_internal_r+0x17a8>
 1002b80:	18c00204 	addi	r3,r3,8
 1002b84:	003fc206 	br	1002a90 <___vfprintf_internal_r+0x17c8>
 1002b88:	d9014f17 	ldw	r4,1340(sp)
 1002b8c:	b00b883a 	mov	r5,r22
 1002b90:	d9800c04 	addi	r6,sp,48
 1002b94:	10012700 	call	1001270 <__sprint_r>
 1002b98:	103b831e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002b9c:	dc800e17 	ldw	r18,56(sp)
 1002ba0:	d9000517 	ldw	r4,20(sp)
 1002ba4:	d8c01904 	addi	r3,sp,100
 1002ba8:	003cfc06 	br	1001f9c <___vfprintf_internal_r+0xcd4>
 1002bac:	07004074 	movhi	fp,257
 1002bb0:	e709f084 	addi	fp,fp,10178
 1002bb4:	003bde06 	br	1001b30 <___vfprintf_internal_r+0x868>
 1002bb8:	00804074 	movhi	r2,257
 1002bbc:	1089df04 	addi	r2,r2,10108
 1002bc0:	d8814115 	stw	r2,1284(sp)
 1002bc4:	003def06 	br	1002384 <___vfprintf_internal_r+0x10bc>
 1002bc8:	d9014217 	ldw	r4,1288(sp)
 1002bcc:	d9414317 	ldw	r5,1292(sp)
 1002bd0:	1007db80 	call	1007db8 <__isnand>
 1002bd4:	10003926 	beq	r2,zero,1002cbc <___vfprintf_internal_r+0x19f4>
 1002bd8:	d9414d17 	ldw	r5,1332(sp)
 1002bdc:	008011c4 	movi	r2,71
 1002be0:	1140ce16 	blt	r2,r5,1002f1c <___vfprintf_internal_r+0x1c54>
 1002be4:	01804074 	movhi	r6,257
 1002be8:	3189e004 	addi	r6,r6,10112
 1002bec:	d9814115 	stw	r6,1284(sp)
 1002bf0:	003de406 	br	1002384 <___vfprintf_internal_r+0x10bc>
 1002bf4:	d9014c17 	ldw	r4,1328(sp)
 1002bf8:	bdc00044 	addi	r23,r23,1
 1002bfc:	b8c00007 	ldb	r3,0(r23)
 1002c00:	21000814 	ori	r4,r4,32
 1002c04:	d9014c15 	stw	r4,1328(sp)
 1002c08:	003a2e06 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1002c0c:	dcc14515 	stw	r19,1300(sp)
 1002c10:	98011016 	blt	r19,zero,1003054 <___vfprintf_internal_r+0x1d8c>
 1002c14:	980f883a 	mov	r7,r19
 1002c18:	d8014615 	stw	zero,1304(sp)
 1002c1c:	003c4c06 	br	1001d50 <___vfprintf_internal_r+0xa88>
 1002c20:	d9014f17 	ldw	r4,1340(sp)
 1002c24:	b00b883a 	mov	r5,r22
 1002c28:	d9800c04 	addi	r6,sp,48
 1002c2c:	10012700 	call	1001270 <__sprint_r>
 1002c30:	103b5d1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002c34:	dc800e17 	ldw	r18,56(sp)
 1002c38:	d9000517 	ldw	r4,20(sp)
 1002c3c:	d8c01904 	addi	r3,sp,100
 1002c40:	003f2e06 	br	10028fc <___vfprintf_internal_r+0x1634>
 1002c44:	d8c14c17 	ldw	r3,1328(sp)
 1002c48:	1880100c 	andi	r2,r3,64
 1002c4c:	1000a026 	beq	r2,zero,1002ed0 <___vfprintf_internal_r+0x1c08>
 1002c50:	38800017 	ldw	r2,0(r7)
 1002c54:	39c00104 	addi	r7,r7,4
 1002c58:	d9c14015 	stw	r7,1280(sp)
 1002c5c:	d9014b17 	ldw	r4,1324(sp)
 1002c60:	d9c14017 	ldw	r7,1280(sp)
 1002c64:	1100000d 	sth	r4,0(r2)
 1002c68:	0039f306 	br	1001438 <___vfprintf_internal_r+0x170>
 1002c6c:	d9014f17 	ldw	r4,1340(sp)
 1002c70:	b00b883a 	mov	r5,r22
 1002c74:	d9800c04 	addi	r6,sp,48
 1002c78:	10012700 	call	1001270 <__sprint_r>
 1002c7c:	103b4a1e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002c80:	dc800e17 	ldw	r18,56(sp)
 1002c84:	dc400d17 	ldw	r17,52(sp)
 1002c88:	d9000517 	ldw	r4,20(sp)
 1002c8c:	d8c01904 	addi	r3,sp,100
 1002c90:	003f2d06 	br	1002948 <___vfprintf_internal_r+0x1680>
 1002c94:	00800184 	movi	r2,6
 1002c98:	14c09a36 	bltu	r2,r19,1002f04 <___vfprintf_internal_r+0x1c3c>
 1002c9c:	dcc14515 	stw	r19,1300(sp)
 1002ca0:	9800010e 	bge	r19,zero,1002ca8 <___vfprintf_internal_r+0x19e0>
 1002ca4:	d8014515 	stw	zero,1300(sp)
 1002ca8:	00804074 	movhi	r2,257
 1002cac:	1089e204 	addi	r2,r2,10120
 1002cb0:	980f883a 	mov	r7,r19
 1002cb4:	d8814115 	stw	r2,1284(sp)
 1002cb8:	003a7206 	br	1001684 <___vfprintf_internal_r+0x3bc>
 1002cbc:	00bfffc4 	movi	r2,-1
 1002cc0:	9880e226 	beq	r19,r2,100304c <___vfprintf_internal_r+0x1d84>
 1002cc4:	d9414d17 	ldw	r5,1332(sp)
 1002cc8:	008019c4 	movi	r2,103
 1002ccc:	2880dc26 	beq	r5,r2,1003040 <___vfprintf_internal_r+0x1d78>
 1002cd0:	008011c4 	movi	r2,71
 1002cd4:	2880da26 	beq	r5,r2,1003040 <___vfprintf_internal_r+0x1d78>
 1002cd8:	d9414c17 	ldw	r5,1328(sp)
 1002cdc:	d9014317 	ldw	r4,1292(sp)
 1002ce0:	d9814217 	ldw	r6,1288(sp)
 1002ce4:	29404014 	ori	r5,r5,256
 1002ce8:	d9414c15 	stw	r5,1328(sp)
 1002cec:	2000cc16 	blt	r4,zero,1003020 <___vfprintf_internal_r+0x1d58>
 1002cf0:	3021883a 	mov	r16,r6
 1002cf4:	2023883a 	mov	r17,r4
 1002cf8:	0039883a 	mov	fp,zero
 1002cfc:	d9414d17 	ldw	r5,1332(sp)
 1002d00:	00801984 	movi	r2,102
 1002d04:	2880b726 	beq	r5,r2,1002fe4 <___vfprintf_internal_r+0x1d1c>
 1002d08:	00801184 	movi	r2,70
 1002d0c:	2880b526 	beq	r5,r2,1002fe4 <___vfprintf_internal_r+0x1d1c>
 1002d10:	00801944 	movi	r2,101
 1002d14:	2880c826 	beq	r5,r2,1003038 <___vfprintf_internal_r+0x1d70>
 1002d18:	00801144 	movi	r2,69
 1002d1c:	2880c626 	beq	r5,r2,1003038 <___vfprintf_internal_r+0x1d70>
 1002d20:	9829883a 	mov	r20,r19
 1002d24:	d9014f17 	ldw	r4,1340(sp)
 1002d28:	d8800504 	addi	r2,sp,20
 1002d2c:	880d883a 	mov	r6,r17
 1002d30:	d8800115 	stw	r2,4(sp)
 1002d34:	d8c00604 	addi	r3,sp,24
 1002d38:	d8800704 	addi	r2,sp,28
 1002d3c:	800b883a 	mov	r5,r16
 1002d40:	01c00084 	movi	r7,2
 1002d44:	d8c00215 	stw	r3,8(sp)
 1002d48:	d8800315 	stw	r2,12(sp)
 1002d4c:	dd000015 	stw	r20,0(sp)
 1002d50:	10035300 	call	1003530 <_dtoa_r>
 1002d54:	d9814d17 	ldw	r6,1332(sp)
 1002d58:	d8814115 	stw	r2,1284(sp)
 1002d5c:	008019c4 	movi	r2,103
 1002d60:	30809526 	beq	r6,r2,1002fb8 <___vfprintf_internal_r+0x1cf0>
 1002d64:	d8c14d17 	ldw	r3,1332(sp)
 1002d68:	008011c4 	movi	r2,71
 1002d6c:	18809226 	beq	r3,r2,1002fb8 <___vfprintf_internal_r+0x1cf0>
 1002d70:	d9414117 	ldw	r5,1284(sp)
 1002d74:	d9814d17 	ldw	r6,1332(sp)
 1002d78:	00801984 	movi	r2,102
 1002d7c:	2d25883a 	add	r18,r5,r20
 1002d80:	30808626 	beq	r6,r2,1002f9c <___vfprintf_internal_r+0x1cd4>
 1002d84:	00801184 	movi	r2,70
 1002d88:	30808426 	beq	r6,r2,1002f9c <___vfprintf_internal_r+0x1cd4>
 1002d8c:	000d883a 	mov	r6,zero
 1002d90:	000f883a 	mov	r7,zero
 1002d94:	880b883a 	mov	r5,r17
 1002d98:	8009883a 	mov	r4,r16
 1002d9c:	1009cf40 	call	1009cf4 <__eqdf2>
 1002da0:	1000751e 	bne	r2,zero,1002f78 <___vfprintf_internal_r+0x1cb0>
 1002da4:	9005883a 	mov	r2,r18
 1002da8:	dc800715 	stw	r18,28(sp)
 1002dac:	d9014117 	ldw	r4,1284(sp)
 1002db0:	d9414d17 	ldw	r5,1332(sp)
 1002db4:	00c019c4 	movi	r3,103
 1002db8:	1125c83a 	sub	r18,r2,r4
 1002dbc:	28c06826 	beq	r5,r3,1002f60 <___vfprintf_internal_r+0x1c98>
 1002dc0:	008011c4 	movi	r2,71
 1002dc4:	28806626 	beq	r5,r2,1002f60 <___vfprintf_internal_r+0x1c98>
 1002dc8:	d9000517 	ldw	r4,20(sp)
 1002dcc:	d8c14d17 	ldw	r3,1332(sp)
 1002dd0:	00801944 	movi	r2,101
 1002dd4:	10c05516 	blt	r2,r3,1002f2c <___vfprintf_internal_r+0x1c64>
 1002dd8:	213fffc4 	addi	r4,r4,-1
 1002ddc:	d9000515 	stw	r4,20(sp)
 1002de0:	d8c00805 	stb	r3,32(sp)
 1002de4:	2021883a 	mov	r16,r4
 1002de8:	2000c116 	blt	r4,zero,10030f0 <___vfprintf_internal_r+0x1e28>
 1002dec:	00800ac4 	movi	r2,43
 1002df0:	d8800845 	stb	r2,33(sp)
 1002df4:	00800244 	movi	r2,9
 1002df8:	1400af0e 	bge	r2,r16,10030b8 <___vfprintf_internal_r+0x1df0>
 1002dfc:	1027883a 	mov	r19,r2
 1002e00:	dc400b84 	addi	r17,sp,46
 1002e04:	8009883a 	mov	r4,r16
 1002e08:	01400284 	movi	r5,10
 1002e0c:	100a3dc0 	call	100a3dc <__modsi3>
 1002e10:	10800c04 	addi	r2,r2,48
 1002e14:	8c7fffc4 	addi	r17,r17,-1
 1002e18:	8009883a 	mov	r4,r16
 1002e1c:	01400284 	movi	r5,10
 1002e20:	88800005 	stb	r2,0(r17)
 1002e24:	100a37c0 	call	100a37c <__divsi3>
 1002e28:	1021883a 	mov	r16,r2
 1002e2c:	98bff516 	blt	r19,r2,1002e04 <___vfprintf_internal_r+0x1b3c>
 1002e30:	10c00c04 	addi	r3,r2,48
 1002e34:	d88009c4 	addi	r2,sp,39
 1002e38:	108001c4 	addi	r2,r2,7
 1002e3c:	897fffc4 	addi	r5,r17,-1
 1002e40:	88ffffc5 	stb	r3,-1(r17)
 1002e44:	2880a72e 	bgeu	r5,r2,10030e4 <___vfprintf_internal_r+0x1e1c>
 1002e48:	1009883a 	mov	r4,r2
 1002e4c:	d9800804 	addi	r6,sp,32
 1002e50:	d8c00884 	addi	r3,sp,34
 1002e54:	28800003 	ldbu	r2,0(r5)
 1002e58:	29400044 	addi	r5,r5,1
 1002e5c:	18800005 	stb	r2,0(r3)
 1002e60:	18c00044 	addi	r3,r3,1
 1002e64:	293ffb36 	bltu	r5,r4,1002e54 <___vfprintf_internal_r+0x1b8c>
 1002e68:	1987c83a 	sub	r3,r3,r6
 1002e6c:	00800044 	movi	r2,1
 1002e70:	d8c14815 	stw	r3,1312(sp)
 1002e74:	90cf883a 	add	r7,r18,r3
 1002e78:	1480960e 	bge	r2,r18,10030d4 <___vfprintf_internal_r+0x1e0c>
 1002e7c:	39c00044 	addi	r7,r7,1
 1002e80:	d9c14515 	stw	r7,1300(sp)
 1002e84:	38003416 	blt	r7,zero,1002f58 <___vfprintf_internal_r+0x1c90>
 1002e88:	e0803fcc 	andi	r2,fp,255
 1002e8c:	1080201c 	xori	r2,r2,128
 1002e90:	10bfe004 	addi	r2,r2,-128
 1002e94:	10004e26 	beq	r2,zero,1002fd0 <___vfprintf_internal_r+0x1d08>
 1002e98:	00800b44 	movi	r2,45
 1002e9c:	dc814715 	stw	r18,1308(sp)
 1002ea0:	d8014615 	stw	zero,1304(sp)
 1002ea4:	d8800405 	stb	r2,16(sp)
 1002ea8:	003bab06 	br	1001d58 <___vfprintf_internal_r+0xa90>
 1002eac:	00800b44 	movi	r2,45
 1002eb0:	d8800405 	stb	r2,16(sp)
 1002eb4:	003d2d06 	br	100236c <___vfprintf_internal_r+0x10a4>
 1002eb8:	d9014f17 	ldw	r4,1340(sp)
 1002ebc:	b00b883a 	mov	r5,r22
 1002ec0:	d9800c04 	addi	r6,sp,48
 1002ec4:	10012700 	call	1001270 <__sprint_r>
 1002ec8:	103ab71e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x6e0>
 1002ecc:	003ab506 	br	10019a4 <___vfprintf_internal_r+0x6dc>
 1002ed0:	38800017 	ldw	r2,0(r7)
 1002ed4:	39c00104 	addi	r7,r7,4
 1002ed8:	d9c14015 	stw	r7,1280(sp)
 1002edc:	d9414b17 	ldw	r5,1324(sp)
 1002ee0:	d9c14017 	ldw	r7,1280(sp)
 1002ee4:	11400015 	stw	r5,0(r2)
 1002ee8:	00395306 	br	1001438 <___vfprintf_internal_r+0x170>
 1002eec:	980f883a 	mov	r7,r19
 1002ef0:	dcc14515 	stw	r19,1300(sp)
 1002ef4:	d8014615 	stw	zero,1304(sp)
 1002ef8:	003b9506 	br	1001d50 <___vfprintf_internal_r+0xa88>
 1002efc:	0027883a 	mov	r19,zero
 1002f00:	00397206 	br	10014cc <___vfprintf_internal_r+0x204>
 1002f04:	00c04074 	movhi	r3,257
 1002f08:	18c9e204 	addi	r3,r3,10120
 1002f0c:	100f883a 	mov	r7,r2
 1002f10:	d8814515 	stw	r2,1300(sp)
 1002f14:	d8c14115 	stw	r3,1284(sp)
 1002f18:	0039da06 	br	1001684 <___vfprintf_internal_r+0x3bc>
 1002f1c:	00804074 	movhi	r2,257
 1002f20:	1089e104 	addi	r2,r2,10116
 1002f24:	d8814115 	stw	r2,1284(sp)
 1002f28:	003d1606 	br	1002384 <___vfprintf_internal_r+0x10bc>
 1002f2c:	d9414d17 	ldw	r5,1332(sp)
 1002f30:	00801984 	movi	r2,102
 1002f34:	28804926 	beq	r5,r2,100305c <___vfprintf_internal_r+0x1d94>
 1002f38:	200f883a 	mov	r7,r4
 1002f3c:	24805716 	blt	r4,r18,100309c <___vfprintf_internal_r+0x1dd4>
 1002f40:	d9414c17 	ldw	r5,1328(sp)
 1002f44:	2880004c 	andi	r2,r5,1
 1002f48:	10000126 	beq	r2,zero,1002f50 <___vfprintf_internal_r+0x1c88>
 1002f4c:	21c00044 	addi	r7,r4,1
 1002f50:	d9c14515 	stw	r7,1300(sp)
 1002f54:	383fcc0e 	bge	r7,zero,1002e88 <___vfprintf_internal_r+0x1bc0>
 1002f58:	d8014515 	stw	zero,1300(sp)
 1002f5c:	003fca06 	br	1002e88 <___vfprintf_internal_r+0x1bc0>
 1002f60:	d9000517 	ldw	r4,20(sp)
 1002f64:	00bfff04 	movi	r2,-4
 1002f68:	1100480e 	bge	r2,r4,100308c <___vfprintf_internal_r+0x1dc4>
 1002f6c:	99004716 	blt	r19,r4,100308c <___vfprintf_internal_r+0x1dc4>
 1002f70:	d8c14d15 	stw	r3,1332(sp)
 1002f74:	003ff006 	br	1002f38 <___vfprintf_internal_r+0x1c70>
 1002f78:	d8800717 	ldw	r2,28(sp)
 1002f7c:	14bf8b2e 	bgeu	r2,r18,1002dac <___vfprintf_internal_r+0x1ae4>
 1002f80:	9007883a 	mov	r3,r18
 1002f84:	01000c04 	movi	r4,48
 1002f88:	11000005 	stb	r4,0(r2)
 1002f8c:	10800044 	addi	r2,r2,1
 1002f90:	d8800715 	stw	r2,28(sp)
 1002f94:	18bffc1e 	bne	r3,r2,1002f88 <___vfprintf_internal_r+0x1cc0>
 1002f98:	003f8406 	br	1002dac <___vfprintf_internal_r+0x1ae4>
 1002f9c:	d8814117 	ldw	r2,1284(sp)
 1002fa0:	10c00007 	ldb	r3,0(r2)
 1002fa4:	00800c04 	movi	r2,48
 1002fa8:	18805b26 	beq	r3,r2,1003118 <___vfprintf_internal_r+0x1e50>
 1002fac:	d9000517 	ldw	r4,20(sp)
 1002fb0:	9125883a 	add	r18,r18,r4
 1002fb4:	003f7506 	br	1002d8c <___vfprintf_internal_r+0x1ac4>
 1002fb8:	d9014c17 	ldw	r4,1328(sp)
 1002fbc:	2080004c 	andi	r2,r4,1
 1002fc0:	1005003a 	cmpeq	r2,r2,zero
 1002fc4:	103f6a26 	beq	r2,zero,1002d70 <___vfprintf_internal_r+0x1aa8>
 1002fc8:	d8800717 	ldw	r2,28(sp)
 1002fcc:	003f7706 	br	1002dac <___vfprintf_internal_r+0x1ae4>
 1002fd0:	d9c14515 	stw	r7,1300(sp)
 1002fd4:	38004d16 	blt	r7,zero,100310c <___vfprintf_internal_r+0x1e44>
 1002fd8:	dc814715 	stw	r18,1308(sp)
 1002fdc:	d8014615 	stw	zero,1304(sp)
 1002fe0:	003b5b06 	br	1001d50 <___vfprintf_internal_r+0xa88>
 1002fe4:	d9014f17 	ldw	r4,1340(sp)
 1002fe8:	d8800504 	addi	r2,sp,20
 1002fec:	d8800115 	stw	r2,4(sp)
 1002ff0:	d8c00604 	addi	r3,sp,24
 1002ff4:	d8800704 	addi	r2,sp,28
 1002ff8:	800b883a 	mov	r5,r16
 1002ffc:	880d883a 	mov	r6,r17
 1003000:	01c000c4 	movi	r7,3
 1003004:	d8c00215 	stw	r3,8(sp)
 1003008:	d8800315 	stw	r2,12(sp)
 100300c:	dcc00015 	stw	r19,0(sp)
 1003010:	9829883a 	mov	r20,r19
 1003014:	10035300 	call	1003530 <_dtoa_r>
 1003018:	d8814115 	stw	r2,1284(sp)
 100301c:	003f5106 	br	1002d64 <___vfprintf_internal_r+0x1a9c>
 1003020:	d8c14217 	ldw	r3,1288(sp)
 1003024:	d9014317 	ldw	r4,1292(sp)
 1003028:	07000b44 	movi	fp,45
 100302c:	1821883a 	mov	r16,r3
 1003030:	2460003c 	xorhi	r17,r4,32768
 1003034:	003f3106 	br	1002cfc <___vfprintf_internal_r+0x1a34>
 1003038:	9d000044 	addi	r20,r19,1
 100303c:	003f3906 	br	1002d24 <___vfprintf_internal_r+0x1a5c>
 1003040:	983f251e 	bne	r19,zero,1002cd8 <___vfprintf_internal_r+0x1a10>
 1003044:	04c00044 	movi	r19,1
 1003048:	003f2306 	br	1002cd8 <___vfprintf_internal_r+0x1a10>
 100304c:	04c00184 	movi	r19,6
 1003050:	003f2106 	br	1002cd8 <___vfprintf_internal_r+0x1a10>
 1003054:	d8014515 	stw	zero,1300(sp)
 1003058:	003eee06 	br	1002c14 <___vfprintf_internal_r+0x194c>
 100305c:	200f883a 	mov	r7,r4
 1003060:	0100370e 	bge	zero,r4,1003140 <___vfprintf_internal_r+0x1e78>
 1003064:	9800031e 	bne	r19,zero,1003074 <___vfprintf_internal_r+0x1dac>
 1003068:	d9814c17 	ldw	r6,1328(sp)
 100306c:	3080004c 	andi	r2,r6,1
 1003070:	103fb726 	beq	r2,zero,1002f50 <___vfprintf_internal_r+0x1c88>
 1003074:	20800044 	addi	r2,r4,1
 1003078:	98a7883a 	add	r19,r19,r2
 100307c:	dcc14515 	stw	r19,1300(sp)
 1003080:	980f883a 	mov	r7,r19
 1003084:	983f800e 	bge	r19,zero,1002e88 <___vfprintf_internal_r+0x1bc0>
 1003088:	003fb306 	br	1002f58 <___vfprintf_internal_r+0x1c90>
 100308c:	d9814d17 	ldw	r6,1332(sp)
 1003090:	31bfff84 	addi	r6,r6,-2
 1003094:	d9814d15 	stw	r6,1332(sp)
 1003098:	003f4c06 	br	1002dcc <___vfprintf_internal_r+0x1b04>
 100309c:	0100180e 	bge	zero,r4,1003100 <___vfprintf_internal_r+0x1e38>
 10030a0:	00800044 	movi	r2,1
 10030a4:	1485883a 	add	r2,r2,r18
 10030a8:	d8814515 	stw	r2,1300(sp)
 10030ac:	100f883a 	mov	r7,r2
 10030b0:	103f750e 	bge	r2,zero,1002e88 <___vfprintf_internal_r+0x1bc0>
 10030b4:	003fa806 	br	1002f58 <___vfprintf_internal_r+0x1c90>
 10030b8:	80c00c04 	addi	r3,r16,48
 10030bc:	00800c04 	movi	r2,48
 10030c0:	d8c008c5 	stb	r3,35(sp)
 10030c4:	d9800804 	addi	r6,sp,32
 10030c8:	d8c00904 	addi	r3,sp,36
 10030cc:	d8800885 	stb	r2,34(sp)
 10030d0:	003f6506 	br	1002e68 <___vfprintf_internal_r+0x1ba0>
 10030d4:	d9014c17 	ldw	r4,1328(sp)
 10030d8:	2084703a 	and	r2,r4,r2
 10030dc:	103f9c26 	beq	r2,zero,1002f50 <___vfprintf_internal_r+0x1c88>
 10030e0:	003f6606 	br	1002e7c <___vfprintf_internal_r+0x1bb4>
 10030e4:	d9800804 	addi	r6,sp,32
 10030e8:	d8c00884 	addi	r3,sp,34
 10030ec:	003f5e06 	br	1002e68 <___vfprintf_internal_r+0x1ba0>
 10030f0:	00800b44 	movi	r2,45
 10030f4:	0121c83a 	sub	r16,zero,r4
 10030f8:	d8800845 	stb	r2,33(sp)
 10030fc:	003f3d06 	br	1002df4 <___vfprintf_internal_r+0x1b2c>
 1003100:	00800084 	movi	r2,2
 1003104:	1105c83a 	sub	r2,r2,r4
 1003108:	003fe606 	br	10030a4 <___vfprintf_internal_r+0x1ddc>
 100310c:	d8014515 	stw	zero,1300(sp)
 1003110:	dc814715 	stw	r18,1308(sp)
 1003114:	003fb106 	br	1002fdc <___vfprintf_internal_r+0x1d14>
 1003118:	000d883a 	mov	r6,zero
 100311c:	000f883a 	mov	r7,zero
 1003120:	8009883a 	mov	r4,r16
 1003124:	880b883a 	mov	r5,r17
 1003128:	1009d7c0 	call	1009d7c <__nedf2>
 100312c:	103f9f26 	beq	r2,zero,1002fac <___vfprintf_internal_r+0x1ce4>
 1003130:	00800044 	movi	r2,1
 1003134:	1509c83a 	sub	r4,r2,r20
 1003138:	d9000515 	stw	r4,20(sp)
 100313c:	003f9b06 	br	1002fac <___vfprintf_internal_r+0x1ce4>
 1003140:	98000d1e 	bne	r19,zero,1003178 <___vfprintf_internal_r+0x1eb0>
 1003144:	d8c14c17 	ldw	r3,1328(sp)
 1003148:	1880004c 	andi	r2,r3,1
 100314c:	10000a1e 	bne	r2,zero,1003178 <___vfprintf_internal_r+0x1eb0>
 1003150:	01000044 	movi	r4,1
 1003154:	200f883a 	mov	r7,r4
 1003158:	d9014515 	stw	r4,1300(sp)
 100315c:	003f4a06 	br	1002e88 <___vfprintf_internal_r+0x1bc0>
 1003160:	3cc00017 	ldw	r19,0(r7)
 1003164:	39c00104 	addi	r7,r7,4
 1003168:	983d0e0e 	bge	r19,zero,10025a4 <___vfprintf_internal_r+0x12dc>
 100316c:	b8c00007 	ldb	r3,0(r23)
 1003170:	04ffffc4 	movi	r19,-1
 1003174:	0038d306 	br	10014c4 <___vfprintf_internal_r+0x1fc>
 1003178:	9cc00084 	addi	r19,r19,2
 100317c:	dcc14515 	stw	r19,1300(sp)
 1003180:	980f883a 	mov	r7,r19
 1003184:	983f400e 	bge	r19,zero,1002e88 <___vfprintf_internal_r+0x1bc0>
 1003188:	003f7306 	br	1002f58 <___vfprintf_internal_r+0x1c90>

0100318c <__vfprintf_internal>:
 100318c:	00804074 	movhi	r2,257
 1003190:	10915604 	addi	r2,r2,17752
 1003194:	2013883a 	mov	r9,r4
 1003198:	11000017 	ldw	r4,0(r2)
 100319c:	2805883a 	mov	r2,r5
 10031a0:	300f883a 	mov	r7,r6
 10031a4:	480b883a 	mov	r5,r9
 10031a8:	100d883a 	mov	r6,r2
 10031ac:	10012c81 	jmpi	10012c8 <___vfprintf_internal_r>

010031b0 <__swsetup_r>:
 10031b0:	00804074 	movhi	r2,257
 10031b4:	10915604 	addi	r2,r2,17752
 10031b8:	10c00017 	ldw	r3,0(r2)
 10031bc:	defffd04 	addi	sp,sp,-12
 10031c0:	dc400115 	stw	r17,4(sp)
 10031c4:	dc000015 	stw	r16,0(sp)
 10031c8:	dfc00215 	stw	ra,8(sp)
 10031cc:	2023883a 	mov	r17,r4
 10031d0:	2821883a 	mov	r16,r5
 10031d4:	18000226 	beq	r3,zero,10031e0 <__swsetup_r+0x30>
 10031d8:	18800e17 	ldw	r2,56(r3)
 10031dc:	10001f26 	beq	r2,zero,100325c <__swsetup_r+0xac>
 10031e0:	8100030b 	ldhu	r4,12(r16)
 10031e4:	2080020c 	andi	r2,r4,8
 10031e8:	10002826 	beq	r2,zero,100328c <__swsetup_r+0xdc>
 10031ec:	81400417 	ldw	r5,16(r16)
 10031f0:	28001d26 	beq	r5,zero,1003268 <__swsetup_r+0xb8>
 10031f4:	2080004c 	andi	r2,r4,1
 10031f8:	1005003a 	cmpeq	r2,r2,zero
 10031fc:	10000b26 	beq	r2,zero,100322c <__swsetup_r+0x7c>
 1003200:	2080008c 	andi	r2,r4,2
 1003204:	10001226 	beq	r2,zero,1003250 <__swsetup_r+0xa0>
 1003208:	0005883a 	mov	r2,zero
 100320c:	80800215 	stw	r2,8(r16)
 1003210:	28000b26 	beq	r5,zero,1003240 <__swsetup_r+0x90>
 1003214:	0005883a 	mov	r2,zero
 1003218:	dfc00217 	ldw	ra,8(sp)
 100321c:	dc400117 	ldw	r17,4(sp)
 1003220:	dc000017 	ldw	r16,0(sp)
 1003224:	dec00304 	addi	sp,sp,12
 1003228:	f800283a 	ret
 100322c:	80800517 	ldw	r2,20(r16)
 1003230:	80000215 	stw	zero,8(r16)
 1003234:	0085c83a 	sub	r2,zero,r2
 1003238:	80800615 	stw	r2,24(r16)
 100323c:	283ff51e 	bne	r5,zero,1003214 <__swsetup_r+0x64>
 1003240:	2080200c 	andi	r2,r4,128
 1003244:	103ff326 	beq	r2,zero,1003214 <__swsetup_r+0x64>
 1003248:	00bfffc4 	movi	r2,-1
 100324c:	003ff206 	br	1003218 <__swsetup_r+0x68>
 1003250:	80800517 	ldw	r2,20(r16)
 1003254:	80800215 	stw	r2,8(r16)
 1003258:	003fed06 	br	1003210 <__swsetup_r+0x60>
 100325c:	1809883a 	mov	r4,r3
 1003260:	1004d7c0 	call	1004d7c <__sinit>
 1003264:	003fde06 	br	10031e0 <__swsetup_r+0x30>
 1003268:	20c0a00c 	andi	r3,r4,640
 100326c:	00808004 	movi	r2,512
 1003270:	18bfe026 	beq	r3,r2,10031f4 <__swsetup_r+0x44>
 1003274:	8809883a 	mov	r4,r17
 1003278:	800b883a 	mov	r5,r16
 100327c:	1005b280 	call	1005b28 <__smakebuf_r>
 1003280:	8100030b 	ldhu	r4,12(r16)
 1003284:	81400417 	ldw	r5,16(r16)
 1003288:	003fda06 	br	10031f4 <__swsetup_r+0x44>
 100328c:	2080040c 	andi	r2,r4,16
 1003290:	103fed26 	beq	r2,zero,1003248 <__swsetup_r+0x98>
 1003294:	2080010c 	andi	r2,r4,4
 1003298:	10001226 	beq	r2,zero,10032e4 <__swsetup_r+0x134>
 100329c:	81400c17 	ldw	r5,48(r16)
 10032a0:	28000526 	beq	r5,zero,10032b8 <__swsetup_r+0x108>
 10032a4:	80801004 	addi	r2,r16,64
 10032a8:	28800226 	beq	r5,r2,10032b4 <__swsetup_r+0x104>
 10032ac:	8809883a 	mov	r4,r17
 10032b0:	10051340 	call	1005134 <_free_r>
 10032b4:	80000c15 	stw	zero,48(r16)
 10032b8:	8080030b 	ldhu	r2,12(r16)
 10032bc:	81400417 	ldw	r5,16(r16)
 10032c0:	80000115 	stw	zero,4(r16)
 10032c4:	10bff6cc 	andi	r2,r2,65499
 10032c8:	8080030d 	sth	r2,12(r16)
 10032cc:	81400015 	stw	r5,0(r16)
 10032d0:	8080030b 	ldhu	r2,12(r16)
 10032d4:	10800214 	ori	r2,r2,8
 10032d8:	113fffcc 	andi	r4,r2,65535
 10032dc:	8080030d 	sth	r2,12(r16)
 10032e0:	003fc306 	br	10031f0 <__swsetup_r+0x40>
 10032e4:	81400417 	ldw	r5,16(r16)
 10032e8:	003ff906 	br	10032d0 <__swsetup_r+0x120>

010032ec <quorem>:
 10032ec:	28c00417 	ldw	r3,16(r5)
 10032f0:	20800417 	ldw	r2,16(r4)
 10032f4:	defff104 	addi	sp,sp,-60
 10032f8:	dfc00e15 	stw	ra,56(sp)
 10032fc:	df000d15 	stw	fp,52(sp)
 1003300:	ddc00c15 	stw	r23,48(sp)
 1003304:	dd800b15 	stw	r22,44(sp)
 1003308:	dd400a15 	stw	r21,40(sp)
 100330c:	dd000915 	stw	r20,36(sp)
 1003310:	dcc00815 	stw	r19,32(sp)
 1003314:	dc800715 	stw	r18,28(sp)
 1003318:	dc400615 	stw	r17,24(sp)
 100331c:	dc000515 	stw	r16,20(sp)
 1003320:	d9000315 	stw	r4,12(sp)
 1003324:	d9400415 	stw	r5,16(sp)
 1003328:	10c07f16 	blt	r2,r3,1003528 <quorem+0x23c>
 100332c:	1d3fffc4 	addi	r20,r3,-1
 1003330:	d8c00417 	ldw	r3,16(sp)
 1003334:	d9000317 	ldw	r4,12(sp)
 1003338:	a505883a 	add	r2,r20,r20
 100333c:	1085883a 	add	r2,r2,r2
 1003340:	1cc00504 	addi	r19,r3,20
 1003344:	25c00504 	addi	r23,r4,20
 1003348:	98ad883a 	add	r22,r19,r2
 100334c:	15c7883a 	add	r3,r2,r23
 1003350:	b1400017 	ldw	r5,0(r22)
 1003354:	19000017 	ldw	r4,0(r3)
 1003358:	d8c00015 	stw	r3,0(sp)
 100335c:	29400044 	addi	r5,r5,1
 1003360:	d9000215 	stw	r4,8(sp)
 1003364:	100a43c0 	call	100a43c <__udivsi3>
 1003368:	1039883a 	mov	fp,r2
 100336c:	10003d1e 	bne	r2,zero,1003464 <quorem+0x178>
 1003370:	d9400417 	ldw	r5,16(sp)
 1003374:	d9000317 	ldw	r4,12(sp)
 1003378:	10068540 	call	1006854 <__mcmp>
 100337c:	10002c16 	blt	r2,zero,1003430 <quorem+0x144>
 1003380:	e7000044 	addi	fp,fp,1
 1003384:	b80f883a 	mov	r7,r23
 1003388:	0011883a 	mov	r8,zero
 100338c:	0009883a 	mov	r4,zero
 1003390:	99400017 	ldw	r5,0(r19)
 1003394:	38c00017 	ldw	r3,0(r7)
 1003398:	9cc00104 	addi	r19,r19,4
 100339c:	28bfffcc 	andi	r2,r5,65535
 10033a0:	2085883a 	add	r2,r4,r2
 10033a4:	11bfffcc 	andi	r6,r2,65535
 10033a8:	193fffcc 	andi	r4,r3,65535
 10033ac:	1004d43a 	srli	r2,r2,16
 10033b0:	280ad43a 	srli	r5,r5,16
 10033b4:	2189c83a 	sub	r4,r4,r6
 10033b8:	2209883a 	add	r4,r4,r8
 10033bc:	1806d43a 	srli	r3,r3,16
 10033c0:	288b883a 	add	r5,r5,r2
 10033c4:	200dd43a 	srai	r6,r4,16
 10033c8:	28bfffcc 	andi	r2,r5,65535
 10033cc:	1887c83a 	sub	r3,r3,r2
 10033d0:	1987883a 	add	r3,r3,r6
 10033d4:	3900000d 	sth	r4,0(r7)
 10033d8:	38c0008d 	sth	r3,2(r7)
 10033dc:	2808d43a 	srli	r4,r5,16
 10033e0:	39c00104 	addi	r7,r7,4
 10033e4:	1811d43a 	srai	r8,r3,16
 10033e8:	b4ffe92e 	bgeu	r22,r19,1003390 <quorem+0xa4>
 10033ec:	a505883a 	add	r2,r20,r20
 10033f0:	1085883a 	add	r2,r2,r2
 10033f4:	b885883a 	add	r2,r23,r2
 10033f8:	10c00017 	ldw	r3,0(r2)
 10033fc:	18000c1e 	bne	r3,zero,1003430 <quorem+0x144>
 1003400:	113fff04 	addi	r4,r2,-4
 1003404:	b900082e 	bgeu	r23,r4,1003428 <quorem+0x13c>
 1003408:	10bfff17 	ldw	r2,-4(r2)
 100340c:	10000326 	beq	r2,zero,100341c <quorem+0x130>
 1003410:	00000506 	br	1003428 <quorem+0x13c>
 1003414:	20800017 	ldw	r2,0(r4)
 1003418:	1000031e 	bne	r2,zero,1003428 <quorem+0x13c>
 100341c:	213fff04 	addi	r4,r4,-4
 1003420:	a53fffc4 	addi	r20,r20,-1
 1003424:	b93ffb36 	bltu	r23,r4,1003414 <quorem+0x128>
 1003428:	d9000317 	ldw	r4,12(sp)
 100342c:	25000415 	stw	r20,16(r4)
 1003430:	e005883a 	mov	r2,fp
 1003434:	dfc00e17 	ldw	ra,56(sp)
 1003438:	df000d17 	ldw	fp,52(sp)
 100343c:	ddc00c17 	ldw	r23,48(sp)
 1003440:	dd800b17 	ldw	r22,44(sp)
 1003444:	dd400a17 	ldw	r21,40(sp)
 1003448:	dd000917 	ldw	r20,36(sp)
 100344c:	dcc00817 	ldw	r19,32(sp)
 1003450:	dc800717 	ldw	r18,28(sp)
 1003454:	dc400617 	ldw	r17,24(sp)
 1003458:	dc000517 	ldw	r16,20(sp)
 100345c:	dec00f04 	addi	sp,sp,60
 1003460:	f800283a 	ret
 1003464:	b823883a 	mov	r17,r23
 1003468:	9825883a 	mov	r18,r19
 100346c:	d8000115 	stw	zero,4(sp)
 1003470:	002b883a 	mov	r21,zero
 1003474:	94000017 	ldw	r16,0(r18)
 1003478:	e009883a 	mov	r4,fp
 100347c:	94800104 	addi	r18,r18,4
 1003480:	817fffcc 	andi	r5,r16,65535
 1003484:	1000adc0 	call	1000adc <__mulsi3>
 1003488:	800ad43a 	srli	r5,r16,16
 100348c:	e009883a 	mov	r4,fp
 1003490:	a8a1883a 	add	r16,r21,r2
 1003494:	1000adc0 	call	1000adc <__mulsi3>
 1003498:	89000017 	ldw	r4,0(r17)
 100349c:	80ffffcc 	andi	r3,r16,65535
 10034a0:	8020d43a 	srli	r16,r16,16
 10034a4:	217fffcc 	andi	r5,r4,65535
 10034a8:	28cbc83a 	sub	r5,r5,r3
 10034ac:	d8c00117 	ldw	r3,4(sp)
 10034b0:	2008d43a 	srli	r4,r4,16
 10034b4:	1405883a 	add	r2,r2,r16
 10034b8:	28cb883a 	add	r5,r5,r3
 10034bc:	280dd43a 	srai	r6,r5,16
 10034c0:	10ffffcc 	andi	r3,r2,65535
 10034c4:	20c9c83a 	sub	r4,r4,r3
 10034c8:	2189883a 	add	r4,r4,r6
 10034cc:	8900008d 	sth	r4,2(r17)
 10034d0:	2009d43a 	srai	r4,r4,16
 10034d4:	8940000d 	sth	r5,0(r17)
 10034d8:	102ad43a 	srli	r21,r2,16
 10034dc:	8c400104 	addi	r17,r17,4
 10034e0:	d9000115 	stw	r4,4(sp)
 10034e4:	b4bfe32e 	bgeu	r22,r18,1003474 <quorem+0x188>
 10034e8:	d9000217 	ldw	r4,8(sp)
 10034ec:	203fa01e 	bne	r4,zero,1003370 <quorem+0x84>
 10034f0:	d8800017 	ldw	r2,0(sp)
 10034f4:	10ffff04 	addi	r3,r2,-4
 10034f8:	b8c0082e 	bgeu	r23,r3,100351c <quorem+0x230>
 10034fc:	10bfff17 	ldw	r2,-4(r2)
 1003500:	10000326 	beq	r2,zero,1003510 <quorem+0x224>
 1003504:	00000506 	br	100351c <quorem+0x230>
 1003508:	18800017 	ldw	r2,0(r3)
 100350c:	1000031e 	bne	r2,zero,100351c <quorem+0x230>
 1003510:	18ffff04 	addi	r3,r3,-4
 1003514:	a53fffc4 	addi	r20,r20,-1
 1003518:	b8fffb36 	bltu	r23,r3,1003508 <quorem+0x21c>
 100351c:	d8c00317 	ldw	r3,12(sp)
 1003520:	1d000415 	stw	r20,16(r3)
 1003524:	003f9206 	br	1003370 <quorem+0x84>
 1003528:	0005883a 	mov	r2,zero
 100352c:	003fc106 	br	1003434 <quorem+0x148>

01003530 <_dtoa_r>:
 1003530:	22001017 	ldw	r8,64(r4)
 1003534:	deffda04 	addi	sp,sp,-152
 1003538:	dd402115 	stw	r21,132(sp)
 100353c:	dd002015 	stw	r20,128(sp)
 1003540:	dc801e15 	stw	r18,120(sp)
 1003544:	dc401d15 	stw	r17,116(sp)
 1003548:	dfc02515 	stw	ra,148(sp)
 100354c:	df002415 	stw	fp,144(sp)
 1003550:	ddc02315 	stw	r23,140(sp)
 1003554:	dd802215 	stw	r22,136(sp)
 1003558:	dcc01f15 	stw	r19,124(sp)
 100355c:	dc001c15 	stw	r16,112(sp)
 1003560:	d9001615 	stw	r4,88(sp)
 1003564:	3023883a 	mov	r17,r6
 1003568:	2829883a 	mov	r20,r5
 100356c:	d9c01715 	stw	r7,92(sp)
 1003570:	dc802817 	ldw	r18,160(sp)
 1003574:	302b883a 	mov	r21,r6
 1003578:	40000a26 	beq	r8,zero,10035a4 <_dtoa_r+0x74>
 100357c:	20801117 	ldw	r2,68(r4)
 1003580:	400b883a 	mov	r5,r8
 1003584:	40800115 	stw	r2,4(r8)
 1003588:	20c01117 	ldw	r3,68(r4)
 100358c:	00800044 	movi	r2,1
 1003590:	10c4983a 	sll	r2,r2,r3
 1003594:	40800215 	stw	r2,8(r8)
 1003598:	10066f80 	call	10066f8 <_Bfree>
 100359c:	d8c01617 	ldw	r3,88(sp)
 10035a0:	18001015 	stw	zero,64(r3)
 10035a4:	8800a316 	blt	r17,zero,1003834 <_dtoa_r+0x304>
 10035a8:	90000015 	stw	zero,0(r18)
 10035ac:	a8dffc2c 	andhi	r3,r21,32752
 10035b0:	009ffc34 	movhi	r2,32752
 10035b4:	18809126 	beq	r3,r2,10037fc <_dtoa_r+0x2cc>
 10035b8:	000d883a 	mov	r6,zero
 10035bc:	000f883a 	mov	r7,zero
 10035c0:	a009883a 	mov	r4,r20
 10035c4:	a80b883a 	mov	r5,r21
 10035c8:	dd001215 	stw	r20,72(sp)
 10035cc:	dd401315 	stw	r21,76(sp)
 10035d0:	1009d7c0 	call	1009d7c <__nedf2>
 10035d4:	1000171e 	bne	r2,zero,1003634 <_dtoa_r+0x104>
 10035d8:	d9802717 	ldw	r6,156(sp)
 10035dc:	00800044 	movi	r2,1
 10035e0:	30800015 	stw	r2,0(r6)
 10035e4:	d8802917 	ldw	r2,164(sp)
 10035e8:	10029b26 	beq	r2,zero,1004058 <_dtoa_r+0xb28>
 10035ec:	d9002917 	ldw	r4,164(sp)
 10035f0:	00804074 	movhi	r2,257
 10035f4:	1089f044 	addi	r2,r2,10177
 10035f8:	10ffffc4 	addi	r3,r2,-1
 10035fc:	20800015 	stw	r2,0(r4)
 1003600:	1805883a 	mov	r2,r3
 1003604:	dfc02517 	ldw	ra,148(sp)
 1003608:	df002417 	ldw	fp,144(sp)
 100360c:	ddc02317 	ldw	r23,140(sp)
 1003610:	dd802217 	ldw	r22,136(sp)
 1003614:	dd402117 	ldw	r21,132(sp)
 1003618:	dd002017 	ldw	r20,128(sp)
 100361c:	dcc01f17 	ldw	r19,124(sp)
 1003620:	dc801e17 	ldw	r18,120(sp)
 1003624:	dc401d17 	ldw	r17,116(sp)
 1003628:	dc001c17 	ldw	r16,112(sp)
 100362c:	dec02604 	addi	sp,sp,152
 1003630:	f800283a 	ret
 1003634:	d9001617 	ldw	r4,88(sp)
 1003638:	d9401217 	ldw	r5,72(sp)
 100363c:	d8800104 	addi	r2,sp,4
 1003640:	a80d883a 	mov	r6,r21
 1003644:	d9c00204 	addi	r7,sp,8
 1003648:	d8800015 	stw	r2,0(sp)
 100364c:	1006d340 	call	1006d34 <__d2b>
 1003650:	d8800715 	stw	r2,28(sp)
 1003654:	a804d53a 	srli	r2,r21,20
 1003658:	1101ffcc 	andi	r4,r2,2047
 100365c:	20008626 	beq	r4,zero,1003878 <_dtoa_r+0x348>
 1003660:	d8c01217 	ldw	r3,72(sp)
 1003664:	00800434 	movhi	r2,16
 1003668:	10bfffc4 	addi	r2,r2,-1
 100366c:	ddc00117 	ldw	r23,4(sp)
 1003670:	a884703a 	and	r2,r21,r2
 1003674:	1811883a 	mov	r8,r3
 1003678:	124ffc34 	orhi	r9,r2,16368
 100367c:	25bf0044 	addi	r22,r4,-1023
 1003680:	d8000815 	stw	zero,32(sp)
 1003684:	0005883a 	mov	r2,zero
 1003688:	00cffe34 	movhi	r3,16376
 100368c:	480b883a 	mov	r5,r9
 1003690:	4009883a 	mov	r4,r8
 1003694:	180f883a 	mov	r7,r3
 1003698:	100d883a 	mov	r6,r2
 100369c:	10095e40 	call	10095e4 <__subdf3>
 10036a0:	0218dbf4 	movhi	r8,25455
 10036a4:	4210d844 	addi	r8,r8,17249
 10036a8:	024ff4f4 	movhi	r9,16339
 10036ac:	4a61e9c4 	addi	r9,r9,-30809
 10036b0:	480f883a 	mov	r7,r9
 10036b4:	400d883a 	mov	r6,r8
 10036b8:	180b883a 	mov	r5,r3
 10036bc:	1009883a 	mov	r4,r2
 10036c0:	10096d80 	call	10096d8 <__muldf3>
 10036c4:	0222d874 	movhi	r8,35681
 10036c8:	42322cc4 	addi	r8,r8,-14157
 10036cc:	024ff1f4 	movhi	r9,16327
 10036d0:	4a628a04 	addi	r9,r9,-30168
 10036d4:	480f883a 	mov	r7,r9
 10036d8:	400d883a 	mov	r6,r8
 10036dc:	180b883a 	mov	r5,r3
 10036e0:	1009883a 	mov	r4,r2
 10036e4:	10096640 	call	1009664 <__adddf3>
 10036e8:	b009883a 	mov	r4,r22
 10036ec:	1021883a 	mov	r16,r2
 10036f0:	1823883a 	mov	r17,r3
 10036f4:	1009f9c0 	call	1009f9c <__floatsidf>
 10036f8:	021427f4 	movhi	r8,20639
 10036fc:	421e7ec4 	addi	r8,r8,31227
 1003700:	024ff4f4 	movhi	r9,16339
 1003704:	4a5104c4 	addi	r9,r9,17427
 1003708:	480f883a 	mov	r7,r9
 100370c:	400d883a 	mov	r6,r8
 1003710:	180b883a 	mov	r5,r3
 1003714:	1009883a 	mov	r4,r2
 1003718:	10096d80 	call	10096d8 <__muldf3>
 100371c:	180f883a 	mov	r7,r3
 1003720:	880b883a 	mov	r5,r17
 1003724:	100d883a 	mov	r6,r2
 1003728:	8009883a 	mov	r4,r16
 100372c:	10096640 	call	1009664 <__adddf3>
 1003730:	1009883a 	mov	r4,r2
 1003734:	180b883a 	mov	r5,r3
 1003738:	1021883a 	mov	r16,r2
 100373c:	1823883a 	mov	r17,r3
 1003740:	100a0940 	call	100a094 <__fixdfsi>
 1003744:	000d883a 	mov	r6,zero
 1003748:	000f883a 	mov	r7,zero
 100374c:	8009883a 	mov	r4,r16
 1003750:	880b883a 	mov	r5,r17
 1003754:	d8800d15 	stw	r2,52(sp)
 1003758:	1009f140 	call	1009f14 <__ltdf2>
 100375c:	10031716 	blt	r2,zero,10043bc <_dtoa_r+0xe8c>
 1003760:	d8c00d17 	ldw	r3,52(sp)
 1003764:	00800584 	movi	r2,22
 1003768:	10c1482e 	bgeu	r2,r3,1003c8c <_dtoa_r+0x75c>
 100376c:	01000044 	movi	r4,1
 1003770:	d9000c15 	stw	r4,48(sp)
 1003774:	bd85c83a 	sub	r2,r23,r22
 1003778:	11bfffc4 	addi	r6,r2,-1
 100377c:	30030b16 	blt	r6,zero,10043ac <_dtoa_r+0xe7c>
 1003780:	d9800a15 	stw	r6,40(sp)
 1003784:	d8001115 	stw	zero,68(sp)
 1003788:	d8c00d17 	ldw	r3,52(sp)
 100378c:	1802ff16 	blt	r3,zero,100438c <_dtoa_r+0xe5c>
 1003790:	d9000a17 	ldw	r4,40(sp)
 1003794:	d8c00915 	stw	r3,36(sp)
 1003798:	d8001015 	stw	zero,64(sp)
 100379c:	20c9883a 	add	r4,r4,r3
 10037a0:	d9000a15 	stw	r4,40(sp)
 10037a4:	d9001717 	ldw	r4,92(sp)
 10037a8:	00800244 	movi	r2,9
 10037ac:	11004636 	bltu	r2,r4,10038c8 <_dtoa_r+0x398>
 10037b0:	00800144 	movi	r2,5
 10037b4:	11020416 	blt	r2,r4,1003fc8 <_dtoa_r+0xa98>
 10037b8:	04400044 	movi	r17,1
 10037bc:	d8c01717 	ldw	r3,92(sp)
 10037c0:	00800144 	movi	r2,5
 10037c4:	10c1ed36 	bltu	r2,r3,1003f7c <_dtoa_r+0xa4c>
 10037c8:	18c5883a 	add	r2,r3,r3
 10037cc:	1085883a 	add	r2,r2,r2
 10037d0:	00c04034 	movhi	r3,256
 10037d4:	18cdf904 	addi	r3,r3,14308
 10037d8:	10c5883a 	add	r2,r2,r3
 10037dc:	11000017 	ldw	r4,0(r2)
 10037e0:	2000683a 	jmp	r4
 10037e4:	010038d0 	cmplti	r4,zero,227
 10037e8:	010038d0 	cmplti	r4,zero,227
 10037ec:	010042d0 	cmplti	r4,zero,267
 10037f0:	010042a8 	cmpgeui	r4,zero,266
 10037f4:	010042ec 	andhi	r4,zero,267
 10037f8:	010042f8 	rdprs	r4,zero,267
 10037fc:	d9002717 	ldw	r4,156(sp)
 1003800:	0089c3c4 	movi	r2,9999
 1003804:	20800015 	stw	r2,0(r4)
 1003808:	a0001026 	beq	r20,zero,100384c <_dtoa_r+0x31c>
 100380c:	00c04074 	movhi	r3,257
 1003810:	18c9fc04 	addi	r3,r3,10224
 1003814:	d9802917 	ldw	r6,164(sp)
 1003818:	303f7926 	beq	r6,zero,1003600 <_dtoa_r+0xd0>
 100381c:	188000c7 	ldb	r2,3(r3)
 1003820:	190000c4 	addi	r4,r3,3
 1003824:	1000101e 	bne	r2,zero,1003868 <_dtoa_r+0x338>
 1003828:	d8802917 	ldw	r2,164(sp)
 100382c:	11000015 	stw	r4,0(r2)
 1003830:	003f7306 	br	1003600 <_dtoa_r+0xd0>
 1003834:	00a00034 	movhi	r2,32768
 1003838:	10bfffc4 	addi	r2,r2,-1
 100383c:	00c00044 	movi	r3,1
 1003840:	88aa703a 	and	r21,r17,r2
 1003844:	90c00015 	stw	r3,0(r18)
 1003848:	003f5806 	br	10035ac <_dtoa_r+0x7c>
 100384c:	00800434 	movhi	r2,16
 1003850:	10bfffc4 	addi	r2,r2,-1
 1003854:	a884703a 	and	r2,r21,r2
 1003858:	103fec1e 	bne	r2,zero,100380c <_dtoa_r+0x2dc>
 100385c:	00c04074 	movhi	r3,257
 1003860:	18c9f904 	addi	r3,r3,10212
 1003864:	003feb06 	br	1003814 <_dtoa_r+0x2e4>
 1003868:	d8802917 	ldw	r2,164(sp)
 100386c:	19000204 	addi	r4,r3,8
 1003870:	11000015 	stw	r4,0(r2)
 1003874:	003f6206 	br	1003600 <_dtoa_r+0xd0>
 1003878:	ddc00117 	ldw	r23,4(sp)
 100387c:	d8800217 	ldw	r2,8(sp)
 1003880:	01000804 	movi	r4,32
 1003884:	b8c10c84 	addi	r3,r23,1074
 1003888:	18a3883a 	add	r17,r3,r2
 100388c:	2441b80e 	bge	r4,r17,1003f70 <_dtoa_r+0xa40>
 1003890:	00c01004 	movi	r3,64
 1003894:	1c47c83a 	sub	r3,r3,r17
 1003898:	88bff804 	addi	r2,r17,-32
 100389c:	a8c6983a 	sll	r3,r21,r3
 10038a0:	a084d83a 	srl	r2,r20,r2
 10038a4:	1888b03a 	or	r4,r3,r2
 10038a8:	100a16c0 	call	100a16c <__floatunsidf>
 10038ac:	1011883a 	mov	r8,r2
 10038b0:	00bf8434 	movhi	r2,65040
 10038b4:	01000044 	movi	r4,1
 10038b8:	10d3883a 	add	r9,r2,r3
 10038bc:	8dbef344 	addi	r22,r17,-1075
 10038c0:	d9000815 	stw	r4,32(sp)
 10038c4:	003f6f06 	br	1003684 <_dtoa_r+0x154>
 10038c8:	d8001715 	stw	zero,92(sp)
 10038cc:	04400044 	movi	r17,1
 10038d0:	00bfffc4 	movi	r2,-1
 10038d4:	00c00044 	movi	r3,1
 10038d8:	d8800e15 	stw	r2,56(sp)
 10038dc:	d8002615 	stw	zero,152(sp)
 10038e0:	d8800f15 	stw	r2,60(sp)
 10038e4:	d8c00b15 	stw	r3,44(sp)
 10038e8:	1021883a 	mov	r16,r2
 10038ec:	d8801617 	ldw	r2,88(sp)
 10038f0:	10001115 	stw	zero,68(r2)
 10038f4:	d8801617 	ldw	r2,88(sp)
 10038f8:	11401117 	ldw	r5,68(r2)
 10038fc:	1009883a 	mov	r4,r2
 1003900:	1006c780 	call	1006c78 <_Balloc>
 1003904:	d8c01617 	ldw	r3,88(sp)
 1003908:	d8800515 	stw	r2,20(sp)
 100390c:	18801015 	stw	r2,64(r3)
 1003910:	00800384 	movi	r2,14
 1003914:	14006836 	bltu	r2,r16,1003ab8 <_dtoa_r+0x588>
 1003918:	8805003a 	cmpeq	r2,r17,zero
 100391c:	1000661e 	bne	r2,zero,1003ab8 <_dtoa_r+0x588>
 1003920:	d9000d17 	ldw	r4,52(sp)
 1003924:	0102300e 	bge	zero,r4,10041e8 <_dtoa_r+0xcb8>
 1003928:	208003cc 	andi	r2,r4,15
 100392c:	100490fa 	slli	r2,r2,3
 1003930:	2025d13a 	srai	r18,r4,4
 1003934:	00c04074 	movhi	r3,257
 1003938:	18ca0e04 	addi	r3,r3,10296
 100393c:	10c5883a 	add	r2,r2,r3
 1003940:	90c0040c 	andi	r3,r18,16
 1003944:	14000017 	ldw	r16,0(r2)
 1003948:	14400117 	ldw	r17,4(r2)
 100394c:	18036a1e 	bne	r3,zero,10046f8 <_dtoa_r+0x11c8>
 1003950:	05800084 	movi	r22,2
 1003954:	90001026 	beq	r18,zero,1003998 <_dtoa_r+0x468>
 1003958:	04c04074 	movhi	r19,257
 100395c:	9cca4004 	addi	r19,r19,10496
 1003960:	9080004c 	andi	r2,r18,1
 1003964:	1005003a 	cmpeq	r2,r2,zero
 1003968:	1000081e 	bne	r2,zero,100398c <_dtoa_r+0x45c>
 100396c:	99800017 	ldw	r6,0(r19)
 1003970:	99c00117 	ldw	r7,4(r19)
 1003974:	880b883a 	mov	r5,r17
 1003978:	8009883a 	mov	r4,r16
 100397c:	10096d80 	call	10096d8 <__muldf3>
 1003980:	1021883a 	mov	r16,r2
 1003984:	b5800044 	addi	r22,r22,1
 1003988:	1823883a 	mov	r17,r3
 100398c:	9025d07a 	srai	r18,r18,1
 1003990:	9cc00204 	addi	r19,r19,8
 1003994:	903ff21e 	bne	r18,zero,1003960 <_dtoa_r+0x430>
 1003998:	a80b883a 	mov	r5,r21
 100399c:	a009883a 	mov	r4,r20
 10039a0:	880f883a 	mov	r7,r17
 10039a4:	800d883a 	mov	r6,r16
 10039a8:	1009a9c0 	call	1009a9c <__divdf3>
 10039ac:	1029883a 	mov	r20,r2
 10039b0:	182b883a 	mov	r21,r3
 10039b4:	d8c00c17 	ldw	r3,48(sp)
 10039b8:	1805003a 	cmpeq	r2,r3,zero
 10039bc:	1000081e 	bne	r2,zero,10039e0 <_dtoa_r+0x4b0>
 10039c0:	0005883a 	mov	r2,zero
 10039c4:	00cffc34 	movhi	r3,16368
 10039c8:	180f883a 	mov	r7,r3
 10039cc:	a009883a 	mov	r4,r20
 10039d0:	a80b883a 	mov	r5,r21
 10039d4:	100d883a 	mov	r6,r2
 10039d8:	1009f140 	call	1009f14 <__ltdf2>
 10039dc:	1003fe16 	blt	r2,zero,10049d8 <_dtoa_r+0x14a8>
 10039e0:	b009883a 	mov	r4,r22
 10039e4:	1009f9c0 	call	1009f9c <__floatsidf>
 10039e8:	180b883a 	mov	r5,r3
 10039ec:	1009883a 	mov	r4,r2
 10039f0:	a00d883a 	mov	r6,r20
 10039f4:	a80f883a 	mov	r7,r21
 10039f8:	10096d80 	call	10096d8 <__muldf3>
 10039fc:	0011883a 	mov	r8,zero
 1003a00:	02500734 	movhi	r9,16412
 1003a04:	1009883a 	mov	r4,r2
 1003a08:	180b883a 	mov	r5,r3
 1003a0c:	480f883a 	mov	r7,r9
 1003a10:	400d883a 	mov	r6,r8
 1003a14:	10096640 	call	1009664 <__adddf3>
 1003a18:	d9000f17 	ldw	r4,60(sp)
 1003a1c:	102d883a 	mov	r22,r2
 1003a20:	00bf3034 	movhi	r2,64704
 1003a24:	18b9883a 	add	fp,r3,r2
 1003a28:	e02f883a 	mov	r23,fp
 1003a2c:	20028f1e 	bne	r4,zero,100446c <_dtoa_r+0xf3c>
 1003a30:	0005883a 	mov	r2,zero
 1003a34:	00d00534 	movhi	r3,16404
 1003a38:	a009883a 	mov	r4,r20
 1003a3c:	a80b883a 	mov	r5,r21
 1003a40:	180f883a 	mov	r7,r3
 1003a44:	100d883a 	mov	r6,r2
 1003a48:	10095e40 	call	10095e4 <__subdf3>
 1003a4c:	1009883a 	mov	r4,r2
 1003a50:	e00f883a 	mov	r7,fp
 1003a54:	180b883a 	mov	r5,r3
 1003a58:	b00d883a 	mov	r6,r22
 1003a5c:	1025883a 	mov	r18,r2
 1003a60:	1827883a 	mov	r19,r3
 1003a64:	1009e040 	call	1009e04 <__gtdf2>
 1003a68:	00834f16 	blt	zero,r2,10047a8 <_dtoa_r+0x1278>
 1003a6c:	e0e0003c 	xorhi	r3,fp,32768
 1003a70:	9009883a 	mov	r4,r18
 1003a74:	980b883a 	mov	r5,r19
 1003a78:	180f883a 	mov	r7,r3
 1003a7c:	b00d883a 	mov	r6,r22
 1003a80:	1009f140 	call	1009f14 <__ltdf2>
 1003a84:	1000080e 	bge	r2,zero,1003aa8 <_dtoa_r+0x578>
 1003a88:	0027883a 	mov	r19,zero
 1003a8c:	0025883a 	mov	r18,zero
 1003a90:	d8802617 	ldw	r2,152(sp)
 1003a94:	df000517 	ldw	fp,20(sp)
 1003a98:	d8000615 	stw	zero,24(sp)
 1003a9c:	0084303a 	nor	r2,zero,r2
 1003aa0:	d8800d15 	stw	r2,52(sp)
 1003aa4:	00019b06 	br	1004114 <_dtoa_r+0xbe4>
 1003aa8:	d9801217 	ldw	r6,72(sp)
 1003aac:	d8801317 	ldw	r2,76(sp)
 1003ab0:	3029883a 	mov	r20,r6
 1003ab4:	102b883a 	mov	r21,r2
 1003ab8:	d8c00217 	ldw	r3,8(sp)
 1003abc:	18008516 	blt	r3,zero,1003cd4 <_dtoa_r+0x7a4>
 1003ac0:	d9000d17 	ldw	r4,52(sp)
 1003ac4:	00800384 	movi	r2,14
 1003ac8:	11008216 	blt	r2,r4,1003cd4 <_dtoa_r+0x7a4>
 1003acc:	200490fa 	slli	r2,r4,3
 1003ad0:	d9802617 	ldw	r6,152(sp)
 1003ad4:	00c04074 	movhi	r3,257
 1003ad8:	18ca0e04 	addi	r3,r3,10296
 1003adc:	10c5883a 	add	r2,r2,r3
 1003ae0:	14800017 	ldw	r18,0(r2)
 1003ae4:	14c00117 	ldw	r19,4(r2)
 1003ae8:	30031e16 	blt	r6,zero,1004764 <_dtoa_r+0x1234>
 1003aec:	d9000517 	ldw	r4,20(sp)
 1003af0:	d8c00f17 	ldw	r3,60(sp)
 1003af4:	a823883a 	mov	r17,r21
 1003af8:	a021883a 	mov	r16,r20
 1003afc:	192b883a 	add	r21,r3,r4
 1003b00:	2039883a 	mov	fp,r4
 1003b04:	00000f06 	br	1003b44 <_dtoa_r+0x614>
 1003b08:	0005883a 	mov	r2,zero
 1003b0c:	00d00934 	movhi	r3,16420
 1003b10:	5009883a 	mov	r4,r10
 1003b14:	580b883a 	mov	r5,r11
 1003b18:	180f883a 	mov	r7,r3
 1003b1c:	100d883a 	mov	r6,r2
 1003b20:	10096d80 	call	10096d8 <__muldf3>
 1003b24:	180b883a 	mov	r5,r3
 1003b28:	000d883a 	mov	r6,zero
 1003b2c:	000f883a 	mov	r7,zero
 1003b30:	1009883a 	mov	r4,r2
 1003b34:	1021883a 	mov	r16,r2
 1003b38:	1823883a 	mov	r17,r3
 1003b3c:	1009d7c0 	call	1009d7c <__nedf2>
 1003b40:	10004526 	beq	r2,zero,1003c58 <_dtoa_r+0x728>
 1003b44:	900d883a 	mov	r6,r18
 1003b48:	980f883a 	mov	r7,r19
 1003b4c:	8009883a 	mov	r4,r16
 1003b50:	880b883a 	mov	r5,r17
 1003b54:	1009a9c0 	call	1009a9c <__divdf3>
 1003b58:	180b883a 	mov	r5,r3
 1003b5c:	1009883a 	mov	r4,r2
 1003b60:	100a0940 	call	100a094 <__fixdfsi>
 1003b64:	1009883a 	mov	r4,r2
 1003b68:	1029883a 	mov	r20,r2
 1003b6c:	1009f9c0 	call	1009f9c <__floatsidf>
 1003b70:	180f883a 	mov	r7,r3
 1003b74:	9009883a 	mov	r4,r18
 1003b78:	980b883a 	mov	r5,r19
 1003b7c:	100d883a 	mov	r6,r2
 1003b80:	10096d80 	call	10096d8 <__muldf3>
 1003b84:	180f883a 	mov	r7,r3
 1003b88:	880b883a 	mov	r5,r17
 1003b8c:	8009883a 	mov	r4,r16
 1003b90:	100d883a 	mov	r6,r2
 1003b94:	10095e40 	call	10095e4 <__subdf3>
 1003b98:	1015883a 	mov	r10,r2
 1003b9c:	a0800c04 	addi	r2,r20,48
 1003ba0:	e0800005 	stb	r2,0(fp)
 1003ba4:	e7000044 	addi	fp,fp,1
 1003ba8:	1817883a 	mov	r11,r3
 1003bac:	e57fd61e 	bne	fp,r21,1003b08 <_dtoa_r+0x5d8>
 1003bb0:	500d883a 	mov	r6,r10
 1003bb4:	180f883a 	mov	r7,r3
 1003bb8:	5009883a 	mov	r4,r10
 1003bbc:	180b883a 	mov	r5,r3
 1003bc0:	10096640 	call	1009664 <__adddf3>
 1003bc4:	100d883a 	mov	r6,r2
 1003bc8:	9009883a 	mov	r4,r18
 1003bcc:	980b883a 	mov	r5,r19
 1003bd0:	180f883a 	mov	r7,r3
 1003bd4:	1021883a 	mov	r16,r2
 1003bd8:	1823883a 	mov	r17,r3
 1003bdc:	1009f140 	call	1009f14 <__ltdf2>
 1003be0:	10000816 	blt	r2,zero,1003c04 <_dtoa_r+0x6d4>
 1003be4:	980b883a 	mov	r5,r19
 1003be8:	800d883a 	mov	r6,r16
 1003bec:	880f883a 	mov	r7,r17
 1003bf0:	9009883a 	mov	r4,r18
 1003bf4:	1009cf40 	call	1009cf4 <__eqdf2>
 1003bf8:	1000171e 	bne	r2,zero,1003c58 <_dtoa_r+0x728>
 1003bfc:	a080004c 	andi	r2,r20,1
 1003c00:	10001526 	beq	r2,zero,1003c58 <_dtoa_r+0x728>
 1003c04:	d8800d17 	ldw	r2,52(sp)
 1003c08:	d8800415 	stw	r2,16(sp)
 1003c0c:	e009883a 	mov	r4,fp
 1003c10:	213fffc4 	addi	r4,r4,-1
 1003c14:	20c00007 	ldb	r3,0(r4)
 1003c18:	00800e44 	movi	r2,57
 1003c1c:	1880081e 	bne	r3,r2,1003c40 <_dtoa_r+0x710>
 1003c20:	d8800517 	ldw	r2,20(sp)
 1003c24:	113ffa1e 	bne	r2,r4,1003c10 <_dtoa_r+0x6e0>
 1003c28:	d8c00417 	ldw	r3,16(sp)
 1003c2c:	d9800517 	ldw	r6,20(sp)
 1003c30:	00800c04 	movi	r2,48
 1003c34:	18c00044 	addi	r3,r3,1
 1003c38:	d8c00415 	stw	r3,16(sp)
 1003c3c:	30800005 	stb	r2,0(r6)
 1003c40:	20800003 	ldbu	r2,0(r4)
 1003c44:	d8c00417 	ldw	r3,16(sp)
 1003c48:	27000044 	addi	fp,r4,1
 1003c4c:	10800044 	addi	r2,r2,1
 1003c50:	d8c00d15 	stw	r3,52(sp)
 1003c54:	20800005 	stb	r2,0(r4)
 1003c58:	d9001617 	ldw	r4,88(sp)
 1003c5c:	d9400717 	ldw	r5,28(sp)
 1003c60:	10066f80 	call	10066f8 <_Bfree>
 1003c64:	e0000005 	stb	zero,0(fp)
 1003c68:	d9800d17 	ldw	r6,52(sp)
 1003c6c:	d8c02717 	ldw	r3,156(sp)
 1003c70:	d9002917 	ldw	r4,164(sp)
 1003c74:	30800044 	addi	r2,r6,1
 1003c78:	18800015 	stw	r2,0(r3)
 1003c7c:	20029c26 	beq	r4,zero,10046f0 <_dtoa_r+0x11c0>
 1003c80:	d8c00517 	ldw	r3,20(sp)
 1003c84:	27000015 	stw	fp,0(r4)
 1003c88:	003e5d06 	br	1003600 <_dtoa_r+0xd0>
 1003c8c:	d9800d17 	ldw	r6,52(sp)
 1003c90:	00c04074 	movhi	r3,257
 1003c94:	18ca0e04 	addi	r3,r3,10296
 1003c98:	d9001217 	ldw	r4,72(sp)
 1003c9c:	300490fa 	slli	r2,r6,3
 1003ca0:	d9401317 	ldw	r5,76(sp)
 1003ca4:	10c5883a 	add	r2,r2,r3
 1003ca8:	12000017 	ldw	r8,0(r2)
 1003cac:	12400117 	ldw	r9,4(r2)
 1003cb0:	400d883a 	mov	r6,r8
 1003cb4:	480f883a 	mov	r7,r9
 1003cb8:	1009f140 	call	1009f14 <__ltdf2>
 1003cbc:	1000030e 	bge	r2,zero,1003ccc <_dtoa_r+0x79c>
 1003cc0:	d8800d17 	ldw	r2,52(sp)
 1003cc4:	10bfffc4 	addi	r2,r2,-1
 1003cc8:	d8800d15 	stw	r2,52(sp)
 1003ccc:	d8000c15 	stw	zero,48(sp)
 1003cd0:	003ea806 	br	1003774 <_dtoa_r+0x244>
 1003cd4:	d9000b17 	ldw	r4,44(sp)
 1003cd8:	202cc03a 	cmpne	r22,r4,zero
 1003cdc:	b000c71e 	bne	r22,zero,1003ffc <_dtoa_r+0xacc>
 1003ce0:	dc001117 	ldw	r16,68(sp)
 1003ce4:	dc801017 	ldw	r18,64(sp)
 1003ce8:	0027883a 	mov	r19,zero
 1003cec:	04000b0e 	bge	zero,r16,1003d1c <_dtoa_r+0x7ec>
 1003cf0:	d8c00a17 	ldw	r3,40(sp)
 1003cf4:	00c0090e 	bge	zero,r3,1003d1c <_dtoa_r+0x7ec>
 1003cf8:	8005883a 	mov	r2,r16
 1003cfc:	1c011316 	blt	r3,r16,100414c <_dtoa_r+0xc1c>
 1003d00:	d9000a17 	ldw	r4,40(sp)
 1003d04:	d9801117 	ldw	r6,68(sp)
 1003d08:	80a1c83a 	sub	r16,r16,r2
 1003d0c:	2089c83a 	sub	r4,r4,r2
 1003d10:	308dc83a 	sub	r6,r6,r2
 1003d14:	d9000a15 	stw	r4,40(sp)
 1003d18:	d9801115 	stw	r6,68(sp)
 1003d1c:	d8801017 	ldw	r2,64(sp)
 1003d20:	0080150e 	bge	zero,r2,1003d78 <_dtoa_r+0x848>
 1003d24:	d8c00b17 	ldw	r3,44(sp)
 1003d28:	1805003a 	cmpeq	r2,r3,zero
 1003d2c:	1001c91e 	bne	r2,zero,1004454 <_dtoa_r+0xf24>
 1003d30:	04800e0e 	bge	zero,r18,1003d6c <_dtoa_r+0x83c>
 1003d34:	d9001617 	ldw	r4,88(sp)
 1003d38:	980b883a 	mov	r5,r19
 1003d3c:	900d883a 	mov	r6,r18
 1003d40:	10075440 	call	1007544 <__pow5mult>
 1003d44:	d9001617 	ldw	r4,88(sp)
 1003d48:	d9800717 	ldw	r6,28(sp)
 1003d4c:	100b883a 	mov	r5,r2
 1003d50:	1027883a 	mov	r19,r2
 1003d54:	10071880 	call	1007188 <__multiply>
 1003d58:	d9001617 	ldw	r4,88(sp)
 1003d5c:	d9400717 	ldw	r5,28(sp)
 1003d60:	1023883a 	mov	r17,r2
 1003d64:	10066f80 	call	10066f8 <_Bfree>
 1003d68:	dc400715 	stw	r17,28(sp)
 1003d6c:	d9001017 	ldw	r4,64(sp)
 1003d70:	248dc83a 	sub	r6,r4,r18
 1003d74:	30010e1e 	bne	r6,zero,10041b0 <_dtoa_r+0xc80>
 1003d78:	d9001617 	ldw	r4,88(sp)
 1003d7c:	04400044 	movi	r17,1
 1003d80:	880b883a 	mov	r5,r17
 1003d84:	10073dc0 	call	10073dc <__i2b>
 1003d88:	d9800917 	ldw	r6,36(sp)
 1003d8c:	1025883a 	mov	r18,r2
 1003d90:	0180040e 	bge	zero,r6,1003da4 <_dtoa_r+0x874>
 1003d94:	d9001617 	ldw	r4,88(sp)
 1003d98:	100b883a 	mov	r5,r2
 1003d9c:	10075440 	call	1007544 <__pow5mult>
 1003da0:	1025883a 	mov	r18,r2
 1003da4:	d8801717 	ldw	r2,92(sp)
 1003da8:	8880f30e 	bge	r17,r2,1004178 <_dtoa_r+0xc48>
 1003dac:	0023883a 	mov	r17,zero
 1003db0:	d9800917 	ldw	r6,36(sp)
 1003db4:	30019e1e 	bne	r6,zero,1004430 <_dtoa_r+0xf00>
 1003db8:	00c00044 	movi	r3,1
 1003dbc:	d9000a17 	ldw	r4,40(sp)
 1003dc0:	20c5883a 	add	r2,r4,r3
 1003dc4:	10c007cc 	andi	r3,r2,31
 1003dc8:	1800841e 	bne	r3,zero,1003fdc <_dtoa_r+0xaac>
 1003dcc:	00800704 	movi	r2,28
 1003dd0:	d9000a17 	ldw	r4,40(sp)
 1003dd4:	d9801117 	ldw	r6,68(sp)
 1003dd8:	80a1883a 	add	r16,r16,r2
 1003ddc:	2089883a 	add	r4,r4,r2
 1003de0:	308d883a 	add	r6,r6,r2
 1003de4:	d9000a15 	stw	r4,40(sp)
 1003de8:	d9801115 	stw	r6,68(sp)
 1003dec:	d8801117 	ldw	r2,68(sp)
 1003df0:	0080050e 	bge	zero,r2,1003e08 <_dtoa_r+0x8d8>
 1003df4:	d9400717 	ldw	r5,28(sp)
 1003df8:	d9001617 	ldw	r4,88(sp)
 1003dfc:	100d883a 	mov	r6,r2
 1003e00:	100703c0 	call	100703c <__lshift>
 1003e04:	d8800715 	stw	r2,28(sp)
 1003e08:	d8c00a17 	ldw	r3,40(sp)
 1003e0c:	00c0050e 	bge	zero,r3,1003e24 <_dtoa_r+0x8f4>
 1003e10:	d9001617 	ldw	r4,88(sp)
 1003e14:	900b883a 	mov	r5,r18
 1003e18:	180d883a 	mov	r6,r3
 1003e1c:	100703c0 	call	100703c <__lshift>
 1003e20:	1025883a 	mov	r18,r2
 1003e24:	d9000c17 	ldw	r4,48(sp)
 1003e28:	2005003a 	cmpeq	r2,r4,zero
 1003e2c:	10016f26 	beq	r2,zero,10043ec <_dtoa_r+0xebc>
 1003e30:	d9000f17 	ldw	r4,60(sp)
 1003e34:	0102170e 	bge	zero,r4,1004694 <_dtoa_r+0x1164>
 1003e38:	d9800b17 	ldw	r6,44(sp)
 1003e3c:	3005003a 	cmpeq	r2,r6,zero
 1003e40:	1000881e 	bne	r2,zero,1004064 <_dtoa_r+0xb34>
 1003e44:	0400050e 	bge	zero,r16,1003e5c <_dtoa_r+0x92c>
 1003e48:	d9001617 	ldw	r4,88(sp)
 1003e4c:	980b883a 	mov	r5,r19
 1003e50:	800d883a 	mov	r6,r16
 1003e54:	100703c0 	call	100703c <__lshift>
 1003e58:	1027883a 	mov	r19,r2
 1003e5c:	8804c03a 	cmpne	r2,r17,zero
 1003e60:	1002541e 	bne	r2,zero,10047b4 <_dtoa_r+0x1284>
 1003e64:	980b883a 	mov	r5,r19
 1003e68:	dd800517 	ldw	r22,20(sp)
 1003e6c:	dcc00615 	stw	r19,24(sp)
 1003e70:	a700004c 	andi	fp,r20,1
 1003e74:	2827883a 	mov	r19,r5
 1003e78:	d9000717 	ldw	r4,28(sp)
 1003e7c:	900b883a 	mov	r5,r18
 1003e80:	10032ec0 	call	10032ec <quorem>
 1003e84:	d9000717 	ldw	r4,28(sp)
 1003e88:	d9400617 	ldw	r5,24(sp)
 1003e8c:	1023883a 	mov	r17,r2
 1003e90:	8dc00c04 	addi	r23,r17,48
 1003e94:	10068540 	call	1006854 <__mcmp>
 1003e98:	d9001617 	ldw	r4,88(sp)
 1003e9c:	900b883a 	mov	r5,r18
 1003ea0:	980d883a 	mov	r6,r19
 1003ea4:	1029883a 	mov	r20,r2
 1003ea8:	1006eb00 	call	1006eb0 <__mdiff>
 1003eac:	102b883a 	mov	r21,r2
 1003eb0:	10800317 	ldw	r2,12(r2)
 1003eb4:	1001281e 	bne	r2,zero,1004358 <_dtoa_r+0xe28>
 1003eb8:	d9000717 	ldw	r4,28(sp)
 1003ebc:	a80b883a 	mov	r5,r21
 1003ec0:	10068540 	call	1006854 <__mcmp>
 1003ec4:	d9001617 	ldw	r4,88(sp)
 1003ec8:	1021883a 	mov	r16,r2
 1003ecc:	a80b883a 	mov	r5,r21
 1003ed0:	10066f80 	call	10066f8 <_Bfree>
 1003ed4:	8000041e 	bne	r16,zero,1003ee8 <_dtoa_r+0x9b8>
 1003ed8:	d8801717 	ldw	r2,92(sp)
 1003edc:	1000021e 	bne	r2,zero,1003ee8 <_dtoa_r+0x9b8>
 1003ee0:	e004c03a 	cmpne	r2,fp,zero
 1003ee4:	10011726 	beq	r2,zero,1004344 <_dtoa_r+0xe14>
 1003ee8:	a0010616 	blt	r20,zero,1004304 <_dtoa_r+0xdd4>
 1003eec:	a000041e 	bne	r20,zero,1003f00 <_dtoa_r+0x9d0>
 1003ef0:	d8c01717 	ldw	r3,92(sp)
 1003ef4:	1800021e 	bne	r3,zero,1003f00 <_dtoa_r+0x9d0>
 1003ef8:	e004c03a 	cmpne	r2,fp,zero
 1003efc:	10010126 	beq	r2,zero,1004304 <_dtoa_r+0xdd4>
 1003f00:	04023d16 	blt	zero,r16,10047f8 <_dtoa_r+0x12c8>
 1003f04:	b5c00005 	stb	r23,0(r22)
 1003f08:	d9800517 	ldw	r6,20(sp)
 1003f0c:	d9000f17 	ldw	r4,60(sp)
 1003f10:	b5800044 	addi	r22,r22,1
 1003f14:	3105883a 	add	r2,r6,r4
 1003f18:	b0806526 	beq	r22,r2,10040b0 <_dtoa_r+0xb80>
 1003f1c:	d9400717 	ldw	r5,28(sp)
 1003f20:	d9001617 	ldw	r4,88(sp)
 1003f24:	01800284 	movi	r6,10
 1003f28:	000f883a 	mov	r7,zero
 1003f2c:	10074180 	call	1007418 <__multadd>
 1003f30:	d8800715 	stw	r2,28(sp)
 1003f34:	d8800617 	ldw	r2,24(sp)
 1003f38:	14c10c26 	beq	r2,r19,100436c <_dtoa_r+0xe3c>
 1003f3c:	d9400617 	ldw	r5,24(sp)
 1003f40:	d9001617 	ldw	r4,88(sp)
 1003f44:	01800284 	movi	r6,10
 1003f48:	000f883a 	mov	r7,zero
 1003f4c:	10074180 	call	1007418 <__multadd>
 1003f50:	d9001617 	ldw	r4,88(sp)
 1003f54:	980b883a 	mov	r5,r19
 1003f58:	01800284 	movi	r6,10
 1003f5c:	000f883a 	mov	r7,zero
 1003f60:	d8800615 	stw	r2,24(sp)
 1003f64:	10074180 	call	1007418 <__multadd>
 1003f68:	1027883a 	mov	r19,r2
 1003f6c:	003fc206 	br	1003e78 <_dtoa_r+0x948>
 1003f70:	2445c83a 	sub	r2,r4,r17
 1003f74:	a088983a 	sll	r4,r20,r2
 1003f78:	003e4b06 	br	10038a8 <_dtoa_r+0x378>
 1003f7c:	01bfffc4 	movi	r6,-1
 1003f80:	00800044 	movi	r2,1
 1003f84:	d9800e15 	stw	r6,56(sp)
 1003f88:	d9800f15 	stw	r6,60(sp)
 1003f8c:	d8800b15 	stw	r2,44(sp)
 1003f90:	d8c01617 	ldw	r3,88(sp)
 1003f94:	008005c4 	movi	r2,23
 1003f98:	18001115 	stw	zero,68(r3)
 1003f9c:	1580082e 	bgeu	r2,r22,1003fc0 <_dtoa_r+0xa90>
 1003fa0:	00c00104 	movi	r3,4
 1003fa4:	0009883a 	mov	r4,zero
 1003fa8:	18c7883a 	add	r3,r3,r3
 1003fac:	18800504 	addi	r2,r3,20
 1003fb0:	21000044 	addi	r4,r4,1
 1003fb4:	b0bffc2e 	bgeu	r22,r2,1003fa8 <_dtoa_r+0xa78>
 1003fb8:	d9801617 	ldw	r6,88(sp)
 1003fbc:	31001115 	stw	r4,68(r6)
 1003fc0:	dc000f17 	ldw	r16,60(sp)
 1003fc4:	003e4b06 	br	10038f4 <_dtoa_r+0x3c4>
 1003fc8:	d9801717 	ldw	r6,92(sp)
 1003fcc:	0023883a 	mov	r17,zero
 1003fd0:	31bfff04 	addi	r6,r6,-4
 1003fd4:	d9801715 	stw	r6,92(sp)
 1003fd8:	003df806 	br	10037bc <_dtoa_r+0x28c>
 1003fdc:	00800804 	movi	r2,32
 1003fe0:	10c9c83a 	sub	r4,r2,r3
 1003fe4:	00c00104 	movi	r3,4
 1003fe8:	19005a16 	blt	r3,r4,1004154 <_dtoa_r+0xc24>
 1003fec:	008000c4 	movi	r2,3
 1003ff0:	113f7e16 	blt	r2,r4,1003dec <_dtoa_r+0x8bc>
 1003ff4:	20800704 	addi	r2,r4,28
 1003ff8:	003f7506 	br	1003dd0 <_dtoa_r+0x8a0>
 1003ffc:	d9801717 	ldw	r6,92(sp)
 1004000:	00800044 	movi	r2,1
 1004004:	1180a10e 	bge	r2,r6,100428c <_dtoa_r+0xd5c>
 1004008:	d9800f17 	ldw	r6,60(sp)
 100400c:	d8c01017 	ldw	r3,64(sp)
 1004010:	30bfffc4 	addi	r2,r6,-1
 1004014:	1881c616 	blt	r3,r2,1004730 <_dtoa_r+0x1200>
 1004018:	18a5c83a 	sub	r18,r3,r2
 100401c:	d8800f17 	ldw	r2,60(sp)
 1004020:	10026216 	blt	r2,zero,10049ac <_dtoa_r+0x147c>
 1004024:	dc001117 	ldw	r16,68(sp)
 1004028:	1007883a 	mov	r3,r2
 100402c:	d9800a17 	ldw	r6,40(sp)
 1004030:	d8801117 	ldw	r2,68(sp)
 1004034:	d9001617 	ldw	r4,88(sp)
 1004038:	30cd883a 	add	r6,r6,r3
 100403c:	10c5883a 	add	r2,r2,r3
 1004040:	01400044 	movi	r5,1
 1004044:	d9800a15 	stw	r6,40(sp)
 1004048:	d8801115 	stw	r2,68(sp)
 100404c:	10073dc0 	call	10073dc <__i2b>
 1004050:	1027883a 	mov	r19,r2
 1004054:	003f2506 	br	1003cec <_dtoa_r+0x7bc>
 1004058:	00c04074 	movhi	r3,257
 100405c:	18c9f004 	addi	r3,r3,10176
 1004060:	003d6706 	br	1003600 <_dtoa_r+0xd0>
 1004064:	dd800517 	ldw	r22,20(sp)
 1004068:	04000044 	movi	r16,1
 100406c:	00000706 	br	100408c <_dtoa_r+0xb5c>
 1004070:	d9400717 	ldw	r5,28(sp)
 1004074:	d9001617 	ldw	r4,88(sp)
 1004078:	01800284 	movi	r6,10
 100407c:	000f883a 	mov	r7,zero
 1004080:	10074180 	call	1007418 <__multadd>
 1004084:	d8800715 	stw	r2,28(sp)
 1004088:	84000044 	addi	r16,r16,1
 100408c:	d9000717 	ldw	r4,28(sp)
 1004090:	900b883a 	mov	r5,r18
 1004094:	10032ec0 	call	10032ec <quorem>
 1004098:	15c00c04 	addi	r23,r2,48
 100409c:	b5c00005 	stb	r23,0(r22)
 10040a0:	d8c00f17 	ldw	r3,60(sp)
 10040a4:	b5800044 	addi	r22,r22,1
 10040a8:	80fff116 	blt	r16,r3,1004070 <_dtoa_r+0xb40>
 10040ac:	d8000615 	stw	zero,24(sp)
 10040b0:	d9400717 	ldw	r5,28(sp)
 10040b4:	d9001617 	ldw	r4,88(sp)
 10040b8:	01800044 	movi	r6,1
 10040bc:	100703c0 	call	100703c <__lshift>
 10040c0:	1009883a 	mov	r4,r2
 10040c4:	900b883a 	mov	r5,r18
 10040c8:	d8800715 	stw	r2,28(sp)
 10040cc:	10068540 	call	1006854 <__mcmp>
 10040d0:	00803c0e 	bge	zero,r2,10041c4 <_dtoa_r+0xc94>
 10040d4:	b009883a 	mov	r4,r22
 10040d8:	213fffc4 	addi	r4,r4,-1
 10040dc:	21400003 	ldbu	r5,0(r4)
 10040e0:	00800e44 	movi	r2,57
 10040e4:	28c03fcc 	andi	r3,r5,255
 10040e8:	18c0201c 	xori	r3,r3,128
 10040ec:	18ffe004 	addi	r3,r3,-128
 10040f0:	1881981e 	bne	r3,r2,1004754 <_dtoa_r+0x1224>
 10040f4:	d9800517 	ldw	r6,20(sp)
 10040f8:	21bff71e 	bne	r4,r6,10040d8 <_dtoa_r+0xba8>
 10040fc:	d8800d17 	ldw	r2,52(sp)
 1004100:	37000044 	addi	fp,r6,1
 1004104:	10800044 	addi	r2,r2,1
 1004108:	d8800d15 	stw	r2,52(sp)
 100410c:	00800c44 	movi	r2,49
 1004110:	30800005 	stb	r2,0(r6)
 1004114:	d9001617 	ldw	r4,88(sp)
 1004118:	900b883a 	mov	r5,r18
 100411c:	10066f80 	call	10066f8 <_Bfree>
 1004120:	983ecd26 	beq	r19,zero,1003c58 <_dtoa_r+0x728>
 1004124:	d8c00617 	ldw	r3,24(sp)
 1004128:	18000426 	beq	r3,zero,100413c <_dtoa_r+0xc0c>
 100412c:	1cc00326 	beq	r3,r19,100413c <_dtoa_r+0xc0c>
 1004130:	d9001617 	ldw	r4,88(sp)
 1004134:	180b883a 	mov	r5,r3
 1004138:	10066f80 	call	10066f8 <_Bfree>
 100413c:	d9001617 	ldw	r4,88(sp)
 1004140:	980b883a 	mov	r5,r19
 1004144:	10066f80 	call	10066f8 <_Bfree>
 1004148:	003ec306 	br	1003c58 <_dtoa_r+0x728>
 100414c:	1805883a 	mov	r2,r3
 1004150:	003eeb06 	br	1003d00 <_dtoa_r+0x7d0>
 1004154:	d9800a17 	ldw	r6,40(sp)
 1004158:	d8c01117 	ldw	r3,68(sp)
 100415c:	20bfff04 	addi	r2,r4,-4
 1004160:	308d883a 	add	r6,r6,r2
 1004164:	1887883a 	add	r3,r3,r2
 1004168:	80a1883a 	add	r16,r16,r2
 100416c:	d9800a15 	stw	r6,40(sp)
 1004170:	d8c01115 	stw	r3,68(sp)
 1004174:	003f1d06 	br	1003dec <_dtoa_r+0x8bc>
 1004178:	a03f0c1e 	bne	r20,zero,1003dac <_dtoa_r+0x87c>
 100417c:	00800434 	movhi	r2,16
 1004180:	10bfffc4 	addi	r2,r2,-1
 1004184:	a884703a 	and	r2,r21,r2
 1004188:	103f081e 	bne	r2,zero,1003dac <_dtoa_r+0x87c>
 100418c:	a89ffc2c 	andhi	r2,r21,32752
 1004190:	103f0626 	beq	r2,zero,1003dac <_dtoa_r+0x87c>
 1004194:	d8c01117 	ldw	r3,68(sp)
 1004198:	d9000a17 	ldw	r4,40(sp)
 100419c:	18c00044 	addi	r3,r3,1
 10041a0:	21000044 	addi	r4,r4,1
 10041a4:	d8c01115 	stw	r3,68(sp)
 10041a8:	d9000a15 	stw	r4,40(sp)
 10041ac:	003f0006 	br	1003db0 <_dtoa_r+0x880>
 10041b0:	d9400717 	ldw	r5,28(sp)
 10041b4:	d9001617 	ldw	r4,88(sp)
 10041b8:	10075440 	call	1007544 <__pow5mult>
 10041bc:	d8800715 	stw	r2,28(sp)
 10041c0:	003eed06 	br	1003d78 <_dtoa_r+0x848>
 10041c4:	1000021e 	bne	r2,zero,10041d0 <_dtoa_r+0xca0>
 10041c8:	b880004c 	andi	r2,r23,1
 10041cc:	103fc11e 	bne	r2,zero,10040d4 <_dtoa_r+0xba4>
 10041d0:	b5bfffc4 	addi	r22,r22,-1
 10041d4:	b0c00007 	ldb	r3,0(r22)
 10041d8:	00800c04 	movi	r2,48
 10041dc:	18bffc26 	beq	r3,r2,10041d0 <_dtoa_r+0xca0>
 10041e0:	b7000044 	addi	fp,r22,1
 10041e4:	003fcb06 	br	1004114 <_dtoa_r+0xbe4>
 10041e8:	d9800d17 	ldw	r6,52(sp)
 10041ec:	018fc83a 	sub	r7,zero,r6
 10041f0:	3801f726 	beq	r7,zero,10049d0 <_dtoa_r+0x14a0>
 10041f4:	398003cc 	andi	r6,r7,15
 10041f8:	300c90fa 	slli	r6,r6,3
 10041fc:	01404074 	movhi	r5,257
 1004200:	294a0e04 	addi	r5,r5,10296
 1004204:	d9001217 	ldw	r4,72(sp)
 1004208:	314d883a 	add	r6,r6,r5
 100420c:	30c00117 	ldw	r3,4(r6)
 1004210:	30800017 	ldw	r2,0(r6)
 1004214:	d9401317 	ldw	r5,76(sp)
 1004218:	3821d13a 	srai	r16,r7,4
 100421c:	100d883a 	mov	r6,r2
 1004220:	180f883a 	mov	r7,r3
 1004224:	10096d80 	call	10096d8 <__muldf3>
 1004228:	1011883a 	mov	r8,r2
 100422c:	1813883a 	mov	r9,r3
 1004230:	1029883a 	mov	r20,r2
 1004234:	182b883a 	mov	r21,r3
 1004238:	8001e526 	beq	r16,zero,10049d0 <_dtoa_r+0x14a0>
 100423c:	05800084 	movi	r22,2
 1004240:	04404074 	movhi	r17,257
 1004244:	8c4a4004 	addi	r17,r17,10496
 1004248:	8080004c 	andi	r2,r16,1
 100424c:	1005003a 	cmpeq	r2,r2,zero
 1004250:	1000081e 	bne	r2,zero,1004274 <_dtoa_r+0xd44>
 1004254:	89800017 	ldw	r6,0(r17)
 1004258:	89c00117 	ldw	r7,4(r17)
 100425c:	480b883a 	mov	r5,r9
 1004260:	4009883a 	mov	r4,r8
 1004264:	10096d80 	call	10096d8 <__muldf3>
 1004268:	1011883a 	mov	r8,r2
 100426c:	b5800044 	addi	r22,r22,1
 1004270:	1813883a 	mov	r9,r3
 1004274:	8021d07a 	srai	r16,r16,1
 1004278:	8c400204 	addi	r17,r17,8
 100427c:	803ff21e 	bne	r16,zero,1004248 <_dtoa_r+0xd18>
 1004280:	4029883a 	mov	r20,r8
 1004284:	482b883a 	mov	r21,r9
 1004288:	003dca06 	br	10039b4 <_dtoa_r+0x484>
 100428c:	d9000817 	ldw	r4,32(sp)
 1004290:	2005003a 	cmpeq	r2,r4,zero
 1004294:	1001f61e 	bne	r2,zero,1004a70 <_dtoa_r+0x1540>
 1004298:	dc001117 	ldw	r16,68(sp)
 100429c:	dc801017 	ldw	r18,64(sp)
 10042a0:	18c10cc4 	addi	r3,r3,1075
 10042a4:	003f6106 	br	100402c <_dtoa_r+0xafc>
 10042a8:	d8000b15 	stw	zero,44(sp)
 10042ac:	d9802617 	ldw	r6,152(sp)
 10042b0:	d8c00d17 	ldw	r3,52(sp)
 10042b4:	30800044 	addi	r2,r6,1
 10042b8:	18ad883a 	add	r22,r3,r2
 10042bc:	b13fffc4 	addi	r4,r22,-1
 10042c0:	d9000e15 	stw	r4,56(sp)
 10042c4:	0581f60e 	bge	zero,r22,1004aa0 <_dtoa_r+0x1570>
 10042c8:	dd800f15 	stw	r22,60(sp)
 10042cc:	003f3006 	br	1003f90 <_dtoa_r+0xa60>
 10042d0:	d8000b15 	stw	zero,44(sp)
 10042d4:	d9002617 	ldw	r4,152(sp)
 10042d8:	0101eb0e 	bge	zero,r4,1004a88 <_dtoa_r+0x1558>
 10042dc:	202d883a 	mov	r22,r4
 10042e0:	d9000e15 	stw	r4,56(sp)
 10042e4:	d9000f15 	stw	r4,60(sp)
 10042e8:	003f2906 	br	1003f90 <_dtoa_r+0xa60>
 10042ec:	01800044 	movi	r6,1
 10042f0:	d9800b15 	stw	r6,44(sp)
 10042f4:	003ff706 	br	10042d4 <_dtoa_r+0xda4>
 10042f8:	01000044 	movi	r4,1
 10042fc:	d9000b15 	stw	r4,44(sp)
 1004300:	003fea06 	br	10042ac <_dtoa_r+0xd7c>
 1004304:	04000c0e 	bge	zero,r16,1004338 <_dtoa_r+0xe08>
 1004308:	d9400717 	ldw	r5,28(sp)
 100430c:	d9001617 	ldw	r4,88(sp)
 1004310:	01800044 	movi	r6,1
 1004314:	100703c0 	call	100703c <__lshift>
 1004318:	1009883a 	mov	r4,r2
 100431c:	900b883a 	mov	r5,r18
 1004320:	d8800715 	stw	r2,28(sp)
 1004324:	10068540 	call	1006854 <__mcmp>
 1004328:	0081e00e 	bge	zero,r2,1004aac <_dtoa_r+0x157c>
 100432c:	bdc00044 	addi	r23,r23,1
 1004330:	00800e84 	movi	r2,58
 1004334:	b881a226 	beq	r23,r2,10049c0 <_dtoa_r+0x1490>
 1004338:	b7000044 	addi	fp,r22,1
 100433c:	b5c00005 	stb	r23,0(r22)
 1004340:	003f7406 	br	1004114 <_dtoa_r+0xbe4>
 1004344:	00800e44 	movi	r2,57
 1004348:	b8819d26 	beq	r23,r2,10049c0 <_dtoa_r+0x1490>
 100434c:	053ffa0e 	bge	zero,r20,1004338 <_dtoa_r+0xe08>
 1004350:	8dc00c44 	addi	r23,r17,49
 1004354:	003ff806 	br	1004338 <_dtoa_r+0xe08>
 1004358:	d9001617 	ldw	r4,88(sp)
 100435c:	a80b883a 	mov	r5,r21
 1004360:	04000044 	movi	r16,1
 1004364:	10066f80 	call	10066f8 <_Bfree>
 1004368:	003edf06 	br	1003ee8 <_dtoa_r+0x9b8>
 100436c:	d9001617 	ldw	r4,88(sp)
 1004370:	980b883a 	mov	r5,r19
 1004374:	01800284 	movi	r6,10
 1004378:	000f883a 	mov	r7,zero
 100437c:	10074180 	call	1007418 <__multadd>
 1004380:	1027883a 	mov	r19,r2
 1004384:	d8800615 	stw	r2,24(sp)
 1004388:	003ebb06 	br	1003e78 <_dtoa_r+0x948>
 100438c:	d9801117 	ldw	r6,68(sp)
 1004390:	d8800d17 	ldw	r2,52(sp)
 1004394:	d8000915 	stw	zero,36(sp)
 1004398:	308dc83a 	sub	r6,r6,r2
 100439c:	0087c83a 	sub	r3,zero,r2
 10043a0:	d9801115 	stw	r6,68(sp)
 10043a4:	d8c01015 	stw	r3,64(sp)
 10043a8:	003cfe06 	br	10037a4 <_dtoa_r+0x274>
 10043ac:	018dc83a 	sub	r6,zero,r6
 10043b0:	d9801115 	stw	r6,68(sp)
 10043b4:	d8000a15 	stw	zero,40(sp)
 10043b8:	003cf306 	br	1003788 <_dtoa_r+0x258>
 10043bc:	d9000d17 	ldw	r4,52(sp)
 10043c0:	1009f9c0 	call	1009f9c <__floatsidf>
 10043c4:	880b883a 	mov	r5,r17
 10043c8:	8009883a 	mov	r4,r16
 10043cc:	180f883a 	mov	r7,r3
 10043d0:	100d883a 	mov	r6,r2
 10043d4:	1009d7c0 	call	1009d7c <__nedf2>
 10043d8:	103ce126 	beq	r2,zero,1003760 <_dtoa_r+0x230>
 10043dc:	d9800d17 	ldw	r6,52(sp)
 10043e0:	31bfffc4 	addi	r6,r6,-1
 10043e4:	d9800d15 	stw	r6,52(sp)
 10043e8:	003cdd06 	br	1003760 <_dtoa_r+0x230>
 10043ec:	d9000717 	ldw	r4,28(sp)
 10043f0:	900b883a 	mov	r5,r18
 10043f4:	10068540 	call	1006854 <__mcmp>
 10043f8:	103e8d0e 	bge	r2,zero,1003e30 <_dtoa_r+0x900>
 10043fc:	d9400717 	ldw	r5,28(sp)
 1004400:	d9001617 	ldw	r4,88(sp)
 1004404:	01800284 	movi	r6,10
 1004408:	000f883a 	mov	r7,zero
 100440c:	10074180 	call	1007418 <__multadd>
 1004410:	d9800d17 	ldw	r6,52(sp)
 1004414:	d8800715 	stw	r2,28(sp)
 1004418:	31bfffc4 	addi	r6,r6,-1
 100441c:	d9800d15 	stw	r6,52(sp)
 1004420:	b001a71e 	bne	r22,zero,1004ac0 <_dtoa_r+0x1590>
 1004424:	d8800e17 	ldw	r2,56(sp)
 1004428:	d8800f15 	stw	r2,60(sp)
 100442c:	003e8006 	br	1003e30 <_dtoa_r+0x900>
 1004430:	90800417 	ldw	r2,16(r18)
 1004434:	1085883a 	add	r2,r2,r2
 1004438:	1085883a 	add	r2,r2,r2
 100443c:	1485883a 	add	r2,r2,r18
 1004440:	11000417 	ldw	r4,16(r2)
 1004444:	10067200 	call	1006720 <__hi0bits>
 1004448:	00c00804 	movi	r3,32
 100444c:	1887c83a 	sub	r3,r3,r2
 1004450:	003e5a06 	br	1003dbc <_dtoa_r+0x88c>
 1004454:	d9400717 	ldw	r5,28(sp)
 1004458:	d9801017 	ldw	r6,64(sp)
 100445c:	d9001617 	ldw	r4,88(sp)
 1004460:	10075440 	call	1007544 <__pow5mult>
 1004464:	d8800715 	stw	r2,28(sp)
 1004468:	003e4306 	br	1003d78 <_dtoa_r+0x848>
 100446c:	d9800f17 	ldw	r6,60(sp)
 1004470:	d8800d17 	ldw	r2,52(sp)
 1004474:	d9800315 	stw	r6,12(sp)
 1004478:	d8800415 	stw	r2,16(sp)
 100447c:	d8c00b17 	ldw	r3,44(sp)
 1004480:	1805003a 	cmpeq	r2,r3,zero
 1004484:	1000e21e 	bne	r2,zero,1004810 <_dtoa_r+0x12e0>
 1004488:	d9000317 	ldw	r4,12(sp)
 100448c:	0005883a 	mov	r2,zero
 1004490:	00cff834 	movhi	r3,16352
 1004494:	200c90fa 	slli	r6,r4,3
 1004498:	01004074 	movhi	r4,257
 100449c:	210a0e04 	addi	r4,r4,10296
 10044a0:	180b883a 	mov	r5,r3
 10044a4:	310d883a 	add	r6,r6,r4
 10044a8:	327fff17 	ldw	r9,-4(r6)
 10044ac:	323ffe17 	ldw	r8,-8(r6)
 10044b0:	1009883a 	mov	r4,r2
 10044b4:	480f883a 	mov	r7,r9
 10044b8:	400d883a 	mov	r6,r8
 10044bc:	1009a9c0 	call	1009a9c <__divdf3>
 10044c0:	180b883a 	mov	r5,r3
 10044c4:	b00d883a 	mov	r6,r22
 10044c8:	b80f883a 	mov	r7,r23
 10044cc:	1009883a 	mov	r4,r2
 10044d0:	10095e40 	call	10095e4 <__subdf3>
 10044d4:	a80b883a 	mov	r5,r21
 10044d8:	a009883a 	mov	r4,r20
 10044dc:	d8c01915 	stw	r3,100(sp)
 10044e0:	d8801815 	stw	r2,96(sp)
 10044e4:	100a0940 	call	100a094 <__fixdfsi>
 10044e8:	1009883a 	mov	r4,r2
 10044ec:	1027883a 	mov	r19,r2
 10044f0:	1009f9c0 	call	1009f9c <__floatsidf>
 10044f4:	a80b883a 	mov	r5,r21
 10044f8:	a009883a 	mov	r4,r20
 10044fc:	180f883a 	mov	r7,r3
 1004500:	100d883a 	mov	r6,r2
 1004504:	10095e40 	call	10095e4 <__subdf3>
 1004508:	d9801817 	ldw	r6,96(sp)
 100450c:	1823883a 	mov	r17,r3
 1004510:	d8801415 	stw	r2,80(sp)
 1004514:	302d883a 	mov	r22,r6
 1004518:	d9800517 	ldw	r6,20(sp)
 100451c:	9cc00c04 	addi	r19,r19,48
 1004520:	dc401515 	stw	r17,84(sp)
 1004524:	d8c01917 	ldw	r3,100(sp)
 1004528:	34c00005 	stb	r19,0(r6)
 100452c:	d8800517 	ldw	r2,20(sp)
 1004530:	d9401917 	ldw	r5,100(sp)
 1004534:	d9801417 	ldw	r6,80(sp)
 1004538:	b009883a 	mov	r4,r22
 100453c:	880f883a 	mov	r7,r17
 1004540:	182f883a 	mov	r23,r3
 1004544:	17000044 	addi	fp,r2,1
 1004548:	1009e040 	call	1009e04 <__gtdf2>
 100454c:	00804e16 	blt	zero,r2,1004688 <_dtoa_r+0x1158>
 1004550:	d9801417 	ldw	r6,80(sp)
 1004554:	0005883a 	mov	r2,zero
 1004558:	00cffc34 	movhi	r3,16368
 100455c:	180b883a 	mov	r5,r3
 1004560:	880f883a 	mov	r7,r17
 1004564:	1009883a 	mov	r4,r2
 1004568:	10095e40 	call	10095e4 <__subdf3>
 100456c:	d9401917 	ldw	r5,100(sp)
 1004570:	180f883a 	mov	r7,r3
 1004574:	b009883a 	mov	r4,r22
 1004578:	100d883a 	mov	r6,r2
 100457c:	1009e040 	call	1009e04 <__gtdf2>
 1004580:	00bda216 	blt	zero,r2,1003c0c <_dtoa_r+0x6dc>
 1004584:	d8c00317 	ldw	r3,12(sp)
 1004588:	00800044 	movi	r2,1
 100458c:	10c01216 	blt	r2,r3,10045d8 <_dtoa_r+0x10a8>
 1004590:	003d4506 	br	1003aa8 <_dtoa_r+0x578>
 1004594:	d9801417 	ldw	r6,80(sp)
 1004598:	0005883a 	mov	r2,zero
 100459c:	00cffc34 	movhi	r3,16368
 10045a0:	180b883a 	mov	r5,r3
 10045a4:	880f883a 	mov	r7,r17
 10045a8:	1009883a 	mov	r4,r2
 10045ac:	10095e40 	call	10095e4 <__subdf3>
 10045b0:	d9c01b17 	ldw	r7,108(sp)
 10045b4:	180b883a 	mov	r5,r3
 10045b8:	1009883a 	mov	r4,r2
 10045bc:	b00d883a 	mov	r6,r22
 10045c0:	1009f140 	call	1009f14 <__ltdf2>
 10045c4:	103d9116 	blt	r2,zero,1003c0c <_dtoa_r+0x6dc>
 10045c8:	d9800517 	ldw	r6,20(sp)
 10045cc:	d9000317 	ldw	r4,12(sp)
 10045d0:	3105883a 	add	r2,r6,r4
 10045d4:	e0bd3426 	beq	fp,r2,1003aa8 <_dtoa_r+0x578>
 10045d8:	04500934 	movhi	r17,16420
 10045dc:	0021883a 	mov	r16,zero
 10045e0:	b80b883a 	mov	r5,r23
 10045e4:	b009883a 	mov	r4,r22
 10045e8:	800d883a 	mov	r6,r16
 10045ec:	880f883a 	mov	r7,r17
 10045f0:	10096d80 	call	10096d8 <__muldf3>
 10045f4:	d9401517 	ldw	r5,84(sp)
 10045f8:	d9001417 	ldw	r4,80(sp)
 10045fc:	880f883a 	mov	r7,r17
 1004600:	000d883a 	mov	r6,zero
 1004604:	d8801a15 	stw	r2,104(sp)
 1004608:	d8c01b15 	stw	r3,108(sp)
 100460c:	10096d80 	call	10096d8 <__muldf3>
 1004610:	180b883a 	mov	r5,r3
 1004614:	1009883a 	mov	r4,r2
 1004618:	1823883a 	mov	r17,r3
 100461c:	1021883a 	mov	r16,r2
 1004620:	100a0940 	call	100a094 <__fixdfsi>
 1004624:	1009883a 	mov	r4,r2
 1004628:	102b883a 	mov	r21,r2
 100462c:	1009f9c0 	call	1009f9c <__floatsidf>
 1004630:	880b883a 	mov	r5,r17
 1004634:	8009883a 	mov	r4,r16
 1004638:	180f883a 	mov	r7,r3
 100463c:	100d883a 	mov	r6,r2
 1004640:	10095e40 	call	10095e4 <__subdf3>
 1004644:	1021883a 	mov	r16,r2
 1004648:	d9001b17 	ldw	r4,108(sp)
 100464c:	1823883a 	mov	r17,r3
 1004650:	dc001415 	stw	r16,80(sp)
 1004654:	ad400c04 	addi	r21,r21,48
 1004658:	dc401515 	stw	r17,84(sp)
 100465c:	d8801a17 	ldw	r2,104(sp)
 1004660:	e5400005 	stb	r21,0(fp)
 1004664:	202f883a 	mov	r23,r4
 1004668:	d9c01b17 	ldw	r7,108(sp)
 100466c:	d9001417 	ldw	r4,80(sp)
 1004670:	880b883a 	mov	r5,r17
 1004674:	100d883a 	mov	r6,r2
 1004678:	102d883a 	mov	r22,r2
 100467c:	e7000044 	addi	fp,fp,1
 1004680:	1009f140 	call	1009f14 <__ltdf2>
 1004684:	103fc30e 	bge	r2,zero,1004594 <_dtoa_r+0x1064>
 1004688:	d9000417 	ldw	r4,16(sp)
 100468c:	d9000d15 	stw	r4,52(sp)
 1004690:	003d7106 	br	1003c58 <_dtoa_r+0x728>
 1004694:	d9801717 	ldw	r6,92(sp)
 1004698:	00800084 	movi	r2,2
 100469c:	11bde60e 	bge	r2,r6,1003e38 <_dtoa_r+0x908>
 10046a0:	203cfb1e 	bne	r4,zero,1003a90 <_dtoa_r+0x560>
 10046a4:	d9001617 	ldw	r4,88(sp)
 10046a8:	900b883a 	mov	r5,r18
 10046ac:	01800144 	movi	r6,5
 10046b0:	000f883a 	mov	r7,zero
 10046b4:	10074180 	call	1007418 <__multadd>
 10046b8:	d9000717 	ldw	r4,28(sp)
 10046bc:	100b883a 	mov	r5,r2
 10046c0:	1025883a 	mov	r18,r2
 10046c4:	10068540 	call	1006854 <__mcmp>
 10046c8:	00bcf10e 	bge	zero,r2,1003a90 <_dtoa_r+0x560>
 10046cc:	d8c00d17 	ldw	r3,52(sp)
 10046d0:	d9000517 	ldw	r4,20(sp)
 10046d4:	d8000615 	stw	zero,24(sp)
 10046d8:	18c00044 	addi	r3,r3,1
 10046dc:	d8c00d15 	stw	r3,52(sp)
 10046e0:	00800c44 	movi	r2,49
 10046e4:	27000044 	addi	fp,r4,1
 10046e8:	20800005 	stb	r2,0(r4)
 10046ec:	003e8906 	br	1004114 <_dtoa_r+0xbe4>
 10046f0:	d8c00517 	ldw	r3,20(sp)
 10046f4:	003bc206 	br	1003600 <_dtoa_r+0xd0>
 10046f8:	01804074 	movhi	r6,257
 10046fc:	318a4004 	addi	r6,r6,10496
 1004700:	30c00917 	ldw	r3,36(r6)
 1004704:	30800817 	ldw	r2,32(r6)
 1004708:	d9001217 	ldw	r4,72(sp)
 100470c:	d9401317 	ldw	r5,76(sp)
 1004710:	180f883a 	mov	r7,r3
 1004714:	100d883a 	mov	r6,r2
 1004718:	1009a9c0 	call	1009a9c <__divdf3>
 100471c:	948003cc 	andi	r18,r18,15
 1004720:	058000c4 	movi	r22,3
 1004724:	1029883a 	mov	r20,r2
 1004728:	182b883a 	mov	r21,r3
 100472c:	003c8906 	br	1003954 <_dtoa_r+0x424>
 1004730:	d9001017 	ldw	r4,64(sp)
 1004734:	d9800917 	ldw	r6,36(sp)
 1004738:	0025883a 	mov	r18,zero
 100473c:	1105c83a 	sub	r2,r2,r4
 1004740:	2089883a 	add	r4,r4,r2
 1004744:	308d883a 	add	r6,r6,r2
 1004748:	d9001015 	stw	r4,64(sp)
 100474c:	d9800915 	stw	r6,36(sp)
 1004750:	003e3206 	br	100401c <_dtoa_r+0xaec>
 1004754:	28800044 	addi	r2,r5,1
 1004758:	27000044 	addi	fp,r4,1
 100475c:	20800005 	stb	r2,0(r4)
 1004760:	003e6c06 	br	1004114 <_dtoa_r+0xbe4>
 1004764:	d8800f17 	ldw	r2,60(sp)
 1004768:	00bce016 	blt	zero,r2,1003aec <_dtoa_r+0x5bc>
 100476c:	d9800f17 	ldw	r6,60(sp)
 1004770:	303cc51e 	bne	r6,zero,1003a88 <_dtoa_r+0x558>
 1004774:	0005883a 	mov	r2,zero
 1004778:	00d00534 	movhi	r3,16404
 100477c:	980b883a 	mov	r5,r19
 1004780:	180f883a 	mov	r7,r3
 1004784:	9009883a 	mov	r4,r18
 1004788:	100d883a 	mov	r6,r2
 100478c:	10096d80 	call	10096d8 <__muldf3>
 1004790:	180b883a 	mov	r5,r3
 1004794:	a80f883a 	mov	r7,r21
 1004798:	1009883a 	mov	r4,r2
 100479c:	a00d883a 	mov	r6,r20
 10047a0:	1009e8c0 	call	1009e8c <__gedf2>
 10047a4:	103cb80e 	bge	r2,zero,1003a88 <_dtoa_r+0x558>
 10047a8:	0027883a 	mov	r19,zero
 10047ac:	0025883a 	mov	r18,zero
 10047b0:	003fc606 	br	10046cc <_dtoa_r+0x119c>
 10047b4:	99400117 	ldw	r5,4(r19)
 10047b8:	d9001617 	ldw	r4,88(sp)
 10047bc:	1006c780 	call	1006c78 <_Balloc>
 10047c0:	99800417 	ldw	r6,16(r19)
 10047c4:	11000304 	addi	r4,r2,12
 10047c8:	99400304 	addi	r5,r19,12
 10047cc:	318d883a 	add	r6,r6,r6
 10047d0:	318d883a 	add	r6,r6,r6
 10047d4:	31800204 	addi	r6,r6,8
 10047d8:	1023883a 	mov	r17,r2
 10047dc:	10064e00 	call	10064e0 <memcpy>
 10047e0:	d9001617 	ldw	r4,88(sp)
 10047e4:	880b883a 	mov	r5,r17
 10047e8:	01800044 	movi	r6,1
 10047ec:	100703c0 	call	100703c <__lshift>
 10047f0:	100b883a 	mov	r5,r2
 10047f4:	003d9c06 	br	1003e68 <_dtoa_r+0x938>
 10047f8:	00800e44 	movi	r2,57
 10047fc:	b8807026 	beq	r23,r2,10049c0 <_dtoa_r+0x1490>
 1004800:	b8800044 	addi	r2,r23,1
 1004804:	b7000044 	addi	fp,r22,1
 1004808:	b0800005 	stb	r2,0(r22)
 100480c:	003e4106 	br	1004114 <_dtoa_r+0xbe4>
 1004810:	d8800317 	ldw	r2,12(sp)
 1004814:	01804074 	movhi	r6,257
 1004818:	318a0e04 	addi	r6,r6,10296
 100481c:	b009883a 	mov	r4,r22
 1004820:	100e90fa 	slli	r7,r2,3
 1004824:	b80b883a 	mov	r5,r23
 1004828:	398f883a 	add	r7,r7,r6
 100482c:	38bffe17 	ldw	r2,-8(r7)
 1004830:	d9800517 	ldw	r6,20(sp)
 1004834:	38ffff17 	ldw	r3,-4(r7)
 1004838:	37000044 	addi	fp,r6,1
 100483c:	180f883a 	mov	r7,r3
 1004840:	100d883a 	mov	r6,r2
 1004844:	10096d80 	call	10096d8 <__muldf3>
 1004848:	a80b883a 	mov	r5,r21
 100484c:	a009883a 	mov	r4,r20
 1004850:	182f883a 	mov	r23,r3
 1004854:	102d883a 	mov	r22,r2
 1004858:	100a0940 	call	100a094 <__fixdfsi>
 100485c:	1009883a 	mov	r4,r2
 1004860:	1027883a 	mov	r19,r2
 1004864:	1009f9c0 	call	1009f9c <__floatsidf>
 1004868:	a80b883a 	mov	r5,r21
 100486c:	a009883a 	mov	r4,r20
 1004870:	180f883a 	mov	r7,r3
 1004874:	100d883a 	mov	r6,r2
 1004878:	10095e40 	call	10095e4 <__subdf3>
 100487c:	180b883a 	mov	r5,r3
 1004880:	d8c00517 	ldw	r3,20(sp)
 1004884:	9cc00c04 	addi	r19,r19,48
 1004888:	1009883a 	mov	r4,r2
 100488c:	1cc00005 	stb	r19,0(r3)
 1004890:	2021883a 	mov	r16,r4
 1004894:	d9000317 	ldw	r4,12(sp)
 1004898:	00800044 	movi	r2,1
 100489c:	2823883a 	mov	r17,r5
 10048a0:	20802226 	beq	r4,r2,100492c <_dtoa_r+0x13fc>
 10048a4:	1029883a 	mov	r20,r2
 10048a8:	0005883a 	mov	r2,zero
 10048ac:	00d00934 	movhi	r3,16420
 10048b0:	180f883a 	mov	r7,r3
 10048b4:	100d883a 	mov	r6,r2
 10048b8:	880b883a 	mov	r5,r17
 10048bc:	8009883a 	mov	r4,r16
 10048c0:	10096d80 	call	10096d8 <__muldf3>
 10048c4:	180b883a 	mov	r5,r3
 10048c8:	1009883a 	mov	r4,r2
 10048cc:	1823883a 	mov	r17,r3
 10048d0:	1021883a 	mov	r16,r2
 10048d4:	100a0940 	call	100a094 <__fixdfsi>
 10048d8:	1009883a 	mov	r4,r2
 10048dc:	102b883a 	mov	r21,r2
 10048e0:	1009f9c0 	call	1009f9c <__floatsidf>
 10048e4:	880b883a 	mov	r5,r17
 10048e8:	8009883a 	mov	r4,r16
 10048ec:	180f883a 	mov	r7,r3
 10048f0:	100d883a 	mov	r6,r2
 10048f4:	10095e40 	call	10095e4 <__subdf3>
 10048f8:	180b883a 	mov	r5,r3
 10048fc:	d8c00517 	ldw	r3,20(sp)
 1004900:	1009883a 	mov	r4,r2
 1004904:	ad400c04 	addi	r21,r21,48
 1004908:	1d05883a 	add	r2,r3,r20
 100490c:	15400005 	stb	r21,0(r2)
 1004910:	2021883a 	mov	r16,r4
 1004914:	d9000317 	ldw	r4,12(sp)
 1004918:	a5000044 	addi	r20,r20,1
 100491c:	2823883a 	mov	r17,r5
 1004920:	a13fe11e 	bne	r20,r4,10048a8 <_dtoa_r+0x1378>
 1004924:	e505883a 	add	r2,fp,r20
 1004928:	173fffc4 	addi	fp,r2,-1
 100492c:	0025883a 	mov	r18,zero
 1004930:	04cff834 	movhi	r19,16352
 1004934:	b009883a 	mov	r4,r22
 1004938:	b80b883a 	mov	r5,r23
 100493c:	900d883a 	mov	r6,r18
 1004940:	980f883a 	mov	r7,r19
 1004944:	10096640 	call	1009664 <__adddf3>
 1004948:	180b883a 	mov	r5,r3
 100494c:	1009883a 	mov	r4,r2
 1004950:	800d883a 	mov	r6,r16
 1004954:	880f883a 	mov	r7,r17
 1004958:	1009f140 	call	1009f14 <__ltdf2>
 100495c:	103cab16 	blt	r2,zero,1003c0c <_dtoa_r+0x6dc>
 1004960:	0009883a 	mov	r4,zero
 1004964:	980b883a 	mov	r5,r19
 1004968:	b80f883a 	mov	r7,r23
 100496c:	b00d883a 	mov	r6,r22
 1004970:	10095e40 	call	10095e4 <__subdf3>
 1004974:	180b883a 	mov	r5,r3
 1004978:	880f883a 	mov	r7,r17
 100497c:	1009883a 	mov	r4,r2
 1004980:	800d883a 	mov	r6,r16
 1004984:	1009e040 	call	1009e04 <__gtdf2>
 1004988:	00bc470e 	bge	zero,r2,1003aa8 <_dtoa_r+0x578>
 100498c:	00c00c04 	movi	r3,48
 1004990:	e73fffc4 	addi	fp,fp,-1
 1004994:	e0800007 	ldb	r2,0(fp)
 1004998:	10fffd26 	beq	r2,r3,1004990 <_dtoa_r+0x1460>
 100499c:	d9800417 	ldw	r6,16(sp)
 10049a0:	e7000044 	addi	fp,fp,1
 10049a4:	d9800d15 	stw	r6,52(sp)
 10049a8:	003cab06 	br	1003c58 <_dtoa_r+0x728>
 10049ac:	d8c00f17 	ldw	r3,60(sp)
 10049b0:	d9001117 	ldw	r4,68(sp)
 10049b4:	20e1c83a 	sub	r16,r4,r3
 10049b8:	0007883a 	mov	r3,zero
 10049bc:	003d9b06 	br	100402c <_dtoa_r+0xafc>
 10049c0:	00800e44 	movi	r2,57
 10049c4:	b0800005 	stb	r2,0(r22)
 10049c8:	b5800044 	addi	r22,r22,1
 10049cc:	003dc106 	br	10040d4 <_dtoa_r+0xba4>
 10049d0:	05800084 	movi	r22,2
 10049d4:	003bf706 	br	10039b4 <_dtoa_r+0x484>
 10049d8:	d9000f17 	ldw	r4,60(sp)
 10049dc:	013c000e 	bge	zero,r4,10039e0 <_dtoa_r+0x4b0>
 10049e0:	d9800e17 	ldw	r6,56(sp)
 10049e4:	01bc300e 	bge	zero,r6,1003aa8 <_dtoa_r+0x578>
 10049e8:	0005883a 	mov	r2,zero
 10049ec:	00d00934 	movhi	r3,16420
 10049f0:	a80b883a 	mov	r5,r21
 10049f4:	180f883a 	mov	r7,r3
 10049f8:	a009883a 	mov	r4,r20
 10049fc:	100d883a 	mov	r6,r2
 1004a00:	10096d80 	call	10096d8 <__muldf3>
 1004a04:	b1000044 	addi	r4,r22,1
 1004a08:	1021883a 	mov	r16,r2
 1004a0c:	1823883a 	mov	r17,r3
 1004a10:	1009f9c0 	call	1009f9c <__floatsidf>
 1004a14:	880b883a 	mov	r5,r17
 1004a18:	8009883a 	mov	r4,r16
 1004a1c:	180f883a 	mov	r7,r3
 1004a20:	100d883a 	mov	r6,r2
 1004a24:	10096d80 	call	10096d8 <__muldf3>
 1004a28:	0011883a 	mov	r8,zero
 1004a2c:	02500734 	movhi	r9,16412
 1004a30:	180b883a 	mov	r5,r3
 1004a34:	480f883a 	mov	r7,r9
 1004a38:	1009883a 	mov	r4,r2
 1004a3c:	400d883a 	mov	r6,r8
 1004a40:	10096640 	call	1009664 <__adddf3>
 1004a44:	102d883a 	mov	r22,r2
 1004a48:	00bf3034 	movhi	r2,64704
 1004a4c:	10ef883a 	add	r23,r2,r3
 1004a50:	d8800d17 	ldw	r2,52(sp)
 1004a54:	d8c00e17 	ldw	r3,56(sp)
 1004a58:	8029883a 	mov	r20,r16
 1004a5c:	10bfffc4 	addi	r2,r2,-1
 1004a60:	882b883a 	mov	r21,r17
 1004a64:	d8800415 	stw	r2,16(sp)
 1004a68:	d8c00315 	stw	r3,12(sp)
 1004a6c:	003e8306 	br	100447c <_dtoa_r+0xf4c>
 1004a70:	d8800117 	ldw	r2,4(sp)
 1004a74:	dc001117 	ldw	r16,68(sp)
 1004a78:	dc801017 	ldw	r18,64(sp)
 1004a7c:	00c00d84 	movi	r3,54
 1004a80:	1887c83a 	sub	r3,r3,r2
 1004a84:	003d6906 	br	100402c <_dtoa_r+0xafc>
 1004a88:	01800044 	movi	r6,1
 1004a8c:	3021883a 	mov	r16,r6
 1004a90:	d9800f15 	stw	r6,60(sp)
 1004a94:	d9802615 	stw	r6,152(sp)
 1004a98:	d9800e15 	stw	r6,56(sp)
 1004a9c:	003b9306 	br	10038ec <_dtoa_r+0x3bc>
 1004aa0:	b021883a 	mov	r16,r22
 1004aa4:	dd800f15 	stw	r22,60(sp)
 1004aa8:	003b9006 	br	10038ec <_dtoa_r+0x3bc>
 1004aac:	103e221e 	bne	r2,zero,1004338 <_dtoa_r+0xe08>
 1004ab0:	b880004c 	andi	r2,r23,1
 1004ab4:	1005003a 	cmpeq	r2,r2,zero
 1004ab8:	103e1f1e 	bne	r2,zero,1004338 <_dtoa_r+0xe08>
 1004abc:	003e1b06 	br	100432c <_dtoa_r+0xdfc>
 1004ac0:	d9001617 	ldw	r4,88(sp)
 1004ac4:	980b883a 	mov	r5,r19
 1004ac8:	01800284 	movi	r6,10
 1004acc:	000f883a 	mov	r7,zero
 1004ad0:	10074180 	call	1007418 <__multadd>
 1004ad4:	d8c00e17 	ldw	r3,56(sp)
 1004ad8:	1027883a 	mov	r19,r2
 1004adc:	d8c00f15 	stw	r3,60(sp)
 1004ae0:	003cd306 	br	1003e30 <_dtoa_r+0x900>

01004ae4 <_fflush_r>:
 1004ae4:	defffb04 	addi	sp,sp,-20
 1004ae8:	dcc00315 	stw	r19,12(sp)
 1004aec:	dc800215 	stw	r18,8(sp)
 1004af0:	dfc00415 	stw	ra,16(sp)
 1004af4:	dc400115 	stw	r17,4(sp)
 1004af8:	dc000015 	stw	r16,0(sp)
 1004afc:	2027883a 	mov	r19,r4
 1004b00:	2825883a 	mov	r18,r5
 1004b04:	20000226 	beq	r4,zero,1004b10 <_fflush_r+0x2c>
 1004b08:	20800e17 	ldw	r2,56(r4)
 1004b0c:	10005626 	beq	r2,zero,1004c68 <_fflush_r+0x184>
 1004b10:	9100030b 	ldhu	r4,12(r18)
 1004b14:	20ffffcc 	andi	r3,r4,65535
 1004b18:	18e0001c 	xori	r3,r3,32768
 1004b1c:	18e00004 	addi	r3,r3,-32768
 1004b20:	1880020c 	andi	r2,r3,8
 1004b24:	1000261e 	bne	r2,zero,1004bc0 <_fflush_r+0xdc>
 1004b28:	90c00117 	ldw	r3,4(r18)
 1004b2c:	20820014 	ori	r2,r4,2048
 1004b30:	9080030d 	sth	r2,12(r18)
 1004b34:	1009883a 	mov	r4,r2
 1004b38:	00c0400e 	bge	zero,r3,1004c3c <_fflush_r+0x158>
 1004b3c:	92000a17 	ldw	r8,40(r18)
 1004b40:	40004026 	beq	r8,zero,1004c44 <_fflush_r+0x160>
 1004b44:	2084000c 	andi	r2,r4,4096
 1004b48:	10005326 	beq	r2,zero,1004c98 <_fflush_r+0x1b4>
 1004b4c:	94001417 	ldw	r16,80(r18)
 1004b50:	9080030b 	ldhu	r2,12(r18)
 1004b54:	1080010c 	andi	r2,r2,4
 1004b58:	1000481e 	bne	r2,zero,1004c7c <_fflush_r+0x198>
 1004b5c:	91400717 	ldw	r5,28(r18)
 1004b60:	9809883a 	mov	r4,r19
 1004b64:	800d883a 	mov	r6,r16
 1004b68:	000f883a 	mov	r7,zero
 1004b6c:	403ee83a 	callr	r8
 1004b70:	8080261e 	bne	r16,r2,1004c0c <_fflush_r+0x128>
 1004b74:	9080030b 	ldhu	r2,12(r18)
 1004b78:	91000417 	ldw	r4,16(r18)
 1004b7c:	90000115 	stw	zero,4(r18)
 1004b80:	10bdffcc 	andi	r2,r2,63487
 1004b84:	10ffffcc 	andi	r3,r2,65535
 1004b88:	18c4000c 	andi	r3,r3,4096
 1004b8c:	9080030d 	sth	r2,12(r18)
 1004b90:	91000015 	stw	r4,0(r18)
 1004b94:	18002b26 	beq	r3,zero,1004c44 <_fflush_r+0x160>
 1004b98:	0007883a 	mov	r3,zero
 1004b9c:	1805883a 	mov	r2,r3
 1004ba0:	94001415 	stw	r16,80(r18)
 1004ba4:	dfc00417 	ldw	ra,16(sp)
 1004ba8:	dcc00317 	ldw	r19,12(sp)
 1004bac:	dc800217 	ldw	r18,8(sp)
 1004bb0:	dc400117 	ldw	r17,4(sp)
 1004bb4:	dc000017 	ldw	r16,0(sp)
 1004bb8:	dec00504 	addi	sp,sp,20
 1004bbc:	f800283a 	ret
 1004bc0:	94400417 	ldw	r17,16(r18)
 1004bc4:	88001f26 	beq	r17,zero,1004c44 <_fflush_r+0x160>
 1004bc8:	90800017 	ldw	r2,0(r18)
 1004bcc:	18c000cc 	andi	r3,r3,3
 1004bd0:	94400015 	stw	r17,0(r18)
 1004bd4:	1461c83a 	sub	r16,r2,r17
 1004bd8:	18002526 	beq	r3,zero,1004c70 <_fflush_r+0x18c>
 1004bdc:	0005883a 	mov	r2,zero
 1004be0:	90800215 	stw	r2,8(r18)
 1004be4:	0400170e 	bge	zero,r16,1004c44 <_fflush_r+0x160>
 1004be8:	90c00917 	ldw	r3,36(r18)
 1004bec:	91400717 	ldw	r5,28(r18)
 1004bf0:	880d883a 	mov	r6,r17
 1004bf4:	800f883a 	mov	r7,r16
 1004bf8:	9809883a 	mov	r4,r19
 1004bfc:	183ee83a 	callr	r3
 1004c00:	88a3883a 	add	r17,r17,r2
 1004c04:	80a1c83a 	sub	r16,r16,r2
 1004c08:	00bff616 	blt	zero,r2,1004be4 <_fflush_r+0x100>
 1004c0c:	9080030b 	ldhu	r2,12(r18)
 1004c10:	00ffffc4 	movi	r3,-1
 1004c14:	10801014 	ori	r2,r2,64
 1004c18:	9080030d 	sth	r2,12(r18)
 1004c1c:	1805883a 	mov	r2,r3
 1004c20:	dfc00417 	ldw	ra,16(sp)
 1004c24:	dcc00317 	ldw	r19,12(sp)
 1004c28:	dc800217 	ldw	r18,8(sp)
 1004c2c:	dc400117 	ldw	r17,4(sp)
 1004c30:	dc000017 	ldw	r16,0(sp)
 1004c34:	dec00504 	addi	sp,sp,20
 1004c38:	f800283a 	ret
 1004c3c:	90800f17 	ldw	r2,60(r18)
 1004c40:	00bfbe16 	blt	zero,r2,1004b3c <_fflush_r+0x58>
 1004c44:	0007883a 	mov	r3,zero
 1004c48:	1805883a 	mov	r2,r3
 1004c4c:	dfc00417 	ldw	ra,16(sp)
 1004c50:	dcc00317 	ldw	r19,12(sp)
 1004c54:	dc800217 	ldw	r18,8(sp)
 1004c58:	dc400117 	ldw	r17,4(sp)
 1004c5c:	dc000017 	ldw	r16,0(sp)
 1004c60:	dec00504 	addi	sp,sp,20
 1004c64:	f800283a 	ret
 1004c68:	1004d7c0 	call	1004d7c <__sinit>
 1004c6c:	003fa806 	br	1004b10 <_fflush_r+0x2c>
 1004c70:	90800517 	ldw	r2,20(r18)
 1004c74:	90800215 	stw	r2,8(r18)
 1004c78:	003fda06 	br	1004be4 <_fflush_r+0x100>
 1004c7c:	90800117 	ldw	r2,4(r18)
 1004c80:	90c00c17 	ldw	r3,48(r18)
 1004c84:	80a1c83a 	sub	r16,r16,r2
 1004c88:	183fb426 	beq	r3,zero,1004b5c <_fflush_r+0x78>
 1004c8c:	90800f17 	ldw	r2,60(r18)
 1004c90:	80a1c83a 	sub	r16,r16,r2
 1004c94:	003fb106 	br	1004b5c <_fflush_r+0x78>
 1004c98:	91400717 	ldw	r5,28(r18)
 1004c9c:	9809883a 	mov	r4,r19
 1004ca0:	000d883a 	mov	r6,zero
 1004ca4:	01c00044 	movi	r7,1
 1004ca8:	403ee83a 	callr	r8
 1004cac:	1021883a 	mov	r16,r2
 1004cb0:	00bfffc4 	movi	r2,-1
 1004cb4:	80800226 	beq	r16,r2,1004cc0 <_fflush_r+0x1dc>
 1004cb8:	92000a17 	ldw	r8,40(r18)
 1004cbc:	003fa406 	br	1004b50 <_fflush_r+0x6c>
 1004cc0:	98c00017 	ldw	r3,0(r19)
 1004cc4:	00800744 	movi	r2,29
 1004cc8:	18bfde26 	beq	r3,r2,1004c44 <_fflush_r+0x160>
 1004ccc:	9080030b 	ldhu	r2,12(r18)
 1004cd0:	8007883a 	mov	r3,r16
 1004cd4:	10801014 	ori	r2,r2,64
 1004cd8:	9080030d 	sth	r2,12(r18)
 1004cdc:	003fcf06 	br	1004c1c <_fflush_r+0x138>

01004ce0 <fflush>:
 1004ce0:	01404034 	movhi	r5,256
 1004ce4:	2952b904 	addi	r5,r5,19172
 1004ce8:	2007883a 	mov	r3,r4
 1004cec:	20000526 	beq	r4,zero,1004d04 <fflush+0x24>
 1004cf0:	00804074 	movhi	r2,257
 1004cf4:	10915604 	addi	r2,r2,17752
 1004cf8:	11000017 	ldw	r4,0(r2)
 1004cfc:	180b883a 	mov	r5,r3
 1004d00:	1004ae41 	jmpi	1004ae4 <_fflush_r>
 1004d04:	00804074 	movhi	r2,257
 1004d08:	10915704 	addi	r2,r2,17756
 1004d0c:	11000017 	ldw	r4,0(r2)
 1004d10:	10058e41 	jmpi	10058e4 <_fwalk_reent>

01004d14 <std>:
 1004d14:	00804034 	movhi	r2,256
 1004d18:	109f9604 	addi	r2,r2,32344
 1004d1c:	20800b15 	stw	r2,44(r4)
 1004d20:	00804034 	movhi	r2,256
 1004d24:	109fd104 	addi	r2,r2,32580
 1004d28:	20800815 	stw	r2,32(r4)
 1004d2c:	00c04034 	movhi	r3,256
 1004d30:	18dfb204 	addi	r3,r3,32456
 1004d34:	00804034 	movhi	r2,256
 1004d38:	109f9804 	addi	r2,r2,32352
 1004d3c:	2140030d 	sth	r5,12(r4)
 1004d40:	2180038d 	sth	r6,14(r4)
 1004d44:	20c00915 	stw	r3,36(r4)
 1004d48:	20800a15 	stw	r2,40(r4)
 1004d4c:	20000015 	stw	zero,0(r4)
 1004d50:	20000115 	stw	zero,4(r4)
 1004d54:	20000215 	stw	zero,8(r4)
 1004d58:	20000415 	stw	zero,16(r4)
 1004d5c:	20000515 	stw	zero,20(r4)
 1004d60:	20000615 	stw	zero,24(r4)
 1004d64:	21000715 	stw	r4,28(r4)
 1004d68:	f800283a 	ret

01004d6c <__sfp_lock_acquire>:
 1004d6c:	f800283a 	ret

01004d70 <__sfp_lock_release>:
 1004d70:	f800283a 	ret

01004d74 <__sinit_lock_acquire>:
 1004d74:	f800283a 	ret

01004d78 <__sinit_lock_release>:
 1004d78:	f800283a 	ret

01004d7c <__sinit>:
 1004d7c:	20800e17 	ldw	r2,56(r4)
 1004d80:	defffd04 	addi	sp,sp,-12
 1004d84:	dc400115 	stw	r17,4(sp)
 1004d88:	dc000015 	stw	r16,0(sp)
 1004d8c:	dfc00215 	stw	ra,8(sp)
 1004d90:	04400044 	movi	r17,1
 1004d94:	01400104 	movi	r5,4
 1004d98:	000d883a 	mov	r6,zero
 1004d9c:	2021883a 	mov	r16,r4
 1004da0:	2200bb04 	addi	r8,r4,748
 1004da4:	200f883a 	mov	r7,r4
 1004da8:	10000526 	beq	r2,zero,1004dc0 <__sinit+0x44>
 1004dac:	dfc00217 	ldw	ra,8(sp)
 1004db0:	dc400117 	ldw	r17,4(sp)
 1004db4:	dc000017 	ldw	r16,0(sp)
 1004db8:	dec00304 	addi	sp,sp,12
 1004dbc:	f800283a 	ret
 1004dc0:	21000117 	ldw	r4,4(r4)
 1004dc4:	00804034 	movhi	r2,256
 1004dc8:	10939804 	addi	r2,r2,20064
 1004dcc:	00c000c4 	movi	r3,3
 1004dd0:	80800f15 	stw	r2,60(r16)
 1004dd4:	80c0b915 	stw	r3,740(r16)
 1004dd8:	8200ba15 	stw	r8,744(r16)
 1004ddc:	84400e15 	stw	r17,56(r16)
 1004de0:	8000b815 	stw	zero,736(r16)
 1004de4:	1004d140 	call	1004d14 <std>
 1004de8:	81000217 	ldw	r4,8(r16)
 1004dec:	880d883a 	mov	r6,r17
 1004df0:	800f883a 	mov	r7,r16
 1004df4:	01400284 	movi	r5,10
 1004df8:	1004d140 	call	1004d14 <std>
 1004dfc:	81000317 	ldw	r4,12(r16)
 1004e00:	800f883a 	mov	r7,r16
 1004e04:	01400484 	movi	r5,18
 1004e08:	01800084 	movi	r6,2
 1004e0c:	dfc00217 	ldw	ra,8(sp)
 1004e10:	dc400117 	ldw	r17,4(sp)
 1004e14:	dc000017 	ldw	r16,0(sp)
 1004e18:	dec00304 	addi	sp,sp,12
 1004e1c:	1004d141 	jmpi	1004d14 <std>

01004e20 <__fp_lock>:
 1004e20:	0005883a 	mov	r2,zero
 1004e24:	f800283a 	ret

01004e28 <__fp_unlock>:
 1004e28:	0005883a 	mov	r2,zero
 1004e2c:	f800283a 	ret

01004e30 <__fp_unlock_all>:
 1004e30:	00804074 	movhi	r2,257
 1004e34:	10915604 	addi	r2,r2,17752
 1004e38:	11000017 	ldw	r4,0(r2)
 1004e3c:	01404034 	movhi	r5,256
 1004e40:	29538a04 	addi	r5,r5,20008
 1004e44:	10059ac1 	jmpi	10059ac <_fwalk>

01004e48 <__fp_lock_all>:
 1004e48:	00804074 	movhi	r2,257
 1004e4c:	10915604 	addi	r2,r2,17752
 1004e50:	11000017 	ldw	r4,0(r2)
 1004e54:	01404034 	movhi	r5,256
 1004e58:	29538804 	addi	r5,r5,20000
 1004e5c:	10059ac1 	jmpi	10059ac <_fwalk>

01004e60 <_cleanup_r>:
 1004e60:	01404074 	movhi	r5,257
 1004e64:	2960c804 	addi	r5,r5,-31968
 1004e68:	10059ac1 	jmpi	10059ac <_fwalk>

01004e6c <_cleanup>:
 1004e6c:	00804074 	movhi	r2,257
 1004e70:	10915704 	addi	r2,r2,17756
 1004e74:	11000017 	ldw	r4,0(r2)
 1004e78:	1004e601 	jmpi	1004e60 <_cleanup_r>

01004e7c <__sfmoreglue>:
 1004e7c:	defffc04 	addi	sp,sp,-16
 1004e80:	dc000015 	stw	r16,0(sp)
 1004e84:	2821883a 	mov	r16,r5
 1004e88:	dc400115 	stw	r17,4(sp)
 1004e8c:	01401704 	movi	r5,92
 1004e90:	2023883a 	mov	r17,r4
 1004e94:	8009883a 	mov	r4,r16
 1004e98:	dfc00315 	stw	ra,12(sp)
 1004e9c:	dcc00215 	stw	r19,8(sp)
 1004ea0:	1000adc0 	call	1000adc <__mulsi3>
 1004ea4:	11400304 	addi	r5,r2,12
 1004ea8:	8809883a 	mov	r4,r17
 1004eac:	1027883a 	mov	r19,r2
 1004eb0:	1005cbc0 	call	1005cbc <_malloc_r>
 1004eb4:	10c00304 	addi	r3,r2,12
 1004eb8:	1023883a 	mov	r17,r2
 1004ebc:	1809883a 	mov	r4,r3
 1004ec0:	980d883a 	mov	r6,r19
 1004ec4:	000b883a 	mov	r5,zero
 1004ec8:	10000b26 	beq	r2,zero,1004ef8 <__sfmoreglue+0x7c>
 1004ecc:	14000115 	stw	r16,4(r2)
 1004ed0:	10c00215 	stw	r3,8(r2)
 1004ed4:	10000015 	stw	zero,0(r2)
 1004ed8:	10066600 	call	1006660 <memset>
 1004edc:	8805883a 	mov	r2,r17
 1004ee0:	dfc00317 	ldw	ra,12(sp)
 1004ee4:	dcc00217 	ldw	r19,8(sp)
 1004ee8:	dc400117 	ldw	r17,4(sp)
 1004eec:	dc000017 	ldw	r16,0(sp)
 1004ef0:	dec00404 	addi	sp,sp,16
 1004ef4:	f800283a 	ret
 1004ef8:	0023883a 	mov	r17,zero
 1004efc:	8805883a 	mov	r2,r17
 1004f00:	dfc00317 	ldw	ra,12(sp)
 1004f04:	dcc00217 	ldw	r19,8(sp)
 1004f08:	dc400117 	ldw	r17,4(sp)
 1004f0c:	dc000017 	ldw	r16,0(sp)
 1004f10:	dec00404 	addi	sp,sp,16
 1004f14:	f800283a 	ret

01004f18 <__sfp>:
 1004f18:	defffd04 	addi	sp,sp,-12
 1004f1c:	00804074 	movhi	r2,257
 1004f20:	10915704 	addi	r2,r2,17756
 1004f24:	dc000015 	stw	r16,0(sp)
 1004f28:	14000017 	ldw	r16,0(r2)
 1004f2c:	dc400115 	stw	r17,4(sp)
 1004f30:	dfc00215 	stw	ra,8(sp)
 1004f34:	80800e17 	ldw	r2,56(r16)
 1004f38:	2023883a 	mov	r17,r4
 1004f3c:	10002626 	beq	r2,zero,1004fd8 <__sfp+0xc0>
 1004f40:	8400b804 	addi	r16,r16,736
 1004f44:	80800117 	ldw	r2,4(r16)
 1004f48:	81000217 	ldw	r4,8(r16)
 1004f4c:	10ffffc4 	addi	r3,r2,-1
 1004f50:	18000916 	blt	r3,zero,1004f78 <__sfp+0x60>
 1004f54:	2080030f 	ldh	r2,12(r4)
 1004f58:	10000b26 	beq	r2,zero,1004f88 <__sfp+0x70>
 1004f5c:	017fffc4 	movi	r5,-1
 1004f60:	00000206 	br	1004f6c <__sfp+0x54>
 1004f64:	2080030f 	ldh	r2,12(r4)
 1004f68:	10000726 	beq	r2,zero,1004f88 <__sfp+0x70>
 1004f6c:	18ffffc4 	addi	r3,r3,-1
 1004f70:	21001704 	addi	r4,r4,92
 1004f74:	197ffb1e 	bne	r3,r5,1004f64 <__sfp+0x4c>
 1004f78:	80800017 	ldw	r2,0(r16)
 1004f7c:	10001926 	beq	r2,zero,1004fe4 <__sfp+0xcc>
 1004f80:	1021883a 	mov	r16,r2
 1004f84:	003fef06 	br	1004f44 <__sfp+0x2c>
 1004f88:	00bfffc4 	movi	r2,-1
 1004f8c:	00c00044 	movi	r3,1
 1004f90:	2080038d 	sth	r2,14(r4)
 1004f94:	20c0030d 	sth	r3,12(r4)
 1004f98:	20000015 	stw	zero,0(r4)
 1004f9c:	20000215 	stw	zero,8(r4)
 1004fa0:	20000115 	stw	zero,4(r4)
 1004fa4:	20000415 	stw	zero,16(r4)
 1004fa8:	20000515 	stw	zero,20(r4)
 1004fac:	20000615 	stw	zero,24(r4)
 1004fb0:	20000c15 	stw	zero,48(r4)
 1004fb4:	20000d15 	stw	zero,52(r4)
 1004fb8:	20001115 	stw	zero,68(r4)
 1004fbc:	20001215 	stw	zero,72(r4)
 1004fc0:	2005883a 	mov	r2,r4
 1004fc4:	dfc00217 	ldw	ra,8(sp)
 1004fc8:	dc400117 	ldw	r17,4(sp)
 1004fcc:	dc000017 	ldw	r16,0(sp)
 1004fd0:	dec00304 	addi	sp,sp,12
 1004fd4:	f800283a 	ret
 1004fd8:	8009883a 	mov	r4,r16
 1004fdc:	1004d7c0 	call	1004d7c <__sinit>
 1004fe0:	003fd706 	br	1004f40 <__sfp+0x28>
 1004fe4:	8809883a 	mov	r4,r17
 1004fe8:	01400104 	movi	r5,4
 1004fec:	1004e7c0 	call	1004e7c <__sfmoreglue>
 1004ff0:	80800015 	stw	r2,0(r16)
 1004ff4:	103fe21e 	bne	r2,zero,1004f80 <__sfp+0x68>
 1004ff8:	00800304 	movi	r2,12
 1004ffc:	0009883a 	mov	r4,zero
 1005000:	88800015 	stw	r2,0(r17)
 1005004:	003fee06 	br	1004fc0 <__sfp+0xa8>

01005008 <_malloc_trim_r>:
 1005008:	defffb04 	addi	sp,sp,-20
 100500c:	dcc00315 	stw	r19,12(sp)
 1005010:	04c04074 	movhi	r19,257
 1005014:	9ccb9504 	addi	r19,r19,11860
 1005018:	dc800215 	stw	r18,8(sp)
 100501c:	dc400115 	stw	r17,4(sp)
 1005020:	dc000015 	stw	r16,0(sp)
 1005024:	2823883a 	mov	r17,r5
 1005028:	2025883a 	mov	r18,r4
 100502c:	dfc00415 	stw	ra,16(sp)
 1005030:	100ae040 	call	100ae04 <__malloc_lock>
 1005034:	98800217 	ldw	r2,8(r19)
 1005038:	9009883a 	mov	r4,r18
 100503c:	000b883a 	mov	r5,zero
 1005040:	10c00117 	ldw	r3,4(r2)
 1005044:	00bfff04 	movi	r2,-4
 1005048:	18a0703a 	and	r16,r3,r2
 100504c:	8463c83a 	sub	r17,r16,r17
 1005050:	8c43fbc4 	addi	r17,r17,4079
 1005054:	8822d33a 	srli	r17,r17,12
 1005058:	0083ffc4 	movi	r2,4095
 100505c:	8c7fffc4 	addi	r17,r17,-1
 1005060:	8822933a 	slli	r17,r17,12
 1005064:	1440060e 	bge	r2,r17,1005080 <_malloc_trim_r+0x78>
 1005068:	1007de80 	call	1007de8 <_sbrk_r>
 100506c:	98c00217 	ldw	r3,8(r19)
 1005070:	9009883a 	mov	r4,r18
 1005074:	044bc83a 	sub	r5,zero,r17
 1005078:	80c7883a 	add	r3,r16,r3
 100507c:	10c00926 	beq	r2,r3,10050a4 <_malloc_trim_r+0x9c>
 1005080:	100ae240 	call	100ae24 <__malloc_unlock>
 1005084:	0005883a 	mov	r2,zero
 1005088:	dfc00417 	ldw	ra,16(sp)
 100508c:	dcc00317 	ldw	r19,12(sp)
 1005090:	dc800217 	ldw	r18,8(sp)
 1005094:	dc400117 	ldw	r17,4(sp)
 1005098:	dc000017 	ldw	r16,0(sp)
 100509c:	dec00504 	addi	sp,sp,20
 10050a0:	f800283a 	ret
 10050a4:	9009883a 	mov	r4,r18
 10050a8:	1007de80 	call	1007de8 <_sbrk_r>
 10050ac:	844dc83a 	sub	r6,r16,r17
 10050b0:	00ffffc4 	movi	r3,-1
 10050b4:	9009883a 	mov	r4,r18
 10050b8:	000b883a 	mov	r5,zero
 10050bc:	01c04074 	movhi	r7,257
 10050c0:	39d85604 	addi	r7,r7,24920
 10050c4:	31800054 	ori	r6,r6,1
 10050c8:	10c00926 	beq	r2,r3,10050f0 <_malloc_trim_r+0xe8>
 10050cc:	38800017 	ldw	r2,0(r7)
 10050d0:	98c00217 	ldw	r3,8(r19)
 10050d4:	9009883a 	mov	r4,r18
 10050d8:	1445c83a 	sub	r2,r2,r17
 10050dc:	38800015 	stw	r2,0(r7)
 10050e0:	19800115 	stw	r6,4(r3)
 10050e4:	100ae240 	call	100ae24 <__malloc_unlock>
 10050e8:	00800044 	movi	r2,1
 10050ec:	003fe606 	br	1005088 <_malloc_trim_r+0x80>
 10050f0:	1007de80 	call	1007de8 <_sbrk_r>
 10050f4:	99800217 	ldw	r6,8(r19)
 10050f8:	100f883a 	mov	r7,r2
 10050fc:	9009883a 	mov	r4,r18
 1005100:	1187c83a 	sub	r3,r2,r6
 1005104:	008003c4 	movi	r2,15
 1005108:	19400054 	ori	r5,r3,1
 100510c:	10ffdc0e 	bge	r2,r3,1005080 <_malloc_trim_r+0x78>
 1005110:	00804074 	movhi	r2,257
 1005114:	10915b04 	addi	r2,r2,17772
 1005118:	10c00017 	ldw	r3,0(r2)
 100511c:	00804074 	movhi	r2,257
 1005120:	10985604 	addi	r2,r2,24920
 1005124:	31400115 	stw	r5,4(r6)
 1005128:	38c7c83a 	sub	r3,r7,r3
 100512c:	10c00015 	stw	r3,0(r2)
 1005130:	003fd306 	br	1005080 <_malloc_trim_r+0x78>

01005134 <_free_r>:
 1005134:	defffd04 	addi	sp,sp,-12
 1005138:	dc400115 	stw	r17,4(sp)
 100513c:	dc000015 	stw	r16,0(sp)
 1005140:	dfc00215 	stw	ra,8(sp)
 1005144:	2821883a 	mov	r16,r5
 1005148:	2023883a 	mov	r17,r4
 100514c:	28005a26 	beq	r5,zero,10052b8 <_free_r+0x184>
 1005150:	100ae040 	call	100ae04 <__malloc_lock>
 1005154:	823ffe04 	addi	r8,r16,-8
 1005158:	41400117 	ldw	r5,4(r8)
 100515c:	00bfff84 	movi	r2,-2
 1005160:	02804074 	movhi	r10,257
 1005164:	528b9504 	addi	r10,r10,11860
 1005168:	288e703a 	and	r7,r5,r2
 100516c:	41cd883a 	add	r6,r8,r7
 1005170:	30c00117 	ldw	r3,4(r6)
 1005174:	51000217 	ldw	r4,8(r10)
 1005178:	00bfff04 	movi	r2,-4
 100517c:	1892703a 	and	r9,r3,r2
 1005180:	5017883a 	mov	r11,r10
 1005184:	31006726 	beq	r6,r4,1005324 <_free_r+0x1f0>
 1005188:	2880004c 	andi	r2,r5,1
 100518c:	1005003a 	cmpeq	r2,r2,zero
 1005190:	32400115 	stw	r9,4(r6)
 1005194:	10001a1e 	bne	r2,zero,1005200 <_free_r+0xcc>
 1005198:	000b883a 	mov	r5,zero
 100519c:	3247883a 	add	r3,r6,r9
 10051a0:	18800117 	ldw	r2,4(r3)
 10051a4:	1080004c 	andi	r2,r2,1
 10051a8:	1000231e 	bne	r2,zero,1005238 <_free_r+0x104>
 10051ac:	280ac03a 	cmpne	r5,r5,zero
 10051b0:	3a4f883a 	add	r7,r7,r9
 10051b4:	2800451e 	bne	r5,zero,10052cc <_free_r+0x198>
 10051b8:	31000217 	ldw	r4,8(r6)
 10051bc:	00804074 	movhi	r2,257
 10051c0:	108b9704 	addi	r2,r2,11868
 10051c4:	20807b26 	beq	r4,r2,10053b4 <_free_r+0x280>
 10051c8:	30800317 	ldw	r2,12(r6)
 10051cc:	3a07883a 	add	r3,r7,r8
 10051d0:	19c00015 	stw	r7,0(r3)
 10051d4:	11000215 	stw	r4,8(r2)
 10051d8:	20800315 	stw	r2,12(r4)
 10051dc:	38800054 	ori	r2,r7,1
 10051e0:	40800115 	stw	r2,4(r8)
 10051e4:	28001a26 	beq	r5,zero,1005250 <_free_r+0x11c>
 10051e8:	8809883a 	mov	r4,r17
 10051ec:	dfc00217 	ldw	ra,8(sp)
 10051f0:	dc400117 	ldw	r17,4(sp)
 10051f4:	dc000017 	ldw	r16,0(sp)
 10051f8:	dec00304 	addi	sp,sp,12
 10051fc:	100ae241 	jmpi	100ae24 <__malloc_unlock>
 1005200:	80bffe17 	ldw	r2,-8(r16)
 1005204:	50c00204 	addi	r3,r10,8
 1005208:	4091c83a 	sub	r8,r8,r2
 100520c:	41000217 	ldw	r4,8(r8)
 1005210:	388f883a 	add	r7,r7,r2
 1005214:	20c06126 	beq	r4,r3,100539c <_free_r+0x268>
 1005218:	40800317 	ldw	r2,12(r8)
 100521c:	3247883a 	add	r3,r6,r9
 1005220:	000b883a 	mov	r5,zero
 1005224:	11000215 	stw	r4,8(r2)
 1005228:	20800315 	stw	r2,12(r4)
 100522c:	18800117 	ldw	r2,4(r3)
 1005230:	1080004c 	andi	r2,r2,1
 1005234:	103fdd26 	beq	r2,zero,10051ac <_free_r+0x78>
 1005238:	38800054 	ori	r2,r7,1
 100523c:	3a07883a 	add	r3,r7,r8
 1005240:	280ac03a 	cmpne	r5,r5,zero
 1005244:	40800115 	stw	r2,4(r8)
 1005248:	19c00015 	stw	r7,0(r3)
 100524c:	283fe61e 	bne	r5,zero,10051e8 <_free_r+0xb4>
 1005250:	00807fc4 	movi	r2,511
 1005254:	11c01f2e 	bgeu	r2,r7,10052d4 <_free_r+0x1a0>
 1005258:	3806d27a 	srli	r3,r7,9
 100525c:	1800481e 	bne	r3,zero,1005380 <_free_r+0x24c>
 1005260:	3804d0fa 	srli	r2,r7,3
 1005264:	100690fa 	slli	r3,r2,3
 1005268:	1acd883a 	add	r6,r3,r11
 100526c:	31400217 	ldw	r5,8(r6)
 1005270:	31405926 	beq	r6,r5,10053d8 <_free_r+0x2a4>
 1005274:	28800117 	ldw	r2,4(r5)
 1005278:	00ffff04 	movi	r3,-4
 100527c:	10c4703a 	and	r2,r2,r3
 1005280:	3880022e 	bgeu	r7,r2,100528c <_free_r+0x158>
 1005284:	29400217 	ldw	r5,8(r5)
 1005288:	317ffa1e 	bne	r6,r5,1005274 <_free_r+0x140>
 100528c:	29800317 	ldw	r6,12(r5)
 1005290:	41800315 	stw	r6,12(r8)
 1005294:	41400215 	stw	r5,8(r8)
 1005298:	8809883a 	mov	r4,r17
 100529c:	2a000315 	stw	r8,12(r5)
 10052a0:	32000215 	stw	r8,8(r6)
 10052a4:	dfc00217 	ldw	ra,8(sp)
 10052a8:	dc400117 	ldw	r17,4(sp)
 10052ac:	dc000017 	ldw	r16,0(sp)
 10052b0:	dec00304 	addi	sp,sp,12
 10052b4:	100ae241 	jmpi	100ae24 <__malloc_unlock>
 10052b8:	dfc00217 	ldw	ra,8(sp)
 10052bc:	dc400117 	ldw	r17,4(sp)
 10052c0:	dc000017 	ldw	r16,0(sp)
 10052c4:	dec00304 	addi	sp,sp,12
 10052c8:	f800283a 	ret
 10052cc:	31000217 	ldw	r4,8(r6)
 10052d0:	003fbd06 	br	10051c8 <_free_r+0x94>
 10052d4:	3806d0fa 	srli	r3,r7,3
 10052d8:	00800044 	movi	r2,1
 10052dc:	51400117 	ldw	r5,4(r10)
 10052e0:	180890fa 	slli	r4,r3,3
 10052e4:	1807d0ba 	srai	r3,r3,2
 10052e8:	22c9883a 	add	r4,r4,r11
 10052ec:	21800217 	ldw	r6,8(r4)
 10052f0:	10c4983a 	sll	r2,r2,r3
 10052f4:	41000315 	stw	r4,12(r8)
 10052f8:	41800215 	stw	r6,8(r8)
 10052fc:	288ab03a 	or	r5,r5,r2
 1005300:	22000215 	stw	r8,8(r4)
 1005304:	8809883a 	mov	r4,r17
 1005308:	51400115 	stw	r5,4(r10)
 100530c:	32000315 	stw	r8,12(r6)
 1005310:	dfc00217 	ldw	ra,8(sp)
 1005314:	dc400117 	ldw	r17,4(sp)
 1005318:	dc000017 	ldw	r16,0(sp)
 100531c:	dec00304 	addi	sp,sp,12
 1005320:	100ae241 	jmpi	100ae24 <__malloc_unlock>
 1005324:	2880004c 	andi	r2,r5,1
 1005328:	3a4d883a 	add	r6,r7,r9
 100532c:	1000071e 	bne	r2,zero,100534c <_free_r+0x218>
 1005330:	80bffe17 	ldw	r2,-8(r16)
 1005334:	4091c83a 	sub	r8,r8,r2
 1005338:	41000317 	ldw	r4,12(r8)
 100533c:	40c00217 	ldw	r3,8(r8)
 1005340:	308d883a 	add	r6,r6,r2
 1005344:	20c00215 	stw	r3,8(r4)
 1005348:	19000315 	stw	r4,12(r3)
 100534c:	00804074 	movhi	r2,257
 1005350:	10915a04 	addi	r2,r2,17768
 1005354:	11000017 	ldw	r4,0(r2)
 1005358:	30c00054 	ori	r3,r6,1
 100535c:	52000215 	stw	r8,8(r10)
 1005360:	40c00115 	stw	r3,4(r8)
 1005364:	313fa036 	bltu	r6,r4,10051e8 <_free_r+0xb4>
 1005368:	00804074 	movhi	r2,257
 100536c:	10983d04 	addi	r2,r2,24820
 1005370:	11400017 	ldw	r5,0(r2)
 1005374:	8809883a 	mov	r4,r17
 1005378:	10050080 	call	1005008 <_malloc_trim_r>
 100537c:	003f9a06 	br	10051e8 <_free_r+0xb4>
 1005380:	00800104 	movi	r2,4
 1005384:	10c0072e 	bgeu	r2,r3,10053a4 <_free_r+0x270>
 1005388:	00800504 	movi	r2,20
 100538c:	10c01936 	bltu	r2,r3,10053f4 <_free_r+0x2c0>
 1005390:	188016c4 	addi	r2,r3,91
 1005394:	100690fa 	slli	r3,r2,3
 1005398:	003fb306 	br	1005268 <_free_r+0x134>
 100539c:	01400044 	movi	r5,1
 10053a0:	003f7e06 	br	100519c <_free_r+0x68>
 10053a4:	3804d1ba 	srli	r2,r7,6
 10053a8:	10800e04 	addi	r2,r2,56
 10053ac:	100690fa 	slli	r3,r2,3
 10053b0:	003fad06 	br	1005268 <_free_r+0x134>
 10053b4:	22000315 	stw	r8,12(r4)
 10053b8:	22000215 	stw	r8,8(r4)
 10053bc:	3a05883a 	add	r2,r7,r8
 10053c0:	38c00054 	ori	r3,r7,1
 10053c4:	11c00015 	stw	r7,0(r2)
 10053c8:	41000215 	stw	r4,8(r8)
 10053cc:	40c00115 	stw	r3,4(r8)
 10053d0:	41000315 	stw	r4,12(r8)
 10053d4:	003f8406 	br	10051e8 <_free_r+0xb4>
 10053d8:	1005d0ba 	srai	r2,r2,2
 10053dc:	00c00044 	movi	r3,1
 10053e0:	51000117 	ldw	r4,4(r10)
 10053e4:	1886983a 	sll	r3,r3,r2
 10053e8:	20c8b03a 	or	r4,r4,r3
 10053ec:	51000115 	stw	r4,4(r10)
 10053f0:	003fa706 	br	1005290 <_free_r+0x15c>
 10053f4:	00801504 	movi	r2,84
 10053f8:	10c00436 	bltu	r2,r3,100540c <_free_r+0x2d8>
 10053fc:	3804d33a 	srli	r2,r7,12
 1005400:	10801b84 	addi	r2,r2,110
 1005404:	100690fa 	slli	r3,r2,3
 1005408:	003f9706 	br	1005268 <_free_r+0x134>
 100540c:	00805504 	movi	r2,340
 1005410:	10c00436 	bltu	r2,r3,1005424 <_free_r+0x2f0>
 1005414:	3804d3fa 	srli	r2,r7,15
 1005418:	10801dc4 	addi	r2,r2,119
 100541c:	100690fa 	slli	r3,r2,3
 1005420:	003f9106 	br	1005268 <_free_r+0x134>
 1005424:	00815504 	movi	r2,1364
 1005428:	10c0032e 	bgeu	r2,r3,1005438 <_free_r+0x304>
 100542c:	00801f84 	movi	r2,126
 1005430:	00c0fc04 	movi	r3,1008
 1005434:	003f8c06 	br	1005268 <_free_r+0x134>
 1005438:	3804d4ba 	srli	r2,r7,18
 100543c:	10801f04 	addi	r2,r2,124
 1005440:	100690fa 	slli	r3,r2,3
 1005444:	003f8806 	br	1005268 <_free_r+0x134>

01005448 <__sfvwrite_r>:
 1005448:	30800217 	ldw	r2,8(r6)
 100544c:	defff504 	addi	sp,sp,-44
 1005450:	df000915 	stw	fp,36(sp)
 1005454:	dd800715 	stw	r22,28(sp)
 1005458:	dc800315 	stw	r18,12(sp)
 100545c:	dfc00a15 	stw	ra,40(sp)
 1005460:	ddc00815 	stw	r23,32(sp)
 1005464:	dd400615 	stw	r21,24(sp)
 1005468:	dd000515 	stw	r20,20(sp)
 100546c:	dcc00415 	stw	r19,16(sp)
 1005470:	dc400215 	stw	r17,8(sp)
 1005474:	dc000115 	stw	r16,4(sp)
 1005478:	302d883a 	mov	r22,r6
 100547c:	2039883a 	mov	fp,r4
 1005480:	2825883a 	mov	r18,r5
 1005484:	10001c26 	beq	r2,zero,10054f8 <__sfvwrite_r+0xb0>
 1005488:	29c0030b 	ldhu	r7,12(r5)
 100548c:	3880020c 	andi	r2,r7,8
 1005490:	10002726 	beq	r2,zero,1005530 <__sfvwrite_r+0xe8>
 1005494:	28800417 	ldw	r2,16(r5)
 1005498:	10002526 	beq	r2,zero,1005530 <__sfvwrite_r+0xe8>
 100549c:	3880008c 	andi	r2,r7,2
 10054a0:	b5400017 	ldw	r21,0(r22)
 10054a4:	10002826 	beq	r2,zero,1005548 <__sfvwrite_r+0x100>
 10054a8:	0021883a 	mov	r16,zero
 10054ac:	0023883a 	mov	r17,zero
 10054b0:	880d883a 	mov	r6,r17
 10054b4:	e009883a 	mov	r4,fp
 10054b8:	00810004 	movi	r2,1024
 10054bc:	80006e26 	beq	r16,zero,1005678 <__sfvwrite_r+0x230>
 10054c0:	800f883a 	mov	r7,r16
 10054c4:	91400717 	ldw	r5,28(r18)
 10054c8:	1400012e 	bgeu	r2,r16,10054d0 <__sfvwrite_r+0x88>
 10054cc:	100f883a 	mov	r7,r2
 10054d0:	90c00917 	ldw	r3,36(r18)
 10054d4:	183ee83a 	callr	r3
 10054d8:	1007883a 	mov	r3,r2
 10054dc:	80a1c83a 	sub	r16,r16,r2
 10054e0:	88a3883a 	add	r17,r17,r2
 10054e4:	00806d0e 	bge	zero,r2,100569c <__sfvwrite_r+0x254>
 10054e8:	b0800217 	ldw	r2,8(r22)
 10054ec:	10c5c83a 	sub	r2,r2,r3
 10054f0:	b0800215 	stw	r2,8(r22)
 10054f4:	103fee1e 	bne	r2,zero,10054b0 <__sfvwrite_r+0x68>
 10054f8:	0009883a 	mov	r4,zero
 10054fc:	2005883a 	mov	r2,r4
 1005500:	dfc00a17 	ldw	ra,40(sp)
 1005504:	df000917 	ldw	fp,36(sp)
 1005508:	ddc00817 	ldw	r23,32(sp)
 100550c:	dd800717 	ldw	r22,28(sp)
 1005510:	dd400617 	ldw	r21,24(sp)
 1005514:	dd000517 	ldw	r20,20(sp)
 1005518:	dcc00417 	ldw	r19,16(sp)
 100551c:	dc800317 	ldw	r18,12(sp)
 1005520:	dc400217 	ldw	r17,8(sp)
 1005524:	dc000117 	ldw	r16,4(sp)
 1005528:	dec00b04 	addi	sp,sp,44
 100552c:	f800283a 	ret
 1005530:	10031b00 	call	10031b0 <__swsetup_r>
 1005534:	1000e41e 	bne	r2,zero,10058c8 <__sfvwrite_r+0x480>
 1005538:	91c0030b 	ldhu	r7,12(r18)
 100553c:	b5400017 	ldw	r21,0(r22)
 1005540:	3880008c 	andi	r2,r7,2
 1005544:	103fd81e 	bne	r2,zero,10054a8 <__sfvwrite_r+0x60>
 1005548:	3880004c 	andi	r2,r7,1
 100554c:	1005003a 	cmpeq	r2,r2,zero
 1005550:	10005726 	beq	r2,zero,10056b0 <__sfvwrite_r+0x268>
 1005554:	0029883a 	mov	r20,zero
 1005558:	002f883a 	mov	r23,zero
 100555c:	a0004226 	beq	r20,zero,1005668 <__sfvwrite_r+0x220>
 1005560:	3880800c 	andi	r2,r7,512
 1005564:	94000217 	ldw	r16,8(r18)
 1005568:	10008b26 	beq	r2,zero,1005798 <__sfvwrite_r+0x350>
 100556c:	800d883a 	mov	r6,r16
 1005570:	a400a536 	bltu	r20,r16,1005808 <__sfvwrite_r+0x3c0>
 1005574:	3881200c 	andi	r2,r7,1152
 1005578:	10002726 	beq	r2,zero,1005618 <__sfvwrite_r+0x1d0>
 100557c:	90800517 	ldw	r2,20(r18)
 1005580:	92000417 	ldw	r8,16(r18)
 1005584:	91400017 	ldw	r5,0(r18)
 1005588:	1087883a 	add	r3,r2,r2
 100558c:	1887883a 	add	r3,r3,r2
 1005590:	1808d7fa 	srli	r4,r3,31
 1005594:	2a21c83a 	sub	r16,r5,r8
 1005598:	80800044 	addi	r2,r16,1
 100559c:	20c9883a 	add	r4,r4,r3
 10055a0:	2027d07a 	srai	r19,r4,1
 10055a4:	a085883a 	add	r2,r20,r2
 10055a8:	980d883a 	mov	r6,r19
 10055ac:	9880022e 	bgeu	r19,r2,10055b8 <__sfvwrite_r+0x170>
 10055b0:	1027883a 	mov	r19,r2
 10055b4:	100d883a 	mov	r6,r2
 10055b8:	3881000c 	andi	r2,r7,1024
 10055bc:	1000b826 	beq	r2,zero,10058a0 <__sfvwrite_r+0x458>
 10055c0:	300b883a 	mov	r5,r6
 10055c4:	e009883a 	mov	r4,fp
 10055c8:	1005cbc0 	call	1005cbc <_malloc_r>
 10055cc:	10003126 	beq	r2,zero,1005694 <__sfvwrite_r+0x24c>
 10055d0:	91400417 	ldw	r5,16(r18)
 10055d4:	1009883a 	mov	r4,r2
 10055d8:	800d883a 	mov	r6,r16
 10055dc:	1023883a 	mov	r17,r2
 10055e0:	10064e00 	call	10064e0 <memcpy>
 10055e4:	90c0030b 	ldhu	r3,12(r18)
 10055e8:	00beffc4 	movi	r2,-1025
 10055ec:	1886703a 	and	r3,r3,r2
 10055f0:	18c02014 	ori	r3,r3,128
 10055f4:	90c0030d 	sth	r3,12(r18)
 10055f8:	9c07c83a 	sub	r3,r19,r16
 10055fc:	8c05883a 	add	r2,r17,r16
 1005600:	a00d883a 	mov	r6,r20
 1005604:	a021883a 	mov	r16,r20
 1005608:	90800015 	stw	r2,0(r18)
 100560c:	90c00215 	stw	r3,8(r18)
 1005610:	94400415 	stw	r17,16(r18)
 1005614:	94c00515 	stw	r19,20(r18)
 1005618:	91000017 	ldw	r4,0(r18)
 100561c:	b80b883a 	mov	r5,r23
 1005620:	a023883a 	mov	r17,r20
 1005624:	10065800 	call	1006580 <memmove>
 1005628:	90c00217 	ldw	r3,8(r18)
 100562c:	90800017 	ldw	r2,0(r18)
 1005630:	a027883a 	mov	r19,r20
 1005634:	1c07c83a 	sub	r3,r3,r16
 1005638:	1405883a 	add	r2,r2,r16
 100563c:	90c00215 	stw	r3,8(r18)
 1005640:	a021883a 	mov	r16,r20
 1005644:	90800015 	stw	r2,0(r18)
 1005648:	b0800217 	ldw	r2,8(r22)
 100564c:	1405c83a 	sub	r2,r2,r16
 1005650:	b0800215 	stw	r2,8(r22)
 1005654:	103fa826 	beq	r2,zero,10054f8 <__sfvwrite_r+0xb0>
 1005658:	a469c83a 	sub	r20,r20,r17
 100565c:	91c0030b 	ldhu	r7,12(r18)
 1005660:	bcef883a 	add	r23,r23,r19
 1005664:	a03fbe1e 	bne	r20,zero,1005560 <__sfvwrite_r+0x118>
 1005668:	adc00017 	ldw	r23,0(r21)
 100566c:	ad000117 	ldw	r20,4(r21)
 1005670:	ad400204 	addi	r21,r21,8
 1005674:	003fb906 	br	100555c <__sfvwrite_r+0x114>
 1005678:	ac400017 	ldw	r17,0(r21)
 100567c:	ac000117 	ldw	r16,4(r21)
 1005680:	ad400204 	addi	r21,r21,8
 1005684:	003f8a06 	br	10054b0 <__sfvwrite_r+0x68>
 1005688:	91400417 	ldw	r5,16(r18)
 100568c:	e009883a 	mov	r4,fp
 1005690:	10051340 	call	1005134 <_free_r>
 1005694:	00800304 	movi	r2,12
 1005698:	e0800015 	stw	r2,0(fp)
 100569c:	9080030b 	ldhu	r2,12(r18)
 10056a0:	013fffc4 	movi	r4,-1
 10056a4:	10801014 	ori	r2,r2,64
 10056a8:	9080030d 	sth	r2,12(r18)
 10056ac:	003f9306 	br	10054fc <__sfvwrite_r+0xb4>
 10056b0:	0027883a 	mov	r19,zero
 10056b4:	002f883a 	mov	r23,zero
 10056b8:	d8000015 	stw	zero,0(sp)
 10056bc:	0029883a 	mov	r20,zero
 10056c0:	98001e26 	beq	r19,zero,100573c <__sfvwrite_r+0x2f4>
 10056c4:	d8c00017 	ldw	r3,0(sp)
 10056c8:	1804c03a 	cmpne	r2,r3,zero
 10056cc:	10005e26 	beq	r2,zero,1005848 <__sfvwrite_r+0x400>
 10056d0:	9821883a 	mov	r16,r19
 10056d4:	a4c0012e 	bgeu	r20,r19,10056dc <__sfvwrite_r+0x294>
 10056d8:	a021883a 	mov	r16,r20
 10056dc:	91000017 	ldw	r4,0(r18)
 10056e0:	90800417 	ldw	r2,16(r18)
 10056e4:	91800217 	ldw	r6,8(r18)
 10056e8:	91c00517 	ldw	r7,20(r18)
 10056ec:	1100022e 	bgeu	r2,r4,10056f8 <__sfvwrite_r+0x2b0>
 10056f0:	31e3883a 	add	r17,r6,r7
 10056f4:	8c001616 	blt	r17,r16,1005750 <__sfvwrite_r+0x308>
 10056f8:	81c03816 	blt	r16,r7,10057dc <__sfvwrite_r+0x394>
 10056fc:	90c00917 	ldw	r3,36(r18)
 1005700:	91400717 	ldw	r5,28(r18)
 1005704:	e009883a 	mov	r4,fp
 1005708:	b80d883a 	mov	r6,r23
 100570c:	183ee83a 	callr	r3
 1005710:	1023883a 	mov	r17,r2
 1005714:	00bfe10e 	bge	zero,r2,100569c <__sfvwrite_r+0x254>
 1005718:	a469c83a 	sub	r20,r20,r17
 100571c:	a0001826 	beq	r20,zero,1005780 <__sfvwrite_r+0x338>
 1005720:	b0800217 	ldw	r2,8(r22)
 1005724:	1445c83a 	sub	r2,r2,r17
 1005728:	b0800215 	stw	r2,8(r22)
 100572c:	103f7226 	beq	r2,zero,10054f8 <__sfvwrite_r+0xb0>
 1005730:	9c67c83a 	sub	r19,r19,r17
 1005734:	bc6f883a 	add	r23,r23,r17
 1005738:	983fe21e 	bne	r19,zero,10056c4 <__sfvwrite_r+0x27c>
 100573c:	adc00017 	ldw	r23,0(r21)
 1005740:	acc00117 	ldw	r19,4(r21)
 1005744:	ad400204 	addi	r21,r21,8
 1005748:	d8000015 	stw	zero,0(sp)
 100574c:	003fdc06 	br	10056c0 <__sfvwrite_r+0x278>
 1005750:	b80b883a 	mov	r5,r23
 1005754:	880d883a 	mov	r6,r17
 1005758:	10065800 	call	1006580 <memmove>
 100575c:	90c00017 	ldw	r3,0(r18)
 1005760:	e009883a 	mov	r4,fp
 1005764:	900b883a 	mov	r5,r18
 1005768:	1c47883a 	add	r3,r3,r17
 100576c:	90c00015 	stw	r3,0(r18)
 1005770:	1004ae40 	call	1004ae4 <_fflush_r>
 1005774:	103fc91e 	bne	r2,zero,100569c <__sfvwrite_r+0x254>
 1005778:	a469c83a 	sub	r20,r20,r17
 100577c:	a03fe81e 	bne	r20,zero,1005720 <__sfvwrite_r+0x2d8>
 1005780:	e009883a 	mov	r4,fp
 1005784:	900b883a 	mov	r5,r18
 1005788:	1004ae40 	call	1004ae4 <_fflush_r>
 100578c:	103fc31e 	bne	r2,zero,100569c <__sfvwrite_r+0x254>
 1005790:	d8000015 	stw	zero,0(sp)
 1005794:	003fe206 	br	1005720 <__sfvwrite_r+0x2d8>
 1005798:	91000017 	ldw	r4,0(r18)
 100579c:	90800417 	ldw	r2,16(r18)
 10057a0:	1100022e 	bgeu	r2,r4,10057ac <__sfvwrite_r+0x364>
 10057a4:	8023883a 	mov	r17,r16
 10057a8:	85003136 	bltu	r16,r20,1005870 <__sfvwrite_r+0x428>
 10057ac:	91c00517 	ldw	r7,20(r18)
 10057b0:	a1c01836 	bltu	r20,r7,1005814 <__sfvwrite_r+0x3cc>
 10057b4:	90c00917 	ldw	r3,36(r18)
 10057b8:	91400717 	ldw	r5,28(r18)
 10057bc:	e009883a 	mov	r4,fp
 10057c0:	b80d883a 	mov	r6,r23
 10057c4:	183ee83a 	callr	r3
 10057c8:	1021883a 	mov	r16,r2
 10057cc:	00bfb30e 	bge	zero,r2,100569c <__sfvwrite_r+0x254>
 10057d0:	1023883a 	mov	r17,r2
 10057d4:	1027883a 	mov	r19,r2
 10057d8:	003f9b06 	br	1005648 <__sfvwrite_r+0x200>
 10057dc:	b80b883a 	mov	r5,r23
 10057e0:	800d883a 	mov	r6,r16
 10057e4:	10065800 	call	1006580 <memmove>
 10057e8:	90c00217 	ldw	r3,8(r18)
 10057ec:	90800017 	ldw	r2,0(r18)
 10057f0:	8023883a 	mov	r17,r16
 10057f4:	1c07c83a 	sub	r3,r3,r16
 10057f8:	1405883a 	add	r2,r2,r16
 10057fc:	90c00215 	stw	r3,8(r18)
 1005800:	90800015 	stw	r2,0(r18)
 1005804:	003fc406 	br	1005718 <__sfvwrite_r+0x2d0>
 1005808:	a00d883a 	mov	r6,r20
 100580c:	a021883a 	mov	r16,r20
 1005810:	003f8106 	br	1005618 <__sfvwrite_r+0x1d0>
 1005814:	b80b883a 	mov	r5,r23
 1005818:	a00d883a 	mov	r6,r20
 100581c:	10065800 	call	1006580 <memmove>
 1005820:	90c00217 	ldw	r3,8(r18)
 1005824:	90800017 	ldw	r2,0(r18)
 1005828:	a021883a 	mov	r16,r20
 100582c:	1d07c83a 	sub	r3,r3,r20
 1005830:	1505883a 	add	r2,r2,r20
 1005834:	a023883a 	mov	r17,r20
 1005838:	a027883a 	mov	r19,r20
 100583c:	90c00215 	stw	r3,8(r18)
 1005840:	90800015 	stw	r2,0(r18)
 1005844:	003f8006 	br	1005648 <__sfvwrite_r+0x200>
 1005848:	b809883a 	mov	r4,r23
 100584c:	01400284 	movi	r5,10
 1005850:	980d883a 	mov	r6,r19
 1005854:	10063fc0 	call	10063fc <memchr>
 1005858:	10001726 	beq	r2,zero,10058b8 <__sfvwrite_r+0x470>
 100585c:	15c5c83a 	sub	r2,r2,r23
 1005860:	15000044 	addi	r20,r2,1
 1005864:	00800044 	movi	r2,1
 1005868:	d8800015 	stw	r2,0(sp)
 100586c:	003f9806 	br	10056d0 <__sfvwrite_r+0x288>
 1005870:	b80b883a 	mov	r5,r23
 1005874:	800d883a 	mov	r6,r16
 1005878:	10065800 	call	1006580 <memmove>
 100587c:	90c00017 	ldw	r3,0(r18)
 1005880:	e009883a 	mov	r4,fp
 1005884:	900b883a 	mov	r5,r18
 1005888:	1c07883a 	add	r3,r3,r16
 100588c:	90c00015 	stw	r3,0(r18)
 1005890:	8027883a 	mov	r19,r16
 1005894:	1004ae40 	call	1004ae4 <_fflush_r>
 1005898:	103f6b26 	beq	r2,zero,1005648 <__sfvwrite_r+0x200>
 100589c:	003f7f06 	br	100569c <__sfvwrite_r+0x254>
 10058a0:	400b883a 	mov	r5,r8
 10058a4:	e009883a 	mov	r4,fp
 10058a8:	10077840 	call	1007784 <_realloc_r>
 10058ac:	103f7626 	beq	r2,zero,1005688 <__sfvwrite_r+0x240>
 10058b0:	1023883a 	mov	r17,r2
 10058b4:	003f5006 	br	10055f8 <__sfvwrite_r+0x1b0>
 10058b8:	00c00044 	movi	r3,1
 10058bc:	9d000044 	addi	r20,r19,1
 10058c0:	d8c00015 	stw	r3,0(sp)
 10058c4:	003f8206 	br	10056d0 <__sfvwrite_r+0x288>
 10058c8:	9080030b 	ldhu	r2,12(r18)
 10058cc:	00c00244 	movi	r3,9
 10058d0:	013fffc4 	movi	r4,-1
 10058d4:	10801014 	ori	r2,r2,64
 10058d8:	9080030d 	sth	r2,12(r18)
 10058dc:	e0c00015 	stw	r3,0(fp)
 10058e0:	003f0606 	br	10054fc <__sfvwrite_r+0xb4>

010058e4 <_fwalk_reent>:
 10058e4:	defff704 	addi	sp,sp,-36
 10058e8:	dcc00315 	stw	r19,12(sp)
 10058ec:	24c0b804 	addi	r19,r4,736
 10058f0:	dd800615 	stw	r22,24(sp)
 10058f4:	dd400515 	stw	r21,20(sp)
 10058f8:	dfc00815 	stw	ra,32(sp)
 10058fc:	ddc00715 	stw	r23,28(sp)
 1005900:	dd000415 	stw	r20,16(sp)
 1005904:	dc800215 	stw	r18,8(sp)
 1005908:	dc400115 	stw	r17,4(sp)
 100590c:	dc000015 	stw	r16,0(sp)
 1005910:	202b883a 	mov	r21,r4
 1005914:	282d883a 	mov	r22,r5
 1005918:	1004d6c0 	call	1004d6c <__sfp_lock_acquire>
 100591c:	98002126 	beq	r19,zero,10059a4 <_fwalk_reent+0xc0>
 1005920:	002f883a 	mov	r23,zero
 1005924:	9c800117 	ldw	r18,4(r19)
 1005928:	9c000217 	ldw	r16,8(r19)
 100592c:	90bfffc4 	addi	r2,r18,-1
 1005930:	10000d16 	blt	r2,zero,1005968 <_fwalk_reent+0x84>
 1005934:	0023883a 	mov	r17,zero
 1005938:	053fffc4 	movi	r20,-1
 100593c:	8080030f 	ldh	r2,12(r16)
 1005940:	8c400044 	addi	r17,r17,1
 1005944:	10000626 	beq	r2,zero,1005960 <_fwalk_reent+0x7c>
 1005948:	8080038f 	ldh	r2,14(r16)
 100594c:	800b883a 	mov	r5,r16
 1005950:	a809883a 	mov	r4,r21
 1005954:	15000226 	beq	r2,r20,1005960 <_fwalk_reent+0x7c>
 1005958:	b03ee83a 	callr	r22
 100595c:	b8aeb03a 	or	r23,r23,r2
 1005960:	84001704 	addi	r16,r16,92
 1005964:	947ff51e 	bne	r18,r17,100593c <_fwalk_reent+0x58>
 1005968:	9cc00017 	ldw	r19,0(r19)
 100596c:	983fed1e 	bne	r19,zero,1005924 <_fwalk_reent+0x40>
 1005970:	1004d700 	call	1004d70 <__sfp_lock_release>
 1005974:	b805883a 	mov	r2,r23
 1005978:	dfc00817 	ldw	ra,32(sp)
 100597c:	ddc00717 	ldw	r23,28(sp)
 1005980:	dd800617 	ldw	r22,24(sp)
 1005984:	dd400517 	ldw	r21,20(sp)
 1005988:	dd000417 	ldw	r20,16(sp)
 100598c:	dcc00317 	ldw	r19,12(sp)
 1005990:	dc800217 	ldw	r18,8(sp)
 1005994:	dc400117 	ldw	r17,4(sp)
 1005998:	dc000017 	ldw	r16,0(sp)
 100599c:	dec00904 	addi	sp,sp,36
 10059a0:	f800283a 	ret
 10059a4:	002f883a 	mov	r23,zero
 10059a8:	003ff106 	br	1005970 <_fwalk_reent+0x8c>

010059ac <_fwalk>:
 10059ac:	defff804 	addi	sp,sp,-32
 10059b0:	dcc00315 	stw	r19,12(sp)
 10059b4:	24c0b804 	addi	r19,r4,736
 10059b8:	dd400515 	stw	r21,20(sp)
 10059bc:	dfc00715 	stw	ra,28(sp)
 10059c0:	dd800615 	stw	r22,24(sp)
 10059c4:	dd000415 	stw	r20,16(sp)
 10059c8:	dc800215 	stw	r18,8(sp)
 10059cc:	dc400115 	stw	r17,4(sp)
 10059d0:	dc000015 	stw	r16,0(sp)
 10059d4:	282b883a 	mov	r21,r5
 10059d8:	1004d6c0 	call	1004d6c <__sfp_lock_acquire>
 10059dc:	98001f26 	beq	r19,zero,1005a5c <_fwalk+0xb0>
 10059e0:	002d883a 	mov	r22,zero
 10059e4:	9c800117 	ldw	r18,4(r19)
 10059e8:	9c000217 	ldw	r16,8(r19)
 10059ec:	90bfffc4 	addi	r2,r18,-1
 10059f0:	10000c16 	blt	r2,zero,1005a24 <_fwalk+0x78>
 10059f4:	0023883a 	mov	r17,zero
 10059f8:	053fffc4 	movi	r20,-1
 10059fc:	8080030f 	ldh	r2,12(r16)
 1005a00:	8c400044 	addi	r17,r17,1
 1005a04:	10000526 	beq	r2,zero,1005a1c <_fwalk+0x70>
 1005a08:	8080038f 	ldh	r2,14(r16)
 1005a0c:	8009883a 	mov	r4,r16
 1005a10:	15000226 	beq	r2,r20,1005a1c <_fwalk+0x70>
 1005a14:	a83ee83a 	callr	r21
 1005a18:	b0acb03a 	or	r22,r22,r2
 1005a1c:	84001704 	addi	r16,r16,92
 1005a20:	947ff61e 	bne	r18,r17,10059fc <_fwalk+0x50>
 1005a24:	9cc00017 	ldw	r19,0(r19)
 1005a28:	983fee1e 	bne	r19,zero,10059e4 <_fwalk+0x38>
 1005a2c:	1004d700 	call	1004d70 <__sfp_lock_release>
 1005a30:	b005883a 	mov	r2,r22
 1005a34:	dfc00717 	ldw	ra,28(sp)
 1005a38:	dd800617 	ldw	r22,24(sp)
 1005a3c:	dd400517 	ldw	r21,20(sp)
 1005a40:	dd000417 	ldw	r20,16(sp)
 1005a44:	dcc00317 	ldw	r19,12(sp)
 1005a48:	dc800217 	ldw	r18,8(sp)
 1005a4c:	dc400117 	ldw	r17,4(sp)
 1005a50:	dc000017 	ldw	r16,0(sp)
 1005a54:	dec00804 	addi	sp,sp,32
 1005a58:	f800283a 	ret
 1005a5c:	002d883a 	mov	r22,zero
 1005a60:	003ff206 	br	1005a2c <_fwalk+0x80>

01005a64 <__locale_charset>:
 1005a64:	d0a00317 	ldw	r2,-32756(gp)
 1005a68:	f800283a 	ret

01005a6c <_localeconv_r>:
 1005a6c:	00804074 	movhi	r2,257
 1005a70:	108a0204 	addi	r2,r2,10248
 1005a74:	f800283a 	ret

01005a78 <localeconv>:
 1005a78:	00804074 	movhi	r2,257
 1005a7c:	10915604 	addi	r2,r2,17752
 1005a80:	11000017 	ldw	r4,0(r2)
 1005a84:	1005a6c1 	jmpi	1005a6c <_localeconv_r>

01005a88 <_setlocale_r>:
 1005a88:	defffc04 	addi	sp,sp,-16
 1005a8c:	00c04074 	movhi	r3,257
 1005a90:	18c9fd04 	addi	r3,r3,10228
 1005a94:	dc800215 	stw	r18,8(sp)
 1005a98:	dc400115 	stw	r17,4(sp)
 1005a9c:	dc000015 	stw	r16,0(sp)
 1005aa0:	2023883a 	mov	r17,r4
 1005aa4:	2825883a 	mov	r18,r5
 1005aa8:	dfc00315 	stw	ra,12(sp)
 1005aac:	3021883a 	mov	r16,r6
 1005ab0:	3009883a 	mov	r4,r6
 1005ab4:	180b883a 	mov	r5,r3
 1005ab8:	30000926 	beq	r6,zero,1005ae0 <_setlocale_r+0x58>
 1005abc:	1007fa40 	call	1007fa4 <strcmp>
 1005ac0:	8009883a 	mov	r4,r16
 1005ac4:	01404074 	movhi	r5,257
 1005ac8:	2949e804 	addi	r5,r5,10144
 1005acc:	10000b1e 	bne	r2,zero,1005afc <_setlocale_r+0x74>
 1005ad0:	8c000d15 	stw	r16,52(r17)
 1005ad4:	8c800c15 	stw	r18,48(r17)
 1005ad8:	00c04074 	movhi	r3,257
 1005adc:	18c9fd04 	addi	r3,r3,10228
 1005ae0:	1805883a 	mov	r2,r3
 1005ae4:	dfc00317 	ldw	ra,12(sp)
 1005ae8:	dc800217 	ldw	r18,8(sp)
 1005aec:	dc400117 	ldw	r17,4(sp)
 1005af0:	dc000017 	ldw	r16,0(sp)
 1005af4:	dec00404 	addi	sp,sp,16
 1005af8:	f800283a 	ret
 1005afc:	1007fa40 	call	1007fa4 <strcmp>
 1005b00:	0007883a 	mov	r3,zero
 1005b04:	103ff226 	beq	r2,zero,1005ad0 <_setlocale_r+0x48>
 1005b08:	003ff506 	br	1005ae0 <_setlocale_r+0x58>

01005b0c <setlocale>:
 1005b0c:	01804074 	movhi	r6,257
 1005b10:	31915604 	addi	r6,r6,17752
 1005b14:	2007883a 	mov	r3,r4
 1005b18:	31000017 	ldw	r4,0(r6)
 1005b1c:	280d883a 	mov	r6,r5
 1005b20:	180b883a 	mov	r5,r3
 1005b24:	1005a881 	jmpi	1005a88 <_setlocale_r>

01005b28 <__smakebuf_r>:
 1005b28:	2880030b 	ldhu	r2,12(r5)
 1005b2c:	deffed04 	addi	sp,sp,-76
 1005b30:	dc401015 	stw	r17,64(sp)
 1005b34:	1080008c 	andi	r2,r2,2
 1005b38:	dc000f15 	stw	r16,60(sp)
 1005b3c:	dfc01215 	stw	ra,72(sp)
 1005b40:	dc801115 	stw	r18,68(sp)
 1005b44:	2821883a 	mov	r16,r5
 1005b48:	2023883a 	mov	r17,r4
 1005b4c:	10000b26 	beq	r2,zero,1005b7c <__smakebuf_r+0x54>
 1005b50:	28c010c4 	addi	r3,r5,67
 1005b54:	00800044 	movi	r2,1
 1005b58:	28800515 	stw	r2,20(r5)
 1005b5c:	28c00415 	stw	r3,16(r5)
 1005b60:	28c00015 	stw	r3,0(r5)
 1005b64:	dfc01217 	ldw	ra,72(sp)
 1005b68:	dc801117 	ldw	r18,68(sp)
 1005b6c:	dc401017 	ldw	r17,64(sp)
 1005b70:	dc000f17 	ldw	r16,60(sp)
 1005b74:	dec01304 	addi	sp,sp,76
 1005b78:	f800283a 	ret
 1005b7c:	2940038f 	ldh	r5,14(r5)
 1005b80:	28002116 	blt	r5,zero,1005c08 <__smakebuf_r+0xe0>
 1005b84:	d80d883a 	mov	r6,sp
 1005b88:	10083340 	call	1008334 <_fstat_r>
 1005b8c:	10001e16 	blt	r2,zero,1005c08 <__smakebuf_r+0xe0>
 1005b90:	d8800117 	ldw	r2,4(sp)
 1005b94:	00e00014 	movui	r3,32768
 1005b98:	113c000c 	andi	r4,r2,61440
 1005b9c:	20c03126 	beq	r4,r3,1005c64 <__smakebuf_r+0x13c>
 1005ba0:	8080030b 	ldhu	r2,12(r16)
 1005ba4:	00c80004 	movi	r3,8192
 1005ba8:	10820014 	ori	r2,r2,2048
 1005bac:	8080030d 	sth	r2,12(r16)
 1005bb0:	20c01e26 	beq	r4,r3,1005c2c <__smakebuf_r+0x104>
 1005bb4:	04810004 	movi	r18,1024
 1005bb8:	8809883a 	mov	r4,r17
 1005bbc:	900b883a 	mov	r5,r18
 1005bc0:	1005cbc0 	call	1005cbc <_malloc_r>
 1005bc4:	1009883a 	mov	r4,r2
 1005bc8:	10003126 	beq	r2,zero,1005c90 <__smakebuf_r+0x168>
 1005bcc:	80c0030b 	ldhu	r3,12(r16)
 1005bd0:	00804034 	movhi	r2,256
 1005bd4:	10939804 	addi	r2,r2,20064
 1005bd8:	88800f15 	stw	r2,60(r17)
 1005bdc:	18c02014 	ori	r3,r3,128
 1005be0:	84800515 	stw	r18,20(r16)
 1005be4:	80c0030d 	sth	r3,12(r16)
 1005be8:	81000415 	stw	r4,16(r16)
 1005bec:	81000015 	stw	r4,0(r16)
 1005bf0:	dfc01217 	ldw	ra,72(sp)
 1005bf4:	dc801117 	ldw	r18,68(sp)
 1005bf8:	dc401017 	ldw	r17,64(sp)
 1005bfc:	dc000f17 	ldw	r16,60(sp)
 1005c00:	dec01304 	addi	sp,sp,76
 1005c04:	f800283a 	ret
 1005c08:	80c0030b 	ldhu	r3,12(r16)
 1005c0c:	1880200c 	andi	r2,r3,128
 1005c10:	10000426 	beq	r2,zero,1005c24 <__smakebuf_r+0xfc>
 1005c14:	04801004 	movi	r18,64
 1005c18:	18820014 	ori	r2,r3,2048
 1005c1c:	8080030d 	sth	r2,12(r16)
 1005c20:	003fe506 	br	1005bb8 <__smakebuf_r+0x90>
 1005c24:	04810004 	movi	r18,1024
 1005c28:	003ffb06 	br	1005c18 <__smakebuf_r+0xf0>
 1005c2c:	8140038f 	ldh	r5,14(r16)
 1005c30:	8809883a 	mov	r4,r17
 1005c34:	10083a80 	call	10083a8 <_isatty_r>
 1005c38:	103fde26 	beq	r2,zero,1005bb4 <__smakebuf_r+0x8c>
 1005c3c:	8080030b 	ldhu	r2,12(r16)
 1005c40:	80c010c4 	addi	r3,r16,67
 1005c44:	04810004 	movi	r18,1024
 1005c48:	10800054 	ori	r2,r2,1
 1005c4c:	8080030d 	sth	r2,12(r16)
 1005c50:	00800044 	movi	r2,1
 1005c54:	80c00415 	stw	r3,16(r16)
 1005c58:	80800515 	stw	r2,20(r16)
 1005c5c:	80c00015 	stw	r3,0(r16)
 1005c60:	003fd506 	br	1005bb8 <__smakebuf_r+0x90>
 1005c64:	80c00a17 	ldw	r3,40(r16)
 1005c68:	00804034 	movhi	r2,256
 1005c6c:	109f9804 	addi	r2,r2,32352
 1005c70:	18bfcb1e 	bne	r3,r2,1005ba0 <__smakebuf_r+0x78>
 1005c74:	8080030b 	ldhu	r2,12(r16)
 1005c78:	00c10004 	movi	r3,1024
 1005c7c:	1825883a 	mov	r18,r3
 1005c80:	10c4b03a 	or	r2,r2,r3
 1005c84:	8080030d 	sth	r2,12(r16)
 1005c88:	80c01315 	stw	r3,76(r16)
 1005c8c:	003fca06 	br	1005bb8 <__smakebuf_r+0x90>
 1005c90:	8100030b 	ldhu	r4,12(r16)
 1005c94:	2080800c 	andi	r2,r4,512
 1005c98:	103fb21e 	bne	r2,zero,1005b64 <__smakebuf_r+0x3c>
 1005c9c:	80c010c4 	addi	r3,r16,67
 1005ca0:	21000094 	ori	r4,r4,2
 1005ca4:	00800044 	movi	r2,1
 1005ca8:	80800515 	stw	r2,20(r16)
 1005cac:	8100030d 	sth	r4,12(r16)
 1005cb0:	80c00415 	stw	r3,16(r16)
 1005cb4:	80c00015 	stw	r3,0(r16)
 1005cb8:	003faa06 	br	1005b64 <__smakebuf_r+0x3c>

01005cbc <_malloc_r>:
 1005cbc:	defff604 	addi	sp,sp,-40
 1005cc0:	28c002c4 	addi	r3,r5,11
 1005cc4:	00800584 	movi	r2,22
 1005cc8:	dc800215 	stw	r18,8(sp)
 1005ccc:	dfc00915 	stw	ra,36(sp)
 1005cd0:	df000815 	stw	fp,32(sp)
 1005cd4:	ddc00715 	stw	r23,28(sp)
 1005cd8:	dd800615 	stw	r22,24(sp)
 1005cdc:	dd400515 	stw	r21,20(sp)
 1005ce0:	dd000415 	stw	r20,16(sp)
 1005ce4:	dcc00315 	stw	r19,12(sp)
 1005ce8:	dc400115 	stw	r17,4(sp)
 1005cec:	dc000015 	stw	r16,0(sp)
 1005cf0:	2025883a 	mov	r18,r4
 1005cf4:	10c01236 	bltu	r2,r3,1005d40 <_malloc_r+0x84>
 1005cf8:	04400404 	movi	r17,16
 1005cfc:	8940142e 	bgeu	r17,r5,1005d50 <_malloc_r+0x94>
 1005d00:	00800304 	movi	r2,12
 1005d04:	0007883a 	mov	r3,zero
 1005d08:	90800015 	stw	r2,0(r18)
 1005d0c:	1805883a 	mov	r2,r3
 1005d10:	dfc00917 	ldw	ra,36(sp)
 1005d14:	df000817 	ldw	fp,32(sp)
 1005d18:	ddc00717 	ldw	r23,28(sp)
 1005d1c:	dd800617 	ldw	r22,24(sp)
 1005d20:	dd400517 	ldw	r21,20(sp)
 1005d24:	dd000417 	ldw	r20,16(sp)
 1005d28:	dcc00317 	ldw	r19,12(sp)
 1005d2c:	dc800217 	ldw	r18,8(sp)
 1005d30:	dc400117 	ldw	r17,4(sp)
 1005d34:	dc000017 	ldw	r16,0(sp)
 1005d38:	dec00a04 	addi	sp,sp,40
 1005d3c:	f800283a 	ret
 1005d40:	00bffe04 	movi	r2,-8
 1005d44:	18a2703a 	and	r17,r3,r2
 1005d48:	883fed16 	blt	r17,zero,1005d00 <_malloc_r+0x44>
 1005d4c:	897fec36 	bltu	r17,r5,1005d00 <_malloc_r+0x44>
 1005d50:	9009883a 	mov	r4,r18
 1005d54:	100ae040 	call	100ae04 <__malloc_lock>
 1005d58:	00807dc4 	movi	r2,503
 1005d5c:	14402b2e 	bgeu	r2,r17,1005e0c <_malloc_r+0x150>
 1005d60:	8806d27a 	srli	r3,r17,9
 1005d64:	18003f1e 	bne	r3,zero,1005e64 <_malloc_r+0x1a8>
 1005d68:	880cd0fa 	srli	r6,r17,3
 1005d6c:	300490fa 	slli	r2,r6,3
 1005d70:	02c04074 	movhi	r11,257
 1005d74:	5acb9504 	addi	r11,r11,11860
 1005d78:	12cb883a 	add	r5,r2,r11
 1005d7c:	2c000317 	ldw	r16,12(r5)
 1005d80:	580f883a 	mov	r7,r11
 1005d84:	2c00041e 	bne	r5,r16,1005d98 <_malloc_r+0xdc>
 1005d88:	00000a06 	br	1005db4 <_malloc_r+0xf8>
 1005d8c:	1800860e 	bge	r3,zero,1005fa8 <_malloc_r+0x2ec>
 1005d90:	84000317 	ldw	r16,12(r16)
 1005d94:	2c000726 	beq	r5,r16,1005db4 <_malloc_r+0xf8>
 1005d98:	80800117 	ldw	r2,4(r16)
 1005d9c:	00ffff04 	movi	r3,-4
 1005da0:	10c8703a 	and	r4,r2,r3
 1005da4:	2447c83a 	sub	r3,r4,r17
 1005da8:	008003c4 	movi	r2,15
 1005dac:	10fff70e 	bge	r2,r3,1005d8c <_malloc_r+0xd0>
 1005db0:	31bfffc4 	addi	r6,r6,-1
 1005db4:	32400044 	addi	r9,r6,1
 1005db8:	02804074 	movhi	r10,257
 1005dbc:	528b9704 	addi	r10,r10,11868
 1005dc0:	54000217 	ldw	r16,8(r10)
 1005dc4:	8280a026 	beq	r16,r10,1006048 <_malloc_r+0x38c>
 1005dc8:	80800117 	ldw	r2,4(r16)
 1005dcc:	00ffff04 	movi	r3,-4
 1005dd0:	10ca703a 	and	r5,r2,r3
 1005dd4:	2c4dc83a 	sub	r6,r5,r17
 1005dd8:	008003c4 	movi	r2,15
 1005ddc:	11808316 	blt	r2,r6,1005fec <_malloc_r+0x330>
 1005de0:	52800315 	stw	r10,12(r10)
 1005de4:	52800215 	stw	r10,8(r10)
 1005de8:	30002916 	blt	r6,zero,1005e90 <_malloc_r+0x1d4>
 1005dec:	8147883a 	add	r3,r16,r5
 1005df0:	18800117 	ldw	r2,4(r3)
 1005df4:	9009883a 	mov	r4,r18
 1005df8:	10800054 	ori	r2,r2,1
 1005dfc:	18800115 	stw	r2,4(r3)
 1005e00:	100ae240 	call	100ae24 <__malloc_unlock>
 1005e04:	80c00204 	addi	r3,r16,8
 1005e08:	003fc006 	br	1005d0c <_malloc_r+0x50>
 1005e0c:	02c04074 	movhi	r11,257
 1005e10:	5acb9504 	addi	r11,r11,11860
 1005e14:	8ac5883a 	add	r2,r17,r11
 1005e18:	14000317 	ldw	r16,12(r2)
 1005e1c:	580f883a 	mov	r7,r11
 1005e20:	8806d0fa 	srli	r3,r17,3
 1005e24:	14006c26 	beq	r2,r16,1005fd8 <_malloc_r+0x31c>
 1005e28:	80c00117 	ldw	r3,4(r16)
 1005e2c:	00bfff04 	movi	r2,-4
 1005e30:	81800317 	ldw	r6,12(r16)
 1005e34:	1886703a 	and	r3,r3,r2
 1005e38:	80c7883a 	add	r3,r16,r3
 1005e3c:	18800117 	ldw	r2,4(r3)
 1005e40:	81400217 	ldw	r5,8(r16)
 1005e44:	9009883a 	mov	r4,r18
 1005e48:	10800054 	ori	r2,r2,1
 1005e4c:	18800115 	stw	r2,4(r3)
 1005e50:	31400215 	stw	r5,8(r6)
 1005e54:	29800315 	stw	r6,12(r5)
 1005e58:	100ae240 	call	100ae24 <__malloc_unlock>
 1005e5c:	80c00204 	addi	r3,r16,8
 1005e60:	003faa06 	br	1005d0c <_malloc_r+0x50>
 1005e64:	00800104 	movi	r2,4
 1005e68:	10c0052e 	bgeu	r2,r3,1005e80 <_malloc_r+0x1c4>
 1005e6c:	00800504 	movi	r2,20
 1005e70:	10c07836 	bltu	r2,r3,1006054 <_malloc_r+0x398>
 1005e74:	198016c4 	addi	r6,r3,91
 1005e78:	300490fa 	slli	r2,r6,3
 1005e7c:	003fbc06 	br	1005d70 <_malloc_r+0xb4>
 1005e80:	8804d1ba 	srli	r2,r17,6
 1005e84:	11800e04 	addi	r6,r2,56
 1005e88:	300490fa 	slli	r2,r6,3
 1005e8c:	003fb806 	br	1005d70 <_malloc_r+0xb4>
 1005e90:	00807fc4 	movi	r2,511
 1005e94:	1140bb36 	bltu	r2,r5,1006184 <_malloc_r+0x4c8>
 1005e98:	2806d0fa 	srli	r3,r5,3
 1005e9c:	573ffe04 	addi	fp,r10,-8
 1005ea0:	00800044 	movi	r2,1
 1005ea4:	180890fa 	slli	r4,r3,3
 1005ea8:	1807d0ba 	srai	r3,r3,2
 1005eac:	e1c00117 	ldw	r7,4(fp)
 1005eb0:	5909883a 	add	r4,r11,r4
 1005eb4:	21400217 	ldw	r5,8(r4)
 1005eb8:	10c4983a 	sll	r2,r2,r3
 1005ebc:	81000315 	stw	r4,12(r16)
 1005ec0:	81400215 	stw	r5,8(r16)
 1005ec4:	388eb03a 	or	r7,r7,r2
 1005ec8:	2c000315 	stw	r16,12(r5)
 1005ecc:	24000215 	stw	r16,8(r4)
 1005ed0:	e1c00115 	stw	r7,4(fp)
 1005ed4:	4807883a 	mov	r3,r9
 1005ed8:	4800cd16 	blt	r9,zero,1006210 <_malloc_r+0x554>
 1005edc:	1807d0ba 	srai	r3,r3,2
 1005ee0:	00800044 	movi	r2,1
 1005ee4:	10c8983a 	sll	r4,r2,r3
 1005ee8:	39004436 	bltu	r7,r4,1005ffc <_malloc_r+0x340>
 1005eec:	21c4703a 	and	r2,r4,r7
 1005ef0:	10000a1e 	bne	r2,zero,1005f1c <_malloc_r+0x260>
 1005ef4:	2109883a 	add	r4,r4,r4
 1005ef8:	00bfff04 	movi	r2,-4
 1005efc:	4884703a 	and	r2,r9,r2
 1005f00:	3906703a 	and	r3,r7,r4
 1005f04:	12400104 	addi	r9,r2,4
 1005f08:	1800041e 	bne	r3,zero,1005f1c <_malloc_r+0x260>
 1005f0c:	2109883a 	add	r4,r4,r4
 1005f10:	3904703a 	and	r2,r7,r4
 1005f14:	4a400104 	addi	r9,r9,4
 1005f18:	103ffc26 	beq	r2,zero,1005f0c <_malloc_r+0x250>
 1005f1c:	480490fa 	slli	r2,r9,3
 1005f20:	4819883a 	mov	r12,r9
 1005f24:	023fff04 	movi	r8,-4
 1005f28:	589b883a 	add	r13,r11,r2
 1005f2c:	6807883a 	mov	r3,r13
 1005f30:	014003c4 	movi	r5,15
 1005f34:	1c000317 	ldw	r16,12(r3)
 1005f38:	1c00041e 	bne	r3,r16,1005f4c <_malloc_r+0x290>
 1005f3c:	0000a706 	br	10061dc <_malloc_r+0x520>
 1005f40:	3000ab0e 	bge	r6,zero,10061f0 <_malloc_r+0x534>
 1005f44:	84000317 	ldw	r16,12(r16)
 1005f48:	1c00a426 	beq	r3,r16,10061dc <_malloc_r+0x520>
 1005f4c:	80800117 	ldw	r2,4(r16)
 1005f50:	1204703a 	and	r2,r2,r8
 1005f54:	144dc83a 	sub	r6,r2,r17
 1005f58:	29bff90e 	bge	r5,r6,1005f40 <_malloc_r+0x284>
 1005f5c:	81000317 	ldw	r4,12(r16)
 1005f60:	80c00217 	ldw	r3,8(r16)
 1005f64:	89400054 	ori	r5,r17,1
 1005f68:	8445883a 	add	r2,r16,r17
 1005f6c:	20c00215 	stw	r3,8(r4)
 1005f70:	19000315 	stw	r4,12(r3)
 1005f74:	81400115 	stw	r5,4(r16)
 1005f78:	1187883a 	add	r3,r2,r6
 1005f7c:	31000054 	ori	r4,r6,1
 1005f80:	50800315 	stw	r2,12(r10)
 1005f84:	50800215 	stw	r2,8(r10)
 1005f88:	19800015 	stw	r6,0(r3)
 1005f8c:	11000115 	stw	r4,4(r2)
 1005f90:	12800215 	stw	r10,8(r2)
 1005f94:	12800315 	stw	r10,12(r2)
 1005f98:	9009883a 	mov	r4,r18
 1005f9c:	100ae240 	call	100ae24 <__malloc_unlock>
 1005fa0:	80c00204 	addi	r3,r16,8
 1005fa4:	003f5906 	br	1005d0c <_malloc_r+0x50>
 1005fa8:	8109883a 	add	r4,r16,r4
 1005fac:	20800117 	ldw	r2,4(r4)
 1005fb0:	80c00217 	ldw	r3,8(r16)
 1005fb4:	81400317 	ldw	r5,12(r16)
 1005fb8:	10800054 	ori	r2,r2,1
 1005fbc:	20800115 	stw	r2,4(r4)
 1005fc0:	28c00215 	stw	r3,8(r5)
 1005fc4:	19400315 	stw	r5,12(r3)
 1005fc8:	9009883a 	mov	r4,r18
 1005fcc:	100ae240 	call	100ae24 <__malloc_unlock>
 1005fd0:	80c00204 	addi	r3,r16,8
 1005fd4:	003f4d06 	br	1005d0c <_malloc_r+0x50>
 1005fd8:	80800204 	addi	r2,r16,8
 1005fdc:	14000317 	ldw	r16,12(r2)
 1005fe0:	143f911e 	bne	r2,r16,1005e28 <_malloc_r+0x16c>
 1005fe4:	1a400084 	addi	r9,r3,2
 1005fe8:	003f7306 	br	1005db8 <_malloc_r+0xfc>
 1005fec:	88c00054 	ori	r3,r17,1
 1005ff0:	8445883a 	add	r2,r16,r17
 1005ff4:	80c00115 	stw	r3,4(r16)
 1005ff8:	003fdf06 	br	1005f78 <_malloc_r+0x2bc>
 1005ffc:	e4000217 	ldw	r16,8(fp)
 1006000:	00bfff04 	movi	r2,-4
 1006004:	80c00117 	ldw	r3,4(r16)
 1006008:	802d883a 	mov	r22,r16
 100600c:	18aa703a 	and	r21,r3,r2
 1006010:	ac401636 	bltu	r21,r17,100606c <_malloc_r+0x3b0>
 1006014:	ac49c83a 	sub	r4,r21,r17
 1006018:	008003c4 	movi	r2,15
 100601c:	1100130e 	bge	r2,r4,100606c <_malloc_r+0x3b0>
 1006020:	88800054 	ori	r2,r17,1
 1006024:	8447883a 	add	r3,r16,r17
 1006028:	80800115 	stw	r2,4(r16)
 100602c:	20800054 	ori	r2,r4,1
 1006030:	18800115 	stw	r2,4(r3)
 1006034:	e0c00215 	stw	r3,8(fp)
 1006038:	9009883a 	mov	r4,r18
 100603c:	100ae240 	call	100ae24 <__malloc_unlock>
 1006040:	80c00204 	addi	r3,r16,8
 1006044:	003f3106 	br	1005d0c <_malloc_r+0x50>
 1006048:	39c00117 	ldw	r7,4(r7)
 100604c:	573ffe04 	addi	fp,r10,-8
 1006050:	003fa006 	br	1005ed4 <_malloc_r+0x218>
 1006054:	00801504 	movi	r2,84
 1006058:	10c06736 	bltu	r2,r3,10061f8 <_malloc_r+0x53c>
 100605c:	8804d33a 	srli	r2,r17,12
 1006060:	11801b84 	addi	r6,r2,110
 1006064:	300490fa 	slli	r2,r6,3
 1006068:	003f4106 	br	1005d70 <_malloc_r+0xb4>
 100606c:	d0a6e717 	ldw	r2,-25700(gp)
 1006070:	d0e00517 	ldw	r3,-32748(gp)
 1006074:	053fffc4 	movi	r20,-1
 1006078:	10800404 	addi	r2,r2,16
 100607c:	88a7883a 	add	r19,r17,r2
 1006080:	1d000326 	beq	r3,r20,1006090 <_malloc_r+0x3d4>
 1006084:	98c3ffc4 	addi	r3,r19,4095
 1006088:	00bc0004 	movi	r2,-4096
 100608c:	18a6703a 	and	r19,r3,r2
 1006090:	9009883a 	mov	r4,r18
 1006094:	980b883a 	mov	r5,r19
 1006098:	1007de80 	call	1007de8 <_sbrk_r>
 100609c:	1009883a 	mov	r4,r2
 10060a0:	15000426 	beq	r2,r20,10060b4 <_malloc_r+0x3f8>
 10060a4:	854b883a 	add	r5,r16,r21
 10060a8:	1029883a 	mov	r20,r2
 10060ac:	11405a2e 	bgeu	r2,r5,1006218 <_malloc_r+0x55c>
 10060b0:	87000c26 	beq	r16,fp,10060e4 <_malloc_r+0x428>
 10060b4:	e4000217 	ldw	r16,8(fp)
 10060b8:	80c00117 	ldw	r3,4(r16)
 10060bc:	00bfff04 	movi	r2,-4
 10060c0:	1884703a 	and	r2,r3,r2
 10060c4:	14400336 	bltu	r2,r17,10060d4 <_malloc_r+0x418>
 10060c8:	1449c83a 	sub	r4,r2,r17
 10060cc:	008003c4 	movi	r2,15
 10060d0:	113fd316 	blt	r2,r4,1006020 <_malloc_r+0x364>
 10060d4:	9009883a 	mov	r4,r18
 10060d8:	100ae240 	call	100ae24 <__malloc_unlock>
 10060dc:	0007883a 	mov	r3,zero
 10060e0:	003f0a06 	br	1005d0c <_malloc_r+0x50>
 10060e4:	05c04074 	movhi	r23,257
 10060e8:	bdd85604 	addi	r23,r23,24920
 10060ec:	b8800017 	ldw	r2,0(r23)
 10060f0:	988d883a 	add	r6,r19,r2
 10060f4:	b9800015 	stw	r6,0(r23)
 10060f8:	d0e00517 	ldw	r3,-32748(gp)
 10060fc:	00bfffc4 	movi	r2,-1
 1006100:	18808e26 	beq	r3,r2,100633c <_malloc_r+0x680>
 1006104:	2145c83a 	sub	r2,r4,r5
 1006108:	3085883a 	add	r2,r6,r2
 100610c:	b8800015 	stw	r2,0(r23)
 1006110:	20c001cc 	andi	r3,r4,7
 1006114:	18005f1e 	bne	r3,zero,1006294 <_malloc_r+0x5d8>
 1006118:	000b883a 	mov	r5,zero
 100611c:	a4c5883a 	add	r2,r20,r19
 1006120:	1083ffcc 	andi	r2,r2,4095
 1006124:	00c40004 	movi	r3,4096
 1006128:	1887c83a 	sub	r3,r3,r2
 100612c:	28e7883a 	add	r19,r5,r3
 1006130:	9009883a 	mov	r4,r18
 1006134:	980b883a 	mov	r5,r19
 1006138:	1007de80 	call	1007de8 <_sbrk_r>
 100613c:	1007883a 	mov	r3,r2
 1006140:	00bfffc4 	movi	r2,-1
 1006144:	18807a26 	beq	r3,r2,1006330 <_malloc_r+0x674>
 1006148:	1d05c83a 	sub	r2,r3,r20
 100614c:	9885883a 	add	r2,r19,r2
 1006150:	10c00054 	ori	r3,r2,1
 1006154:	b8800017 	ldw	r2,0(r23)
 1006158:	a021883a 	mov	r16,r20
 100615c:	a0c00115 	stw	r3,4(r20)
 1006160:	9885883a 	add	r2,r19,r2
 1006164:	b8800015 	stw	r2,0(r23)
 1006168:	e5000215 	stw	r20,8(fp)
 100616c:	b7003626 	beq	r22,fp,1006248 <_malloc_r+0x58c>
 1006170:	018003c4 	movi	r6,15
 1006174:	35404b36 	bltu	r6,r21,10062a4 <_malloc_r+0x5e8>
 1006178:	00800044 	movi	r2,1
 100617c:	a0800115 	stw	r2,4(r20)
 1006180:	003fcd06 	br	10060b8 <_malloc_r+0x3fc>
 1006184:	2808d27a 	srli	r4,r5,9
 1006188:	2000371e 	bne	r4,zero,1006268 <_malloc_r+0x5ac>
 100618c:	2808d0fa 	srli	r4,r5,3
 1006190:	200690fa 	slli	r3,r4,3
 1006194:	1ad1883a 	add	r8,r3,r11
 1006198:	41800217 	ldw	r6,8(r8)
 100619c:	41805b26 	beq	r8,r6,100630c <_malloc_r+0x650>
 10061a0:	30800117 	ldw	r2,4(r6)
 10061a4:	00ffff04 	movi	r3,-4
 10061a8:	10c4703a 	and	r2,r2,r3
 10061ac:	2880022e 	bgeu	r5,r2,10061b8 <_malloc_r+0x4fc>
 10061b0:	31800217 	ldw	r6,8(r6)
 10061b4:	41bffa1e 	bne	r8,r6,10061a0 <_malloc_r+0x4e4>
 10061b8:	32000317 	ldw	r8,12(r6)
 10061bc:	39c00117 	ldw	r7,4(r7)
 10061c0:	82000315 	stw	r8,12(r16)
 10061c4:	81800215 	stw	r6,8(r16)
 10061c8:	07004074 	movhi	fp,257
 10061cc:	e70b9504 	addi	fp,fp,11860
 10061d0:	34000315 	stw	r16,12(r6)
 10061d4:	44000215 	stw	r16,8(r8)
 10061d8:	003f3e06 	br	1005ed4 <_malloc_r+0x218>
 10061dc:	63000044 	addi	r12,r12,1
 10061e0:	608000cc 	andi	r2,r12,3
 10061e4:	10005d26 	beq	r2,zero,100635c <_malloc_r+0x6a0>
 10061e8:	18c00204 	addi	r3,r3,8
 10061ec:	003f5106 	br	1005f34 <_malloc_r+0x278>
 10061f0:	8089883a 	add	r4,r16,r2
 10061f4:	003f6d06 	br	1005fac <_malloc_r+0x2f0>
 10061f8:	00805504 	movi	r2,340
 10061fc:	10c02036 	bltu	r2,r3,1006280 <_malloc_r+0x5c4>
 1006200:	8804d3fa 	srli	r2,r17,15
 1006204:	11801dc4 	addi	r6,r2,119
 1006208:	300490fa 	slli	r2,r6,3
 100620c:	003ed806 	br	1005d70 <_malloc_r+0xb4>
 1006210:	48c000c4 	addi	r3,r9,3
 1006214:	003f3106 	br	1005edc <_malloc_r+0x220>
 1006218:	05c04074 	movhi	r23,257
 100621c:	bdd85604 	addi	r23,r23,24920
 1006220:	b8800017 	ldw	r2,0(r23)
 1006224:	988d883a 	add	r6,r19,r2
 1006228:	b9800015 	stw	r6,0(r23)
 100622c:	293fb21e 	bne	r5,r4,10060f8 <_malloc_r+0x43c>
 1006230:	2083ffcc 	andi	r2,r4,4095
 1006234:	103fb01e 	bne	r2,zero,10060f8 <_malloc_r+0x43c>
 1006238:	e4000217 	ldw	r16,8(fp)
 100623c:	9d45883a 	add	r2,r19,r21
 1006240:	10800054 	ori	r2,r2,1
 1006244:	80800115 	stw	r2,4(r16)
 1006248:	b8c00017 	ldw	r3,0(r23)
 100624c:	d0a6e817 	ldw	r2,-25696(gp)
 1006250:	10c0012e 	bgeu	r2,r3,1006258 <_malloc_r+0x59c>
 1006254:	d0e6e815 	stw	r3,-25696(gp)
 1006258:	d0a6e917 	ldw	r2,-25692(gp)
 100625c:	10ff962e 	bgeu	r2,r3,10060b8 <_malloc_r+0x3fc>
 1006260:	d0e6e915 	stw	r3,-25692(gp)
 1006264:	003f9406 	br	10060b8 <_malloc_r+0x3fc>
 1006268:	00800104 	movi	r2,4
 100626c:	11001e36 	bltu	r2,r4,10062e8 <_malloc_r+0x62c>
 1006270:	2804d1ba 	srli	r2,r5,6
 1006274:	11000e04 	addi	r4,r2,56
 1006278:	200690fa 	slli	r3,r4,3
 100627c:	003fc506 	br	1006194 <_malloc_r+0x4d8>
 1006280:	00815504 	movi	r2,1364
 1006284:	10c01d2e 	bgeu	r2,r3,10062fc <_malloc_r+0x640>
 1006288:	01801f84 	movi	r6,126
 100628c:	0080fc04 	movi	r2,1008
 1006290:	003eb706 	br	1005d70 <_malloc_r+0xb4>
 1006294:	00800204 	movi	r2,8
 1006298:	10cbc83a 	sub	r5,r2,r3
 100629c:	2169883a 	add	r20,r4,r5
 10062a0:	003f9e06 	br	100611c <_malloc_r+0x460>
 10062a4:	00bffe04 	movi	r2,-8
 10062a8:	a93ffd04 	addi	r4,r21,-12
 10062ac:	2088703a 	and	r4,r4,r2
 10062b0:	b10b883a 	add	r5,r22,r4
 10062b4:	00c00144 	movi	r3,5
 10062b8:	28c00215 	stw	r3,8(r5)
 10062bc:	28c00115 	stw	r3,4(r5)
 10062c0:	b0800117 	ldw	r2,4(r22)
 10062c4:	1080004c 	andi	r2,r2,1
 10062c8:	2084b03a 	or	r2,r4,r2
 10062cc:	b0800115 	stw	r2,4(r22)
 10062d0:	313fdd2e 	bgeu	r6,r4,1006248 <_malloc_r+0x58c>
 10062d4:	b1400204 	addi	r5,r22,8
 10062d8:	9009883a 	mov	r4,r18
 10062dc:	10051340 	call	1005134 <_free_r>
 10062e0:	e4000217 	ldw	r16,8(fp)
 10062e4:	003fd806 	br	1006248 <_malloc_r+0x58c>
 10062e8:	00800504 	movi	r2,20
 10062ec:	11001536 	bltu	r2,r4,1006344 <_malloc_r+0x688>
 10062f0:	210016c4 	addi	r4,r4,91
 10062f4:	200690fa 	slli	r3,r4,3
 10062f8:	003fa606 	br	1006194 <_malloc_r+0x4d8>
 10062fc:	8804d4ba 	srli	r2,r17,18
 1006300:	11801f04 	addi	r6,r2,124
 1006304:	300490fa 	slli	r2,r6,3
 1006308:	003e9906 	br	1005d70 <_malloc_r+0xb4>
 100630c:	2009d0ba 	srai	r4,r4,2
 1006310:	01404074 	movhi	r5,257
 1006314:	294b9504 	addi	r5,r5,11860
 1006318:	00c00044 	movi	r3,1
 100631c:	28800117 	ldw	r2,4(r5)
 1006320:	1906983a 	sll	r3,r3,r4
 1006324:	10c4b03a 	or	r2,r2,r3
 1006328:	28800115 	stw	r2,4(r5)
 100632c:	003fa306 	br	10061bc <_malloc_r+0x500>
 1006330:	0027883a 	mov	r19,zero
 1006334:	00c00044 	movi	r3,1
 1006338:	003f8606 	br	1006154 <_malloc_r+0x498>
 100633c:	d1200515 	stw	r4,-32748(gp)
 1006340:	003f7306 	br	1006110 <_malloc_r+0x454>
 1006344:	00801504 	movi	r2,84
 1006348:	11001936 	bltu	r2,r4,10063b0 <_malloc_r+0x6f4>
 100634c:	2804d33a 	srli	r2,r5,12
 1006350:	11001b84 	addi	r4,r2,110
 1006354:	200690fa 	slli	r3,r4,3
 1006358:	003f8e06 	br	1006194 <_malloc_r+0x4d8>
 100635c:	480b883a 	mov	r5,r9
 1006360:	6807883a 	mov	r3,r13
 1006364:	288000cc 	andi	r2,r5,3
 1006368:	18fffe04 	addi	r3,r3,-8
 100636c:	297fffc4 	addi	r5,r5,-1
 1006370:	10001526 	beq	r2,zero,10063c8 <_malloc_r+0x70c>
 1006374:	18800217 	ldw	r2,8(r3)
 1006378:	10fffa26 	beq	r2,r3,1006364 <_malloc_r+0x6a8>
 100637c:	2109883a 	add	r4,r4,r4
 1006380:	393f1e36 	bltu	r7,r4,1005ffc <_malloc_r+0x340>
 1006384:	203f1d26 	beq	r4,zero,1005ffc <_malloc_r+0x340>
 1006388:	21c4703a 	and	r2,r4,r7
 100638c:	10000226 	beq	r2,zero,1006398 <_malloc_r+0x6dc>
 1006390:	6013883a 	mov	r9,r12
 1006394:	003ee106 	br	1005f1c <_malloc_r+0x260>
 1006398:	2109883a 	add	r4,r4,r4
 100639c:	3904703a 	and	r2,r7,r4
 10063a0:	63000104 	addi	r12,r12,4
 10063a4:	103ffc26 	beq	r2,zero,1006398 <_malloc_r+0x6dc>
 10063a8:	6013883a 	mov	r9,r12
 10063ac:	003edb06 	br	1005f1c <_malloc_r+0x260>
 10063b0:	00805504 	movi	r2,340
 10063b4:	11000836 	bltu	r2,r4,10063d8 <_malloc_r+0x71c>
 10063b8:	2804d3fa 	srli	r2,r5,15
 10063bc:	11001dc4 	addi	r4,r2,119
 10063c0:	200690fa 	slli	r3,r4,3
 10063c4:	003f7306 	br	1006194 <_malloc_r+0x4d8>
 10063c8:	0104303a 	nor	r2,zero,r4
 10063cc:	388e703a 	and	r7,r7,r2
 10063d0:	e1c00115 	stw	r7,4(fp)
 10063d4:	003fe906 	br	100637c <_malloc_r+0x6c0>
 10063d8:	00815504 	movi	r2,1364
 10063dc:	1100032e 	bgeu	r2,r4,10063ec <_malloc_r+0x730>
 10063e0:	01001f84 	movi	r4,126
 10063e4:	00c0fc04 	movi	r3,1008
 10063e8:	003f6a06 	br	1006194 <_malloc_r+0x4d8>
 10063ec:	2804d4ba 	srli	r2,r5,18
 10063f0:	11001f04 	addi	r4,r2,124
 10063f4:	200690fa 	slli	r3,r4,3
 10063f8:	003f6606 	br	1006194 <_malloc_r+0x4d8>

010063fc <memchr>:
 10063fc:	008000c4 	movi	r2,3
 1006400:	29403fcc 	andi	r5,r5,255
 1006404:	2007883a 	mov	r3,r4
 1006408:	1180022e 	bgeu	r2,r6,1006414 <memchr+0x18>
 100640c:	2084703a 	and	r2,r4,r2
 1006410:	10000b26 	beq	r2,zero,1006440 <memchr+0x44>
 1006414:	313fffc4 	addi	r4,r6,-1
 1006418:	3000051e 	bne	r6,zero,1006430 <memchr+0x34>
 100641c:	00002c06 	br	10064d0 <memchr+0xd4>
 1006420:	213fffc4 	addi	r4,r4,-1
 1006424:	00bfffc4 	movi	r2,-1
 1006428:	18c00044 	addi	r3,r3,1
 100642c:	20802826 	beq	r4,r2,10064d0 <memchr+0xd4>
 1006430:	18800003 	ldbu	r2,0(r3)
 1006434:	28bffa1e 	bne	r5,r2,1006420 <memchr+0x24>
 1006438:	1805883a 	mov	r2,r3
 100643c:	f800283a 	ret
 1006440:	0011883a 	mov	r8,zero
 1006444:	0007883a 	mov	r3,zero
 1006448:	01c00104 	movi	r7,4
 100644c:	4004923a 	slli	r2,r8,8
 1006450:	18c00044 	addi	r3,r3,1
 1006454:	1151883a 	add	r8,r2,r5
 1006458:	19fffc1e 	bne	r3,r7,100644c <memchr+0x50>
 100645c:	02bfbff4 	movhi	r10,65279
 1006460:	52bfbfc4 	addi	r10,r10,-257
 1006464:	02602074 	movhi	r9,32897
 1006468:	4a602004 	addi	r9,r9,-32640
 100646c:	02c000c4 	movi	r11,3
 1006470:	20800017 	ldw	r2,0(r4)
 1006474:	31bfff04 	addi	r6,r6,-4
 1006478:	200f883a 	mov	r7,r4
 100647c:	1204f03a 	xor	r2,r2,r8
 1006480:	1287883a 	add	r3,r2,r10
 1006484:	1a46703a 	and	r3,r3,r9
 1006488:	0084303a 	nor	r2,zero,r2
 100648c:	10c4703a 	and	r2,r2,r3
 1006490:	10000b26 	beq	r2,zero,10064c0 <memchr+0xc4>
 1006494:	20800003 	ldbu	r2,0(r4)
 1006498:	28800f26 	beq	r5,r2,10064d8 <memchr+0xdc>
 100649c:	20800043 	ldbu	r2,1(r4)
 10064a0:	21c00044 	addi	r7,r4,1
 10064a4:	28800c26 	beq	r5,r2,10064d8 <memchr+0xdc>
 10064a8:	20800083 	ldbu	r2,2(r4)
 10064ac:	21c00084 	addi	r7,r4,2
 10064b0:	28800926 	beq	r5,r2,10064d8 <memchr+0xdc>
 10064b4:	208000c3 	ldbu	r2,3(r4)
 10064b8:	21c000c4 	addi	r7,r4,3
 10064bc:	28800626 	beq	r5,r2,10064d8 <memchr+0xdc>
 10064c0:	21000104 	addi	r4,r4,4
 10064c4:	59bfea36 	bltu	r11,r6,1006470 <memchr+0x74>
 10064c8:	2007883a 	mov	r3,r4
 10064cc:	003fd106 	br	1006414 <memchr+0x18>
 10064d0:	0005883a 	mov	r2,zero
 10064d4:	f800283a 	ret
 10064d8:	3805883a 	mov	r2,r7
 10064dc:	f800283a 	ret

010064e0 <memcpy>:
 10064e0:	01c003c4 	movi	r7,15
 10064e4:	2007883a 	mov	r3,r4
 10064e8:	3980032e 	bgeu	r7,r6,10064f8 <memcpy+0x18>
 10064ec:	2904b03a 	or	r2,r5,r4
 10064f0:	108000cc 	andi	r2,r2,3
 10064f4:	10000926 	beq	r2,zero,100651c <memcpy+0x3c>
 10064f8:	30000626 	beq	r6,zero,1006514 <memcpy+0x34>
 10064fc:	30cd883a 	add	r6,r6,r3
 1006500:	28800003 	ldbu	r2,0(r5)
 1006504:	29400044 	addi	r5,r5,1
 1006508:	18800005 	stb	r2,0(r3)
 100650c:	18c00044 	addi	r3,r3,1
 1006510:	30fffb1e 	bne	r6,r3,1006500 <memcpy+0x20>
 1006514:	2005883a 	mov	r2,r4
 1006518:	f800283a 	ret
 100651c:	3811883a 	mov	r8,r7
 1006520:	200f883a 	mov	r7,r4
 1006524:	28c00017 	ldw	r3,0(r5)
 1006528:	31bffc04 	addi	r6,r6,-16
 100652c:	38c00015 	stw	r3,0(r7)
 1006530:	28800117 	ldw	r2,4(r5)
 1006534:	38800115 	stw	r2,4(r7)
 1006538:	28c00217 	ldw	r3,8(r5)
 100653c:	38c00215 	stw	r3,8(r7)
 1006540:	28800317 	ldw	r2,12(r5)
 1006544:	29400404 	addi	r5,r5,16
 1006548:	38800315 	stw	r2,12(r7)
 100654c:	39c00404 	addi	r7,r7,16
 1006550:	41bff436 	bltu	r8,r6,1006524 <memcpy+0x44>
 1006554:	008000c4 	movi	r2,3
 1006558:	1180072e 	bgeu	r2,r6,1006578 <memcpy+0x98>
 100655c:	1007883a 	mov	r3,r2
 1006560:	28800017 	ldw	r2,0(r5)
 1006564:	31bfff04 	addi	r6,r6,-4
 1006568:	29400104 	addi	r5,r5,4
 100656c:	38800015 	stw	r2,0(r7)
 1006570:	39c00104 	addi	r7,r7,4
 1006574:	19bffa36 	bltu	r3,r6,1006560 <memcpy+0x80>
 1006578:	3807883a 	mov	r3,r7
 100657c:	003fde06 	br	10064f8 <memcpy+0x18>

01006580 <memmove>:
 1006580:	2807883a 	mov	r3,r5
 1006584:	2011883a 	mov	r8,r4
 1006588:	29000c2e 	bgeu	r5,r4,10065bc <memmove+0x3c>
 100658c:	298f883a 	add	r7,r5,r6
 1006590:	21c00a2e 	bgeu	r4,r7,10065bc <memmove+0x3c>
 1006594:	30000726 	beq	r6,zero,10065b4 <memmove+0x34>
 1006598:	2187883a 	add	r3,r4,r6
 100659c:	198dc83a 	sub	r6,r3,r6
 10065a0:	39ffffc4 	addi	r7,r7,-1
 10065a4:	38800003 	ldbu	r2,0(r7)
 10065a8:	18ffffc4 	addi	r3,r3,-1
 10065ac:	18800005 	stb	r2,0(r3)
 10065b0:	19bffb1e 	bne	r3,r6,10065a0 <memmove+0x20>
 10065b4:	2005883a 	mov	r2,r4
 10065b8:	f800283a 	ret
 10065bc:	01c003c4 	movi	r7,15
 10065c0:	39800a36 	bltu	r7,r6,10065ec <memmove+0x6c>
 10065c4:	303ffb26 	beq	r6,zero,10065b4 <memmove+0x34>
 10065c8:	400f883a 	mov	r7,r8
 10065cc:	320d883a 	add	r6,r6,r8
 10065d0:	28800003 	ldbu	r2,0(r5)
 10065d4:	29400044 	addi	r5,r5,1
 10065d8:	38800005 	stb	r2,0(r7)
 10065dc:	39c00044 	addi	r7,r7,1
 10065e0:	39bffb1e 	bne	r7,r6,10065d0 <memmove+0x50>
 10065e4:	2005883a 	mov	r2,r4
 10065e8:	f800283a 	ret
 10065ec:	1904b03a 	or	r2,r3,r4
 10065f0:	108000cc 	andi	r2,r2,3
 10065f4:	103ff31e 	bne	r2,zero,10065c4 <memmove+0x44>
 10065f8:	3811883a 	mov	r8,r7
 10065fc:	180b883a 	mov	r5,r3
 1006600:	200f883a 	mov	r7,r4
 1006604:	28c00017 	ldw	r3,0(r5)
 1006608:	31bffc04 	addi	r6,r6,-16
 100660c:	38c00015 	stw	r3,0(r7)
 1006610:	28800117 	ldw	r2,4(r5)
 1006614:	38800115 	stw	r2,4(r7)
 1006618:	28c00217 	ldw	r3,8(r5)
 100661c:	38c00215 	stw	r3,8(r7)
 1006620:	28800317 	ldw	r2,12(r5)
 1006624:	29400404 	addi	r5,r5,16
 1006628:	38800315 	stw	r2,12(r7)
 100662c:	39c00404 	addi	r7,r7,16
 1006630:	41bff436 	bltu	r8,r6,1006604 <memmove+0x84>
 1006634:	008000c4 	movi	r2,3
 1006638:	1180072e 	bgeu	r2,r6,1006658 <memmove+0xd8>
 100663c:	1007883a 	mov	r3,r2
 1006640:	28800017 	ldw	r2,0(r5)
 1006644:	31bfff04 	addi	r6,r6,-4
 1006648:	29400104 	addi	r5,r5,4
 100664c:	38800015 	stw	r2,0(r7)
 1006650:	39c00104 	addi	r7,r7,4
 1006654:	19bffa36 	bltu	r3,r6,1006640 <memmove+0xc0>
 1006658:	3811883a 	mov	r8,r7
 100665c:	003fd906 	br	10065c4 <memmove+0x44>

01006660 <memset>:
 1006660:	008000c4 	movi	r2,3
 1006664:	29403fcc 	andi	r5,r5,255
 1006668:	2007883a 	mov	r3,r4
 100666c:	1180022e 	bgeu	r2,r6,1006678 <memset+0x18>
 1006670:	2084703a 	and	r2,r4,r2
 1006674:	10000826 	beq	r2,zero,1006698 <memset+0x38>
 1006678:	30000526 	beq	r6,zero,1006690 <memset+0x30>
 100667c:	2805883a 	mov	r2,r5
 1006680:	30cd883a 	add	r6,r6,r3
 1006684:	18800005 	stb	r2,0(r3)
 1006688:	18c00044 	addi	r3,r3,1
 100668c:	19bffd1e 	bne	r3,r6,1006684 <memset+0x24>
 1006690:	2005883a 	mov	r2,r4
 1006694:	f800283a 	ret
 1006698:	2804923a 	slli	r2,r5,8
 100669c:	020003c4 	movi	r8,15
 10066a0:	200f883a 	mov	r7,r4
 10066a4:	2884b03a 	or	r2,r5,r2
 10066a8:	1006943a 	slli	r3,r2,16
 10066ac:	10c6b03a 	or	r3,r2,r3
 10066b0:	41800a2e 	bgeu	r8,r6,10066dc <memset+0x7c>
 10066b4:	4005883a 	mov	r2,r8
 10066b8:	31bffc04 	addi	r6,r6,-16
 10066bc:	38c00015 	stw	r3,0(r7)
 10066c0:	38c00115 	stw	r3,4(r7)
 10066c4:	38c00215 	stw	r3,8(r7)
 10066c8:	38c00315 	stw	r3,12(r7)
 10066cc:	39c00404 	addi	r7,r7,16
 10066d0:	11bff936 	bltu	r2,r6,10066b8 <memset+0x58>
 10066d4:	008000c4 	movi	r2,3
 10066d8:	1180052e 	bgeu	r2,r6,10066f0 <memset+0x90>
 10066dc:	31bfff04 	addi	r6,r6,-4
 10066e0:	008000c4 	movi	r2,3
 10066e4:	38c00015 	stw	r3,0(r7)
 10066e8:	39c00104 	addi	r7,r7,4
 10066ec:	11bffb36 	bltu	r2,r6,10066dc <memset+0x7c>
 10066f0:	3807883a 	mov	r3,r7
 10066f4:	003fe006 	br	1006678 <memset+0x18>

010066f8 <_Bfree>:
 10066f8:	28000826 	beq	r5,zero,100671c <_Bfree+0x24>
 10066fc:	28800117 	ldw	r2,4(r5)
 1006700:	21001317 	ldw	r4,76(r4)
 1006704:	1085883a 	add	r2,r2,r2
 1006708:	1085883a 	add	r2,r2,r2
 100670c:	1105883a 	add	r2,r2,r4
 1006710:	10c00017 	ldw	r3,0(r2)
 1006714:	28c00015 	stw	r3,0(r5)
 1006718:	11400015 	stw	r5,0(r2)
 100671c:	f800283a 	ret

01006720 <__hi0bits>:
 1006720:	20bfffec 	andhi	r2,r4,65535
 1006724:	10001426 	beq	r2,zero,1006778 <__hi0bits+0x58>
 1006728:	0007883a 	mov	r3,zero
 100672c:	20bfc02c 	andhi	r2,r4,65280
 1006730:	1000021e 	bne	r2,zero,100673c <__hi0bits+0x1c>
 1006734:	2008923a 	slli	r4,r4,8
 1006738:	18c00204 	addi	r3,r3,8
 100673c:	20bc002c 	andhi	r2,r4,61440
 1006740:	1000021e 	bne	r2,zero,100674c <__hi0bits+0x2c>
 1006744:	2008913a 	slli	r4,r4,4
 1006748:	18c00104 	addi	r3,r3,4
 100674c:	20b0002c 	andhi	r2,r4,49152
 1006750:	1000031e 	bne	r2,zero,1006760 <__hi0bits+0x40>
 1006754:	2105883a 	add	r2,r4,r4
 1006758:	18c00084 	addi	r3,r3,2
 100675c:	1089883a 	add	r4,r2,r2
 1006760:	20000316 	blt	r4,zero,1006770 <__hi0bits+0x50>
 1006764:	2090002c 	andhi	r2,r4,16384
 1006768:	10000626 	beq	r2,zero,1006784 <__hi0bits+0x64>
 100676c:	18c00044 	addi	r3,r3,1
 1006770:	1805883a 	mov	r2,r3
 1006774:	f800283a 	ret
 1006778:	2008943a 	slli	r4,r4,16
 100677c:	00c00404 	movi	r3,16
 1006780:	003fea06 	br	100672c <__hi0bits+0xc>
 1006784:	00c00804 	movi	r3,32
 1006788:	1805883a 	mov	r2,r3
 100678c:	f800283a 	ret

01006790 <__lo0bits>:
 1006790:	20c00017 	ldw	r3,0(r4)
 1006794:	188001cc 	andi	r2,r3,7
 1006798:	10000a26 	beq	r2,zero,10067c4 <__lo0bits+0x34>
 100679c:	1880004c 	andi	r2,r3,1
 10067a0:	1005003a 	cmpeq	r2,r2,zero
 10067a4:	10002126 	beq	r2,zero,100682c <__lo0bits+0x9c>
 10067a8:	1880008c 	andi	r2,r3,2
 10067ac:	1000251e 	bne	r2,zero,1006844 <__lo0bits+0xb4>
 10067b0:	1804d0ba 	srli	r2,r3,2
 10067b4:	01400084 	movi	r5,2
 10067b8:	20800015 	stw	r2,0(r4)
 10067bc:	2805883a 	mov	r2,r5
 10067c0:	f800283a 	ret
 10067c4:	18bfffcc 	andi	r2,r3,65535
 10067c8:	10001526 	beq	r2,zero,1006820 <__lo0bits+0x90>
 10067cc:	000b883a 	mov	r5,zero
 10067d0:	18803fcc 	andi	r2,r3,255
 10067d4:	1000021e 	bne	r2,zero,10067e0 <__lo0bits+0x50>
 10067d8:	1806d23a 	srli	r3,r3,8
 10067dc:	29400204 	addi	r5,r5,8
 10067e0:	188003cc 	andi	r2,r3,15
 10067e4:	1000021e 	bne	r2,zero,10067f0 <__lo0bits+0x60>
 10067e8:	1806d13a 	srli	r3,r3,4
 10067ec:	29400104 	addi	r5,r5,4
 10067f0:	188000cc 	andi	r2,r3,3
 10067f4:	1000021e 	bne	r2,zero,1006800 <__lo0bits+0x70>
 10067f8:	1806d0ba 	srli	r3,r3,2
 10067fc:	29400084 	addi	r5,r5,2
 1006800:	1880004c 	andi	r2,r3,1
 1006804:	1000031e 	bne	r2,zero,1006814 <__lo0bits+0x84>
 1006808:	1806d07a 	srli	r3,r3,1
 100680c:	18000a26 	beq	r3,zero,1006838 <__lo0bits+0xa8>
 1006810:	29400044 	addi	r5,r5,1
 1006814:	2805883a 	mov	r2,r5
 1006818:	20c00015 	stw	r3,0(r4)
 100681c:	f800283a 	ret
 1006820:	1806d43a 	srli	r3,r3,16
 1006824:	01400404 	movi	r5,16
 1006828:	003fe906 	br	10067d0 <__lo0bits+0x40>
 100682c:	000b883a 	mov	r5,zero
 1006830:	2805883a 	mov	r2,r5
 1006834:	f800283a 	ret
 1006838:	01400804 	movi	r5,32
 100683c:	2805883a 	mov	r2,r5
 1006840:	f800283a 	ret
 1006844:	1804d07a 	srli	r2,r3,1
 1006848:	01400044 	movi	r5,1
 100684c:	20800015 	stw	r2,0(r4)
 1006850:	003fda06 	br	10067bc <__lo0bits+0x2c>

01006854 <__mcmp>:
 1006854:	20800417 	ldw	r2,16(r4)
 1006858:	28c00417 	ldw	r3,16(r5)
 100685c:	10cfc83a 	sub	r7,r2,r3
 1006860:	38000c1e 	bne	r7,zero,1006894 <__mcmp+0x40>
 1006864:	18c5883a 	add	r2,r3,r3
 1006868:	1085883a 	add	r2,r2,r2
 100686c:	10c00504 	addi	r3,r2,20
 1006870:	21000504 	addi	r4,r4,20
 1006874:	28cb883a 	add	r5,r5,r3
 1006878:	2085883a 	add	r2,r4,r2
 100687c:	10bfff04 	addi	r2,r2,-4
 1006880:	297fff04 	addi	r5,r5,-4
 1006884:	11800017 	ldw	r6,0(r2)
 1006888:	28c00017 	ldw	r3,0(r5)
 100688c:	30c0031e 	bne	r6,r3,100689c <__mcmp+0x48>
 1006890:	20bffa36 	bltu	r4,r2,100687c <__mcmp+0x28>
 1006894:	3805883a 	mov	r2,r7
 1006898:	f800283a 	ret
 100689c:	30c00336 	bltu	r6,r3,10068ac <__mcmp+0x58>
 10068a0:	01c00044 	movi	r7,1
 10068a4:	3805883a 	mov	r2,r7
 10068a8:	f800283a 	ret
 10068ac:	01ffffc4 	movi	r7,-1
 10068b0:	003ff806 	br	1006894 <__mcmp+0x40>

010068b4 <__ulp>:
 10068b4:	295ffc2c 	andhi	r5,r5,32752
 10068b8:	013f3034 	movhi	r4,64704
 10068bc:	290b883a 	add	r5,r5,r4
 10068c0:	0145c83a 	sub	r2,zero,r5
 10068c4:	1007d53a 	srai	r3,r2,20
 10068c8:	000d883a 	mov	r6,zero
 10068cc:	0140040e 	bge	zero,r5,10068e0 <__ulp+0x2c>
 10068d0:	280f883a 	mov	r7,r5
 10068d4:	3807883a 	mov	r3,r7
 10068d8:	3005883a 	mov	r2,r6
 10068dc:	f800283a 	ret
 10068e0:	008004c4 	movi	r2,19
 10068e4:	193ffb04 	addi	r4,r3,-20
 10068e8:	10c00c0e 	bge	r2,r3,100691c <__ulp+0x68>
 10068ec:	008007c4 	movi	r2,31
 10068f0:	1107c83a 	sub	r3,r2,r4
 10068f4:	00800784 	movi	r2,30
 10068f8:	01400044 	movi	r5,1
 10068fc:	11000216 	blt	r2,r4,1006908 <__ulp+0x54>
 1006900:	00800044 	movi	r2,1
 1006904:	10ca983a 	sll	r5,r2,r3
 1006908:	000f883a 	mov	r7,zero
 100690c:	280d883a 	mov	r6,r5
 1006910:	3807883a 	mov	r3,r7
 1006914:	3005883a 	mov	r2,r6
 1006918:	f800283a 	ret
 100691c:	00800234 	movhi	r2,8
 1006920:	10cfd83a 	sra	r7,r2,r3
 1006924:	000d883a 	mov	r6,zero
 1006928:	3005883a 	mov	r2,r6
 100692c:	3807883a 	mov	r3,r7
 1006930:	f800283a 	ret

01006934 <__b2d>:
 1006934:	20800417 	ldw	r2,16(r4)
 1006938:	defff904 	addi	sp,sp,-28
 100693c:	dd000415 	stw	r20,16(sp)
 1006940:	1085883a 	add	r2,r2,r2
 1006944:	25000504 	addi	r20,r4,20
 1006948:	1085883a 	add	r2,r2,r2
 100694c:	dc000015 	stw	r16,0(sp)
 1006950:	a0a1883a 	add	r16,r20,r2
 1006954:	dd400515 	stw	r21,20(sp)
 1006958:	857fff17 	ldw	r21,-4(r16)
 100695c:	dc400115 	stw	r17,4(sp)
 1006960:	dfc00615 	stw	ra,24(sp)
 1006964:	a809883a 	mov	r4,r21
 1006968:	2823883a 	mov	r17,r5
 100696c:	dcc00315 	stw	r19,12(sp)
 1006970:	dc800215 	stw	r18,8(sp)
 1006974:	10067200 	call	1006720 <__hi0bits>
 1006978:	100b883a 	mov	r5,r2
 100697c:	00800804 	movi	r2,32
 1006980:	1145c83a 	sub	r2,r2,r5
 1006984:	88800015 	stw	r2,0(r17)
 1006988:	00800284 	movi	r2,10
 100698c:	80ffff04 	addi	r3,r16,-4
 1006990:	11401416 	blt	r2,r5,10069e4 <__b2d+0xb0>
 1006994:	008002c4 	movi	r2,11
 1006998:	1149c83a 	sub	r4,r2,r5
 100699c:	a0c02736 	bltu	r20,r3,1006a3c <__b2d+0x108>
 10069a0:	000d883a 	mov	r6,zero
 10069a4:	28800544 	addi	r2,r5,21
 10069a8:	a906d83a 	srl	r3,r21,r4
 10069ac:	a884983a 	sll	r2,r21,r2
 10069b0:	1ccffc34 	orhi	r19,r3,16368
 10069b4:	11a4b03a 	or	r18,r2,r6
 10069b8:	9005883a 	mov	r2,r18
 10069bc:	9807883a 	mov	r3,r19
 10069c0:	dfc00617 	ldw	ra,24(sp)
 10069c4:	dd400517 	ldw	r21,20(sp)
 10069c8:	dd000417 	ldw	r20,16(sp)
 10069cc:	dcc00317 	ldw	r19,12(sp)
 10069d0:	dc800217 	ldw	r18,8(sp)
 10069d4:	dc400117 	ldw	r17,4(sp)
 10069d8:	dc000017 	ldw	r16,0(sp)
 10069dc:	dec00704 	addi	sp,sp,28
 10069e0:	f800283a 	ret
 10069e4:	a0c00e36 	bltu	r20,r3,1006a20 <__b2d+0xec>
 10069e8:	293ffd44 	addi	r4,r5,-11
 10069ec:	000d883a 	mov	r6,zero
 10069f0:	20000f26 	beq	r4,zero,1006a30 <__b2d+0xfc>
 10069f4:	00800804 	movi	r2,32
 10069f8:	110bc83a 	sub	r5,r2,r4
 10069fc:	a0c01236 	bltu	r20,r3,1006a48 <__b2d+0x114>
 1006a00:	000f883a 	mov	r7,zero
 1006a04:	a904983a 	sll	r2,r21,r4
 1006a08:	3146d83a 	srl	r3,r6,r5
 1006a0c:	3108983a 	sll	r4,r6,r4
 1006a10:	108ffc34 	orhi	r2,r2,16368
 1006a14:	18a6b03a 	or	r19,r3,r2
 1006a18:	3924b03a 	or	r18,r7,r4
 1006a1c:	003fe606 	br	10069b8 <__b2d+0x84>
 1006a20:	293ffd44 	addi	r4,r5,-11
 1006a24:	81bffe17 	ldw	r6,-8(r16)
 1006a28:	80fffe04 	addi	r3,r16,-8
 1006a2c:	203ff11e 	bne	r4,zero,10069f4 <__b2d+0xc0>
 1006a30:	accffc34 	orhi	r19,r21,16368
 1006a34:	3025883a 	mov	r18,r6
 1006a38:	003fdf06 	br	10069b8 <__b2d+0x84>
 1006a3c:	18bfff17 	ldw	r2,-4(r3)
 1006a40:	110cd83a 	srl	r6,r2,r4
 1006a44:	003fd706 	br	10069a4 <__b2d+0x70>
 1006a48:	18bfff17 	ldw	r2,-4(r3)
 1006a4c:	114ed83a 	srl	r7,r2,r5
 1006a50:	003fec06 	br	1006a04 <__b2d+0xd0>

01006a54 <__ratio>:
 1006a54:	defff904 	addi	sp,sp,-28
 1006a58:	dc400215 	stw	r17,8(sp)
 1006a5c:	2823883a 	mov	r17,r5
 1006a60:	d80b883a 	mov	r5,sp
 1006a64:	dfc00615 	stw	ra,24(sp)
 1006a68:	dd000515 	stw	r20,20(sp)
 1006a6c:	dcc00415 	stw	r19,16(sp)
 1006a70:	dc800315 	stw	r18,12(sp)
 1006a74:	2025883a 	mov	r18,r4
 1006a78:	10069340 	call	1006934 <__b2d>
 1006a7c:	8809883a 	mov	r4,r17
 1006a80:	d9400104 	addi	r5,sp,4
 1006a84:	1027883a 	mov	r19,r2
 1006a88:	1829883a 	mov	r20,r3
 1006a8c:	10069340 	call	1006934 <__b2d>
 1006a90:	89000417 	ldw	r4,16(r17)
 1006a94:	91c00417 	ldw	r7,16(r18)
 1006a98:	d9800117 	ldw	r6,4(sp)
 1006a9c:	180b883a 	mov	r5,r3
 1006aa0:	390fc83a 	sub	r7,r7,r4
 1006aa4:	1009883a 	mov	r4,r2
 1006aa8:	d8800017 	ldw	r2,0(sp)
 1006aac:	380e917a 	slli	r7,r7,5
 1006ab0:	2011883a 	mov	r8,r4
 1006ab4:	1185c83a 	sub	r2,r2,r6
 1006ab8:	11c5883a 	add	r2,r2,r7
 1006abc:	1006953a 	slli	r3,r2,20
 1006ac0:	2813883a 	mov	r9,r5
 1006ac4:	00800d0e 	bge	zero,r2,1006afc <__ratio+0xa8>
 1006ac8:	1d29883a 	add	r20,r3,r20
 1006acc:	a00b883a 	mov	r5,r20
 1006ad0:	480f883a 	mov	r7,r9
 1006ad4:	9809883a 	mov	r4,r19
 1006ad8:	400d883a 	mov	r6,r8
 1006adc:	1009a9c0 	call	1009a9c <__divdf3>
 1006ae0:	dfc00617 	ldw	ra,24(sp)
 1006ae4:	dd000517 	ldw	r20,20(sp)
 1006ae8:	dcc00417 	ldw	r19,16(sp)
 1006aec:	dc800317 	ldw	r18,12(sp)
 1006af0:	dc400217 	ldw	r17,8(sp)
 1006af4:	dec00704 	addi	sp,sp,28
 1006af8:	f800283a 	ret
 1006afc:	28d3c83a 	sub	r9,r5,r3
 1006b00:	003ff206 	br	1006acc <__ratio+0x78>

01006b04 <_mprec_log10>:
 1006b04:	defffe04 	addi	sp,sp,-8
 1006b08:	008005c4 	movi	r2,23
 1006b0c:	dc000015 	stw	r16,0(sp)
 1006b10:	dfc00115 	stw	ra,4(sp)
 1006b14:	2021883a 	mov	r16,r4
 1006b18:	11000c16 	blt	r2,r4,1006b4c <_mprec_log10+0x48>
 1006b1c:	200490fa 	slli	r2,r4,3
 1006b20:	00c04074 	movhi	r3,257
 1006b24:	18ca0e04 	addi	r3,r3,10296
 1006b28:	10c5883a 	add	r2,r2,r3
 1006b2c:	12400117 	ldw	r9,4(r2)
 1006b30:	12000017 	ldw	r8,0(r2)
 1006b34:	4807883a 	mov	r3,r9
 1006b38:	4005883a 	mov	r2,r8
 1006b3c:	dfc00117 	ldw	ra,4(sp)
 1006b40:	dc000017 	ldw	r16,0(sp)
 1006b44:	dec00204 	addi	sp,sp,8
 1006b48:	f800283a 	ret
 1006b4c:	0011883a 	mov	r8,zero
 1006b50:	024ffc34 	movhi	r9,16368
 1006b54:	0005883a 	mov	r2,zero
 1006b58:	00d00934 	movhi	r3,16420
 1006b5c:	480b883a 	mov	r5,r9
 1006b60:	4009883a 	mov	r4,r8
 1006b64:	180f883a 	mov	r7,r3
 1006b68:	100d883a 	mov	r6,r2
 1006b6c:	10096d80 	call	10096d8 <__muldf3>
 1006b70:	843fffc4 	addi	r16,r16,-1
 1006b74:	1011883a 	mov	r8,r2
 1006b78:	1813883a 	mov	r9,r3
 1006b7c:	803ff51e 	bne	r16,zero,1006b54 <_mprec_log10+0x50>
 1006b80:	4005883a 	mov	r2,r8
 1006b84:	4807883a 	mov	r3,r9
 1006b88:	dfc00117 	ldw	ra,4(sp)
 1006b8c:	dc000017 	ldw	r16,0(sp)
 1006b90:	dec00204 	addi	sp,sp,8
 1006b94:	f800283a 	ret

01006b98 <__copybits>:
 1006b98:	297fffc4 	addi	r5,r5,-1
 1006b9c:	30800417 	ldw	r2,16(r6)
 1006ba0:	280bd17a 	srai	r5,r5,5
 1006ba4:	31800504 	addi	r6,r6,20
 1006ba8:	1085883a 	add	r2,r2,r2
 1006bac:	294b883a 	add	r5,r5,r5
 1006bb0:	294b883a 	add	r5,r5,r5
 1006bb4:	1085883a 	add	r2,r2,r2
 1006bb8:	290b883a 	add	r5,r5,r4
 1006bbc:	3087883a 	add	r3,r6,r2
 1006bc0:	29400104 	addi	r5,r5,4
 1006bc4:	30c0052e 	bgeu	r6,r3,1006bdc <__copybits+0x44>
 1006bc8:	30800017 	ldw	r2,0(r6)
 1006bcc:	31800104 	addi	r6,r6,4
 1006bd0:	20800015 	stw	r2,0(r4)
 1006bd4:	21000104 	addi	r4,r4,4
 1006bd8:	30fffb36 	bltu	r6,r3,1006bc8 <__copybits+0x30>
 1006bdc:	2140032e 	bgeu	r4,r5,1006bec <__copybits+0x54>
 1006be0:	20000015 	stw	zero,0(r4)
 1006be4:	21000104 	addi	r4,r4,4
 1006be8:	217ffd36 	bltu	r4,r5,1006be0 <__copybits+0x48>
 1006bec:	f800283a 	ret

01006bf0 <__any_on>:
 1006bf0:	20800417 	ldw	r2,16(r4)
 1006bf4:	2807d17a 	srai	r3,r5,5
 1006bf8:	21000504 	addi	r4,r4,20
 1006bfc:	10c00d0e 	bge	r2,r3,1006c34 <__any_on+0x44>
 1006c00:	1085883a 	add	r2,r2,r2
 1006c04:	1085883a 	add	r2,r2,r2
 1006c08:	208d883a 	add	r6,r4,r2
 1006c0c:	2180182e 	bgeu	r4,r6,1006c70 <__any_on+0x80>
 1006c10:	30bfff17 	ldw	r2,-4(r6)
 1006c14:	30ffff04 	addi	r3,r6,-4
 1006c18:	1000041e 	bne	r2,zero,1006c2c <__any_on+0x3c>
 1006c1c:	20c0142e 	bgeu	r4,r3,1006c70 <__any_on+0x80>
 1006c20:	18ffff04 	addi	r3,r3,-4
 1006c24:	18800017 	ldw	r2,0(r3)
 1006c28:	103ffc26 	beq	r2,zero,1006c1c <__any_on+0x2c>
 1006c2c:	00800044 	movi	r2,1
 1006c30:	f800283a 	ret
 1006c34:	18800a0e 	bge	r3,r2,1006c60 <__any_on+0x70>
 1006c38:	294007cc 	andi	r5,r5,31
 1006c3c:	28000826 	beq	r5,zero,1006c60 <__any_on+0x70>
 1006c40:	18c5883a 	add	r2,r3,r3
 1006c44:	1085883a 	add	r2,r2,r2
 1006c48:	208d883a 	add	r6,r4,r2
 1006c4c:	30c00017 	ldw	r3,0(r6)
 1006c50:	1944d83a 	srl	r2,r3,r5
 1006c54:	1144983a 	sll	r2,r2,r5
 1006c58:	18bff41e 	bne	r3,r2,1006c2c <__any_on+0x3c>
 1006c5c:	003feb06 	br	1006c0c <__any_on+0x1c>
 1006c60:	18c5883a 	add	r2,r3,r3
 1006c64:	1085883a 	add	r2,r2,r2
 1006c68:	208d883a 	add	r6,r4,r2
 1006c6c:	003fe706 	br	1006c0c <__any_on+0x1c>
 1006c70:	0005883a 	mov	r2,zero
 1006c74:	f800283a 	ret

01006c78 <_Balloc>:
 1006c78:	20c01317 	ldw	r3,76(r4)
 1006c7c:	defffb04 	addi	sp,sp,-20
 1006c80:	dcc00315 	stw	r19,12(sp)
 1006c84:	dc800215 	stw	r18,8(sp)
 1006c88:	dfc00415 	stw	ra,16(sp)
 1006c8c:	2825883a 	mov	r18,r5
 1006c90:	dc400115 	stw	r17,4(sp)
 1006c94:	dc000015 	stw	r16,0(sp)
 1006c98:	2027883a 	mov	r19,r4
 1006c9c:	01800404 	movi	r6,16
 1006ca0:	01400104 	movi	r5,4
 1006ca4:	18001726 	beq	r3,zero,1006d04 <_Balloc+0x8c>
 1006ca8:	01400044 	movi	r5,1
 1006cac:	9485883a 	add	r2,r18,r18
 1006cb0:	2ca2983a 	sll	r17,r5,r18
 1006cb4:	1085883a 	add	r2,r2,r2
 1006cb8:	10c7883a 	add	r3,r2,r3
 1006cbc:	1c000017 	ldw	r16,0(r3)
 1006cc0:	8c4d883a 	add	r6,r17,r17
 1006cc4:	318d883a 	add	r6,r6,r6
 1006cc8:	9809883a 	mov	r4,r19
 1006ccc:	31800504 	addi	r6,r6,20
 1006cd0:	80001226 	beq	r16,zero,1006d1c <_Balloc+0xa4>
 1006cd4:	80800017 	ldw	r2,0(r16)
 1006cd8:	18800015 	stw	r2,0(r3)
 1006cdc:	80000415 	stw	zero,16(r16)
 1006ce0:	80000315 	stw	zero,12(r16)
 1006ce4:	8005883a 	mov	r2,r16
 1006ce8:	dfc00417 	ldw	ra,16(sp)
 1006cec:	dcc00317 	ldw	r19,12(sp)
 1006cf0:	dc800217 	ldw	r18,8(sp)
 1006cf4:	dc400117 	ldw	r17,4(sp)
 1006cf8:	dc000017 	ldw	r16,0(sp)
 1006cfc:	dec00504 	addi	sp,sp,20
 1006d00:	f800283a 	ret
 1006d04:	10080d80 	call	10080d8 <_calloc_r>
 1006d08:	1007883a 	mov	r3,r2
 1006d0c:	0021883a 	mov	r16,zero
 1006d10:	98801315 	stw	r2,76(r19)
 1006d14:	103fe41e 	bne	r2,zero,1006ca8 <_Balloc+0x30>
 1006d18:	003ff206 	br	1006ce4 <_Balloc+0x6c>
 1006d1c:	10080d80 	call	10080d8 <_calloc_r>
 1006d20:	103ff026 	beq	r2,zero,1006ce4 <_Balloc+0x6c>
 1006d24:	1021883a 	mov	r16,r2
 1006d28:	14800115 	stw	r18,4(r2)
 1006d2c:	14400215 	stw	r17,8(r2)
 1006d30:	003fea06 	br	1006cdc <_Balloc+0x64>

01006d34 <__d2b>:
 1006d34:	defff504 	addi	sp,sp,-44
 1006d38:	dcc00515 	stw	r19,20(sp)
 1006d3c:	04c00044 	movi	r19,1
 1006d40:	dc000215 	stw	r16,8(sp)
 1006d44:	2821883a 	mov	r16,r5
 1006d48:	980b883a 	mov	r5,r19
 1006d4c:	ddc00915 	stw	r23,36(sp)
 1006d50:	dd800815 	stw	r22,32(sp)
 1006d54:	dd400715 	stw	r21,28(sp)
 1006d58:	dd000615 	stw	r20,24(sp)
 1006d5c:	dc800415 	stw	r18,16(sp)
 1006d60:	dc400315 	stw	r17,12(sp)
 1006d64:	dfc00a15 	stw	ra,40(sp)
 1006d68:	3023883a 	mov	r17,r6
 1006d6c:	382d883a 	mov	r22,r7
 1006d70:	ddc00b17 	ldw	r23,44(sp)
 1006d74:	1006c780 	call	1006c78 <_Balloc>
 1006d78:	1025883a 	mov	r18,r2
 1006d7c:	00a00034 	movhi	r2,32768
 1006d80:	10bfffc4 	addi	r2,r2,-1
 1006d84:	8888703a 	and	r4,r17,r2
 1006d88:	202ad53a 	srli	r21,r4,20
 1006d8c:	00800434 	movhi	r2,16
 1006d90:	10bfffc4 	addi	r2,r2,-1
 1006d94:	8886703a 	and	r3,r17,r2
 1006d98:	a829003a 	cmpeq	r20,r21,zero
 1006d9c:	800b883a 	mov	r5,r16
 1006da0:	d8c00115 	stw	r3,4(sp)
 1006da4:	94000504 	addi	r16,r18,20
 1006da8:	a000021e 	bne	r20,zero,1006db4 <__d2b+0x80>
 1006dac:	18c00434 	orhi	r3,r3,16
 1006db0:	d8c00115 	stw	r3,4(sp)
 1006db4:	28002726 	beq	r5,zero,1006e54 <__d2b+0x120>
 1006db8:	d809883a 	mov	r4,sp
 1006dbc:	d9400015 	stw	r5,0(sp)
 1006dc0:	10067900 	call	1006790 <__lo0bits>
 1006dc4:	100d883a 	mov	r6,r2
 1006dc8:	10003526 	beq	r2,zero,1006ea0 <__d2b+0x16c>
 1006dcc:	d8c00117 	ldw	r3,4(sp)
 1006dd0:	00800804 	movi	r2,32
 1006dd4:	1185c83a 	sub	r2,r2,r6
 1006dd8:	d9000017 	ldw	r4,0(sp)
 1006ddc:	1886983a 	sll	r3,r3,r2
 1006de0:	1906b03a 	or	r3,r3,r4
 1006de4:	90c00515 	stw	r3,20(r18)
 1006de8:	d8c00117 	ldw	r3,4(sp)
 1006dec:	1986d83a 	srl	r3,r3,r6
 1006df0:	d8c00115 	stw	r3,4(sp)
 1006df4:	180b003a 	cmpeq	r5,r3,zero
 1006df8:	00800084 	movi	r2,2
 1006dfc:	114bc83a 	sub	r5,r2,r5
 1006e00:	80c00115 	stw	r3,4(r16)
 1006e04:	91400415 	stw	r5,16(r18)
 1006e08:	a0001a1e 	bne	r20,zero,1006e74 <__d2b+0x140>
 1006e0c:	3545883a 	add	r2,r6,r21
 1006e10:	10bef344 	addi	r2,r2,-1075
 1006e14:	00c00d44 	movi	r3,53
 1006e18:	b0800015 	stw	r2,0(r22)
 1006e1c:	1987c83a 	sub	r3,r3,r6
 1006e20:	b8c00015 	stw	r3,0(r23)
 1006e24:	9005883a 	mov	r2,r18
 1006e28:	dfc00a17 	ldw	ra,40(sp)
 1006e2c:	ddc00917 	ldw	r23,36(sp)
 1006e30:	dd800817 	ldw	r22,32(sp)
 1006e34:	dd400717 	ldw	r21,28(sp)
 1006e38:	dd000617 	ldw	r20,24(sp)
 1006e3c:	dcc00517 	ldw	r19,20(sp)
 1006e40:	dc800417 	ldw	r18,16(sp)
 1006e44:	dc400317 	ldw	r17,12(sp)
 1006e48:	dc000217 	ldw	r16,8(sp)
 1006e4c:	dec00b04 	addi	sp,sp,44
 1006e50:	f800283a 	ret
 1006e54:	d9000104 	addi	r4,sp,4
 1006e58:	10067900 	call	1006790 <__lo0bits>
 1006e5c:	11800804 	addi	r6,r2,32
 1006e60:	d8800117 	ldw	r2,4(sp)
 1006e64:	94c00415 	stw	r19,16(r18)
 1006e68:	980b883a 	mov	r5,r19
 1006e6c:	90800515 	stw	r2,20(r18)
 1006e70:	a03fe626 	beq	r20,zero,1006e0c <__d2b+0xd8>
 1006e74:	2945883a 	add	r2,r5,r5
 1006e78:	1085883a 	add	r2,r2,r2
 1006e7c:	1405883a 	add	r2,r2,r16
 1006e80:	113fff17 	ldw	r4,-4(r2)
 1006e84:	30fef384 	addi	r3,r6,-1074
 1006e88:	2820917a 	slli	r16,r5,5
 1006e8c:	b0c00015 	stw	r3,0(r22)
 1006e90:	10067200 	call	1006720 <__hi0bits>
 1006e94:	80a1c83a 	sub	r16,r16,r2
 1006e98:	bc000015 	stw	r16,0(r23)
 1006e9c:	003fe106 	br	1006e24 <__d2b+0xf0>
 1006ea0:	d8800017 	ldw	r2,0(sp)
 1006ea4:	90800515 	stw	r2,20(r18)
 1006ea8:	d8c00117 	ldw	r3,4(sp)
 1006eac:	003fd106 	br	1006df4 <__d2b+0xc0>

01006eb0 <__mdiff>:
 1006eb0:	defffb04 	addi	sp,sp,-20
 1006eb4:	dc000015 	stw	r16,0(sp)
 1006eb8:	2821883a 	mov	r16,r5
 1006ebc:	dc800215 	stw	r18,8(sp)
 1006ec0:	300b883a 	mov	r5,r6
 1006ec4:	2025883a 	mov	r18,r4
 1006ec8:	8009883a 	mov	r4,r16
 1006ecc:	dc400115 	stw	r17,4(sp)
 1006ed0:	dfc00415 	stw	ra,16(sp)
 1006ed4:	dcc00315 	stw	r19,12(sp)
 1006ed8:	3023883a 	mov	r17,r6
 1006edc:	10068540 	call	1006854 <__mcmp>
 1006ee0:	10004226 	beq	r2,zero,1006fec <__mdiff+0x13c>
 1006ee4:	10005016 	blt	r2,zero,1007028 <__mdiff+0x178>
 1006ee8:	0027883a 	mov	r19,zero
 1006eec:	81400117 	ldw	r5,4(r16)
 1006ef0:	9009883a 	mov	r4,r18
 1006ef4:	1006c780 	call	1006c78 <_Balloc>
 1006ef8:	1019883a 	mov	r12,r2
 1006efc:	82800417 	ldw	r10,16(r16)
 1006f00:	88800417 	ldw	r2,16(r17)
 1006f04:	81800504 	addi	r6,r16,20
 1006f08:	5287883a 	add	r3,r10,r10
 1006f0c:	1085883a 	add	r2,r2,r2
 1006f10:	18c7883a 	add	r3,r3,r3
 1006f14:	1085883a 	add	r2,r2,r2
 1006f18:	8a000504 	addi	r8,r17,20
 1006f1c:	64c00315 	stw	r19,12(r12)
 1006f20:	30db883a 	add	r13,r6,r3
 1006f24:	4097883a 	add	r11,r8,r2
 1006f28:	61c00504 	addi	r7,r12,20
 1006f2c:	0013883a 	mov	r9,zero
 1006f30:	31000017 	ldw	r4,0(r6)
 1006f34:	41400017 	ldw	r5,0(r8)
 1006f38:	42000104 	addi	r8,r8,4
 1006f3c:	20bfffcc 	andi	r2,r4,65535
 1006f40:	28ffffcc 	andi	r3,r5,65535
 1006f44:	10c5c83a 	sub	r2,r2,r3
 1006f48:	1245883a 	add	r2,r2,r9
 1006f4c:	2008d43a 	srli	r4,r4,16
 1006f50:	280ad43a 	srli	r5,r5,16
 1006f54:	1007d43a 	srai	r3,r2,16
 1006f58:	3880000d 	sth	r2,0(r7)
 1006f5c:	2149c83a 	sub	r4,r4,r5
 1006f60:	20c9883a 	add	r4,r4,r3
 1006f64:	3900008d 	sth	r4,2(r7)
 1006f68:	31800104 	addi	r6,r6,4
 1006f6c:	39c00104 	addi	r7,r7,4
 1006f70:	2013d43a 	srai	r9,r4,16
 1006f74:	42ffee36 	bltu	r8,r11,1006f30 <__mdiff+0x80>
 1006f78:	33400c2e 	bgeu	r6,r13,1006fac <__mdiff+0xfc>
 1006f7c:	30800017 	ldw	r2,0(r6)
 1006f80:	31800104 	addi	r6,r6,4
 1006f84:	10ffffcc 	andi	r3,r2,65535
 1006f88:	1a47883a 	add	r3,r3,r9
 1006f8c:	1004d43a 	srli	r2,r2,16
 1006f90:	1809d43a 	srai	r4,r3,16
 1006f94:	38c0000d 	sth	r3,0(r7)
 1006f98:	1105883a 	add	r2,r2,r4
 1006f9c:	3880008d 	sth	r2,2(r7)
 1006fa0:	1013d43a 	srai	r9,r2,16
 1006fa4:	39c00104 	addi	r7,r7,4
 1006fa8:	337ff436 	bltu	r6,r13,1006f7c <__mdiff+0xcc>
 1006fac:	38bfff17 	ldw	r2,-4(r7)
 1006fb0:	38ffff04 	addi	r3,r7,-4
 1006fb4:	1000041e 	bne	r2,zero,1006fc8 <__mdiff+0x118>
 1006fb8:	18ffff04 	addi	r3,r3,-4
 1006fbc:	18800017 	ldw	r2,0(r3)
 1006fc0:	52bfffc4 	addi	r10,r10,-1
 1006fc4:	103ffc26 	beq	r2,zero,1006fb8 <__mdiff+0x108>
 1006fc8:	6005883a 	mov	r2,r12
 1006fcc:	62800415 	stw	r10,16(r12)
 1006fd0:	dfc00417 	ldw	ra,16(sp)
 1006fd4:	dcc00317 	ldw	r19,12(sp)
 1006fd8:	dc800217 	ldw	r18,8(sp)
 1006fdc:	dc400117 	ldw	r17,4(sp)
 1006fe0:	dc000017 	ldw	r16,0(sp)
 1006fe4:	dec00504 	addi	sp,sp,20
 1006fe8:	f800283a 	ret
 1006fec:	9009883a 	mov	r4,r18
 1006ff0:	000b883a 	mov	r5,zero
 1006ff4:	1006c780 	call	1006c78 <_Balloc>
 1006ff8:	1019883a 	mov	r12,r2
 1006ffc:	00800044 	movi	r2,1
 1007000:	60800415 	stw	r2,16(r12)
 1007004:	6005883a 	mov	r2,r12
 1007008:	60000515 	stw	zero,20(r12)
 100700c:	dfc00417 	ldw	ra,16(sp)
 1007010:	dcc00317 	ldw	r19,12(sp)
 1007014:	dc800217 	ldw	r18,8(sp)
 1007018:	dc400117 	ldw	r17,4(sp)
 100701c:	dc000017 	ldw	r16,0(sp)
 1007020:	dec00504 	addi	sp,sp,20
 1007024:	f800283a 	ret
 1007028:	880d883a 	mov	r6,r17
 100702c:	04c00044 	movi	r19,1
 1007030:	8023883a 	mov	r17,r16
 1007034:	3021883a 	mov	r16,r6
 1007038:	003fac06 	br	1006eec <__mdiff+0x3c>

0100703c <__lshift>:
 100703c:	defff904 	addi	sp,sp,-28
 1007040:	28800417 	ldw	r2,16(r5)
 1007044:	dc000015 	stw	r16,0(sp)
 1007048:	3021d17a 	srai	r16,r6,5
 100704c:	28c00217 	ldw	r3,8(r5)
 1007050:	10800044 	addi	r2,r2,1
 1007054:	dc400115 	stw	r17,4(sp)
 1007058:	80a3883a 	add	r17,r16,r2
 100705c:	dd400515 	stw	r21,20(sp)
 1007060:	dd000415 	stw	r20,16(sp)
 1007064:	dc800215 	stw	r18,8(sp)
 1007068:	dfc00615 	stw	ra,24(sp)
 100706c:	2825883a 	mov	r18,r5
 1007070:	dcc00315 	stw	r19,12(sp)
 1007074:	3029883a 	mov	r20,r6
 1007078:	202b883a 	mov	r21,r4
 100707c:	29400117 	ldw	r5,4(r5)
 1007080:	1c40030e 	bge	r3,r17,1007090 <__lshift+0x54>
 1007084:	18c7883a 	add	r3,r3,r3
 1007088:	29400044 	addi	r5,r5,1
 100708c:	1c7ffd16 	blt	r3,r17,1007084 <__lshift+0x48>
 1007090:	a809883a 	mov	r4,r21
 1007094:	1006c780 	call	1006c78 <_Balloc>
 1007098:	1027883a 	mov	r19,r2
 100709c:	11400504 	addi	r5,r2,20
 10070a0:	0400090e 	bge	zero,r16,10070c8 <__lshift+0x8c>
 10070a4:	2805883a 	mov	r2,r5
 10070a8:	0007883a 	mov	r3,zero
 10070ac:	18c00044 	addi	r3,r3,1
 10070b0:	10000015 	stw	zero,0(r2)
 10070b4:	10800104 	addi	r2,r2,4
 10070b8:	80fffc1e 	bne	r16,r3,10070ac <__lshift+0x70>
 10070bc:	8405883a 	add	r2,r16,r16
 10070c0:	1085883a 	add	r2,r2,r2
 10070c4:	288b883a 	add	r5,r5,r2
 10070c8:	90800417 	ldw	r2,16(r18)
 10070cc:	91000504 	addi	r4,r18,20
 10070d0:	a18007cc 	andi	r6,r20,31
 10070d4:	1085883a 	add	r2,r2,r2
 10070d8:	1085883a 	add	r2,r2,r2
 10070dc:	208f883a 	add	r7,r4,r2
 10070e0:	30001e26 	beq	r6,zero,100715c <__lshift+0x120>
 10070e4:	00800804 	movi	r2,32
 10070e8:	1191c83a 	sub	r8,r2,r6
 10070ec:	0007883a 	mov	r3,zero
 10070f0:	20800017 	ldw	r2,0(r4)
 10070f4:	1184983a 	sll	r2,r2,r6
 10070f8:	1884b03a 	or	r2,r3,r2
 10070fc:	28800015 	stw	r2,0(r5)
 1007100:	20c00017 	ldw	r3,0(r4)
 1007104:	21000104 	addi	r4,r4,4
 1007108:	29400104 	addi	r5,r5,4
 100710c:	1a06d83a 	srl	r3,r3,r8
 1007110:	21fff736 	bltu	r4,r7,10070f0 <__lshift+0xb4>
 1007114:	28c00015 	stw	r3,0(r5)
 1007118:	18000126 	beq	r3,zero,1007120 <__lshift+0xe4>
 100711c:	8c400044 	addi	r17,r17,1
 1007120:	88bfffc4 	addi	r2,r17,-1
 1007124:	98800415 	stw	r2,16(r19)
 1007128:	a809883a 	mov	r4,r21
 100712c:	900b883a 	mov	r5,r18
 1007130:	10066f80 	call	10066f8 <_Bfree>
 1007134:	9805883a 	mov	r2,r19
 1007138:	dfc00617 	ldw	ra,24(sp)
 100713c:	dd400517 	ldw	r21,20(sp)
 1007140:	dd000417 	ldw	r20,16(sp)
 1007144:	dcc00317 	ldw	r19,12(sp)
 1007148:	dc800217 	ldw	r18,8(sp)
 100714c:	dc400117 	ldw	r17,4(sp)
 1007150:	dc000017 	ldw	r16,0(sp)
 1007154:	dec00704 	addi	sp,sp,28
 1007158:	f800283a 	ret
 100715c:	20800017 	ldw	r2,0(r4)
 1007160:	21000104 	addi	r4,r4,4
 1007164:	28800015 	stw	r2,0(r5)
 1007168:	29400104 	addi	r5,r5,4
 100716c:	21ffec2e 	bgeu	r4,r7,1007120 <__lshift+0xe4>
 1007170:	20800017 	ldw	r2,0(r4)
 1007174:	21000104 	addi	r4,r4,4
 1007178:	28800015 	stw	r2,0(r5)
 100717c:	29400104 	addi	r5,r5,4
 1007180:	21fff636 	bltu	r4,r7,100715c <__lshift+0x120>
 1007184:	003fe606 	br	1007120 <__lshift+0xe4>

01007188 <__multiply>:
 1007188:	defff004 	addi	sp,sp,-64
 100718c:	dc800815 	stw	r18,32(sp)
 1007190:	dc400715 	stw	r17,28(sp)
 1007194:	2c800417 	ldw	r18,16(r5)
 1007198:	34400417 	ldw	r17,16(r6)
 100719c:	dcc00915 	stw	r19,36(sp)
 10071a0:	dc000615 	stw	r16,24(sp)
 10071a4:	dfc00f15 	stw	ra,60(sp)
 10071a8:	df000e15 	stw	fp,56(sp)
 10071ac:	ddc00d15 	stw	r23,52(sp)
 10071b0:	dd800c15 	stw	r22,48(sp)
 10071b4:	dd400b15 	stw	r21,44(sp)
 10071b8:	dd000a15 	stw	r20,40(sp)
 10071bc:	2821883a 	mov	r16,r5
 10071c0:	3027883a 	mov	r19,r6
 10071c4:	9440040e 	bge	r18,r17,10071d8 <__multiply+0x50>
 10071c8:	8825883a 	mov	r18,r17
 10071cc:	2c400417 	ldw	r17,16(r5)
 10071d0:	2827883a 	mov	r19,r5
 10071d4:	3021883a 	mov	r16,r6
 10071d8:	80800217 	ldw	r2,8(r16)
 10071dc:	9447883a 	add	r3,r18,r17
 10071e0:	d8c00415 	stw	r3,16(sp)
 10071e4:	81400117 	ldw	r5,4(r16)
 10071e8:	10c0010e 	bge	r2,r3,10071f0 <__multiply+0x68>
 10071ec:	29400044 	addi	r5,r5,1
 10071f0:	1006c780 	call	1006c78 <_Balloc>
 10071f4:	d8800515 	stw	r2,20(sp)
 10071f8:	d9000417 	ldw	r4,16(sp)
 10071fc:	d8c00517 	ldw	r3,20(sp)
 1007200:	2105883a 	add	r2,r4,r4
 1007204:	1085883a 	add	r2,r2,r2
 1007208:	19000504 	addi	r4,r3,20
 100720c:	2085883a 	add	r2,r4,r2
 1007210:	d8800315 	stw	r2,12(sp)
 1007214:	2080052e 	bgeu	r4,r2,100722c <__multiply+0xa4>
 1007218:	2005883a 	mov	r2,r4
 100721c:	d8c00317 	ldw	r3,12(sp)
 1007220:	10000015 	stw	zero,0(r2)
 1007224:	10800104 	addi	r2,r2,4
 1007228:	10fffc36 	bltu	r2,r3,100721c <__multiply+0x94>
 100722c:	8c45883a 	add	r2,r17,r17
 1007230:	9487883a 	add	r3,r18,r18
 1007234:	9dc00504 	addi	r23,r19,20
 1007238:	1085883a 	add	r2,r2,r2
 100723c:	84000504 	addi	r16,r16,20
 1007240:	18c7883a 	add	r3,r3,r3
 1007244:	b885883a 	add	r2,r23,r2
 1007248:	dc000015 	stw	r16,0(sp)
 100724c:	d8800215 	stw	r2,8(sp)
 1007250:	80f9883a 	add	fp,r16,r3
 1007254:	b880432e 	bgeu	r23,r2,1007364 <__multiply+0x1dc>
 1007258:	d9000115 	stw	r4,4(sp)
 100725c:	b9000017 	ldw	r4,0(r23)
 1007260:	253fffcc 	andi	r20,r4,65535
 1007264:	a0001a26 	beq	r20,zero,10072d0 <__multiply+0x148>
 1007268:	dcc00017 	ldw	r19,0(sp)
 100726c:	dc800117 	ldw	r18,4(sp)
 1007270:	002b883a 	mov	r21,zero
 1007274:	9c400017 	ldw	r17,0(r19)
 1007278:	94000017 	ldw	r16,0(r18)
 100727c:	a009883a 	mov	r4,r20
 1007280:	897fffcc 	andi	r5,r17,65535
 1007284:	1000adc0 	call	1000adc <__mulsi3>
 1007288:	880ad43a 	srli	r5,r17,16
 100728c:	80ffffcc 	andi	r3,r16,65535
 1007290:	a8c7883a 	add	r3,r21,r3
 1007294:	a009883a 	mov	r4,r20
 1007298:	10e3883a 	add	r17,r2,r3
 100729c:	8020d43a 	srli	r16,r16,16
 10072a0:	1000adc0 	call	1000adc <__mulsi3>
 10072a4:	8806d43a 	srli	r3,r17,16
 10072a8:	1405883a 	add	r2,r2,r16
 10072ac:	9cc00104 	addi	r19,r19,4
 10072b0:	1887883a 	add	r3,r3,r2
 10072b4:	90c0008d 	sth	r3,2(r18)
 10072b8:	9440000d 	sth	r17,0(r18)
 10072bc:	182ad43a 	srli	r21,r3,16
 10072c0:	94800104 	addi	r18,r18,4
 10072c4:	9f3feb36 	bltu	r19,fp,1007274 <__multiply+0xec>
 10072c8:	95400015 	stw	r21,0(r18)
 10072cc:	b9000017 	ldw	r4,0(r23)
 10072d0:	202ad43a 	srli	r21,r4,16
 10072d4:	a8001c26 	beq	r21,zero,1007348 <__multiply+0x1c0>
 10072d8:	d9000117 	ldw	r4,4(sp)
 10072dc:	dd000017 	ldw	r20,0(sp)
 10072e0:	002d883a 	mov	r22,zero
 10072e4:	24c00017 	ldw	r19,0(r4)
 10072e8:	2025883a 	mov	r18,r4
 10072ec:	9823883a 	mov	r17,r19
 10072f0:	a4000017 	ldw	r16,0(r20)
 10072f4:	a809883a 	mov	r4,r21
 10072f8:	a5000104 	addi	r20,r20,4
 10072fc:	817fffcc 	andi	r5,r16,65535
 1007300:	1000adc0 	call	1000adc <__mulsi3>
 1007304:	8806d43a 	srli	r3,r17,16
 1007308:	800ad43a 	srli	r5,r16,16
 100730c:	94c0000d 	sth	r19,0(r18)
 1007310:	b0c7883a 	add	r3,r22,r3
 1007314:	10e1883a 	add	r16,r2,r3
 1007318:	9400008d 	sth	r16,2(r18)
 100731c:	a809883a 	mov	r4,r21
 1007320:	94800104 	addi	r18,r18,4
 1007324:	1000adc0 	call	1000adc <__mulsi3>
 1007328:	94400017 	ldw	r17,0(r18)
 100732c:	8020d43a 	srli	r16,r16,16
 1007330:	88ffffcc 	andi	r3,r17,65535
 1007334:	10c5883a 	add	r2,r2,r3
 1007338:	80a7883a 	add	r19,r16,r2
 100733c:	982cd43a 	srli	r22,r19,16
 1007340:	a73feb36 	bltu	r20,fp,10072f0 <__multiply+0x168>
 1007344:	94c00015 	stw	r19,0(r18)
 1007348:	d8800217 	ldw	r2,8(sp)
 100734c:	bdc00104 	addi	r23,r23,4
 1007350:	b880042e 	bgeu	r23,r2,1007364 <__multiply+0x1dc>
 1007354:	d8c00117 	ldw	r3,4(sp)
 1007358:	18c00104 	addi	r3,r3,4
 100735c:	d8c00115 	stw	r3,4(sp)
 1007360:	003fbe06 	br	100725c <__multiply+0xd4>
 1007364:	d9000417 	ldw	r4,16(sp)
 1007368:	01000c0e 	bge	zero,r4,100739c <__multiply+0x214>
 100736c:	d8c00317 	ldw	r3,12(sp)
 1007370:	18bfff17 	ldw	r2,-4(r3)
 1007374:	18ffff04 	addi	r3,r3,-4
 1007378:	10000326 	beq	r2,zero,1007388 <__multiply+0x200>
 100737c:	00000706 	br	100739c <__multiply+0x214>
 1007380:	18800017 	ldw	r2,0(r3)
 1007384:	1000051e 	bne	r2,zero,100739c <__multiply+0x214>
 1007388:	d9000417 	ldw	r4,16(sp)
 100738c:	18ffff04 	addi	r3,r3,-4
 1007390:	213fffc4 	addi	r4,r4,-1
 1007394:	d9000415 	stw	r4,16(sp)
 1007398:	203ff91e 	bne	r4,zero,1007380 <__multiply+0x1f8>
 100739c:	d8800417 	ldw	r2,16(sp)
 10073a0:	d8c00517 	ldw	r3,20(sp)
 10073a4:	18800415 	stw	r2,16(r3)
 10073a8:	1805883a 	mov	r2,r3
 10073ac:	dfc00f17 	ldw	ra,60(sp)
 10073b0:	df000e17 	ldw	fp,56(sp)
 10073b4:	ddc00d17 	ldw	r23,52(sp)
 10073b8:	dd800c17 	ldw	r22,48(sp)
 10073bc:	dd400b17 	ldw	r21,44(sp)
 10073c0:	dd000a17 	ldw	r20,40(sp)
 10073c4:	dcc00917 	ldw	r19,36(sp)
 10073c8:	dc800817 	ldw	r18,32(sp)
 10073cc:	dc400717 	ldw	r17,28(sp)
 10073d0:	dc000617 	ldw	r16,24(sp)
 10073d4:	dec01004 	addi	sp,sp,64
 10073d8:	f800283a 	ret

010073dc <__i2b>:
 10073dc:	defffd04 	addi	sp,sp,-12
 10073e0:	dc000015 	stw	r16,0(sp)
 10073e4:	04000044 	movi	r16,1
 10073e8:	dc800115 	stw	r18,4(sp)
 10073ec:	2825883a 	mov	r18,r5
 10073f0:	800b883a 	mov	r5,r16
 10073f4:	dfc00215 	stw	ra,8(sp)
 10073f8:	1006c780 	call	1006c78 <_Balloc>
 10073fc:	14000415 	stw	r16,16(r2)
 1007400:	14800515 	stw	r18,20(r2)
 1007404:	dfc00217 	ldw	ra,8(sp)
 1007408:	dc800117 	ldw	r18,4(sp)
 100740c:	dc000017 	ldw	r16,0(sp)
 1007410:	dec00304 	addi	sp,sp,12
 1007414:	f800283a 	ret

01007418 <__multadd>:
 1007418:	defff604 	addi	sp,sp,-40
 100741c:	dd800615 	stw	r22,24(sp)
 1007420:	2d800417 	ldw	r22,16(r5)
 1007424:	df000815 	stw	fp,32(sp)
 1007428:	ddc00715 	stw	r23,28(sp)
 100742c:	dd400515 	stw	r21,20(sp)
 1007430:	dd000415 	stw	r20,16(sp)
 1007434:	dcc00315 	stw	r19,12(sp)
 1007438:	dc800215 	stw	r18,8(sp)
 100743c:	dfc00915 	stw	ra,36(sp)
 1007440:	dc400115 	stw	r17,4(sp)
 1007444:	dc000015 	stw	r16,0(sp)
 1007448:	282f883a 	mov	r23,r5
 100744c:	2039883a 	mov	fp,r4
 1007450:	302b883a 	mov	r21,r6
 1007454:	3829883a 	mov	r20,r7
 1007458:	2c800504 	addi	r18,r5,20
 100745c:	0027883a 	mov	r19,zero
 1007460:	94400017 	ldw	r17,0(r18)
 1007464:	a80b883a 	mov	r5,r21
 1007468:	9cc00044 	addi	r19,r19,1
 100746c:	893fffcc 	andi	r4,r17,65535
 1007470:	1000adc0 	call	1000adc <__mulsi3>
 1007474:	8808d43a 	srli	r4,r17,16
 1007478:	1521883a 	add	r16,r2,r20
 100747c:	a80b883a 	mov	r5,r21
 1007480:	1000adc0 	call	1000adc <__mulsi3>
 1007484:	8008d43a 	srli	r4,r16,16
 1007488:	843fffcc 	andi	r16,r16,65535
 100748c:	1105883a 	add	r2,r2,r4
 1007490:	1006943a 	slli	r3,r2,16
 1007494:	1028d43a 	srli	r20,r2,16
 1007498:	1c07883a 	add	r3,r3,r16
 100749c:	90c00015 	stw	r3,0(r18)
 10074a0:	94800104 	addi	r18,r18,4
 10074a4:	9dbfee16 	blt	r19,r22,1007460 <__multadd+0x48>
 10074a8:	a0000826 	beq	r20,zero,10074cc <__multadd+0xb4>
 10074ac:	b8800217 	ldw	r2,8(r23)
 10074b0:	b080130e 	bge	r22,r2,1007500 <__multadd+0xe8>
 10074b4:	b585883a 	add	r2,r22,r22
 10074b8:	1085883a 	add	r2,r2,r2
 10074bc:	15c5883a 	add	r2,r2,r23
 10074c0:	b0c00044 	addi	r3,r22,1
 10074c4:	15000515 	stw	r20,20(r2)
 10074c8:	b8c00415 	stw	r3,16(r23)
 10074cc:	b805883a 	mov	r2,r23
 10074d0:	dfc00917 	ldw	ra,36(sp)
 10074d4:	df000817 	ldw	fp,32(sp)
 10074d8:	ddc00717 	ldw	r23,28(sp)
 10074dc:	dd800617 	ldw	r22,24(sp)
 10074e0:	dd400517 	ldw	r21,20(sp)
 10074e4:	dd000417 	ldw	r20,16(sp)
 10074e8:	dcc00317 	ldw	r19,12(sp)
 10074ec:	dc800217 	ldw	r18,8(sp)
 10074f0:	dc400117 	ldw	r17,4(sp)
 10074f4:	dc000017 	ldw	r16,0(sp)
 10074f8:	dec00a04 	addi	sp,sp,40
 10074fc:	f800283a 	ret
 1007500:	b9400117 	ldw	r5,4(r23)
 1007504:	e009883a 	mov	r4,fp
 1007508:	29400044 	addi	r5,r5,1
 100750c:	1006c780 	call	1006c78 <_Balloc>
 1007510:	b9800417 	ldw	r6,16(r23)
 1007514:	b9400304 	addi	r5,r23,12
 1007518:	11000304 	addi	r4,r2,12
 100751c:	318d883a 	add	r6,r6,r6
 1007520:	318d883a 	add	r6,r6,r6
 1007524:	31800204 	addi	r6,r6,8
 1007528:	1023883a 	mov	r17,r2
 100752c:	10064e00 	call	10064e0 <memcpy>
 1007530:	b80b883a 	mov	r5,r23
 1007534:	e009883a 	mov	r4,fp
 1007538:	10066f80 	call	10066f8 <_Bfree>
 100753c:	882f883a 	mov	r23,r17
 1007540:	003fdc06 	br	10074b4 <__multadd+0x9c>

01007544 <__pow5mult>:
 1007544:	defffa04 	addi	sp,sp,-24
 1007548:	308000cc 	andi	r2,r6,3
 100754c:	dd000415 	stw	r20,16(sp)
 1007550:	dcc00315 	stw	r19,12(sp)
 1007554:	dc000015 	stw	r16,0(sp)
 1007558:	dfc00515 	stw	ra,20(sp)
 100755c:	dc800215 	stw	r18,8(sp)
 1007560:	dc400115 	stw	r17,4(sp)
 1007564:	3021883a 	mov	r16,r6
 1007568:	2027883a 	mov	r19,r4
 100756c:	2829883a 	mov	r20,r5
 1007570:	10002b1e 	bne	r2,zero,1007620 <__pow5mult+0xdc>
 1007574:	8025d0ba 	srai	r18,r16,2
 1007578:	90001b26 	beq	r18,zero,10075e8 <__pow5mult+0xa4>
 100757c:	9c001217 	ldw	r16,72(r19)
 1007580:	8000081e 	bne	r16,zero,10075a4 <__pow5mult+0x60>
 1007584:	00003006 	br	1007648 <__pow5mult+0x104>
 1007588:	800b883a 	mov	r5,r16
 100758c:	800d883a 	mov	r6,r16
 1007590:	9809883a 	mov	r4,r19
 1007594:	90001426 	beq	r18,zero,10075e8 <__pow5mult+0xa4>
 1007598:	80800017 	ldw	r2,0(r16)
 100759c:	10001b26 	beq	r2,zero,100760c <__pow5mult+0xc8>
 10075a0:	1021883a 	mov	r16,r2
 10075a4:	9080004c 	andi	r2,r18,1
 10075a8:	1005003a 	cmpeq	r2,r2,zero
 10075ac:	9025d07a 	srai	r18,r18,1
 10075b0:	800d883a 	mov	r6,r16
 10075b4:	9809883a 	mov	r4,r19
 10075b8:	a00b883a 	mov	r5,r20
 10075bc:	103ff21e 	bne	r2,zero,1007588 <__pow5mult+0x44>
 10075c0:	10071880 	call	1007188 <__multiply>
 10075c4:	a00b883a 	mov	r5,r20
 10075c8:	9809883a 	mov	r4,r19
 10075cc:	1023883a 	mov	r17,r2
 10075d0:	10066f80 	call	10066f8 <_Bfree>
 10075d4:	8829883a 	mov	r20,r17
 10075d8:	800b883a 	mov	r5,r16
 10075dc:	800d883a 	mov	r6,r16
 10075e0:	9809883a 	mov	r4,r19
 10075e4:	903fec1e 	bne	r18,zero,1007598 <__pow5mult+0x54>
 10075e8:	a005883a 	mov	r2,r20
 10075ec:	dfc00517 	ldw	ra,20(sp)
 10075f0:	dd000417 	ldw	r20,16(sp)
 10075f4:	dcc00317 	ldw	r19,12(sp)
 10075f8:	dc800217 	ldw	r18,8(sp)
 10075fc:	dc400117 	ldw	r17,4(sp)
 1007600:	dc000017 	ldw	r16,0(sp)
 1007604:	dec00604 	addi	sp,sp,24
 1007608:	f800283a 	ret
 100760c:	10071880 	call	1007188 <__multiply>
 1007610:	80800015 	stw	r2,0(r16)
 1007614:	1021883a 	mov	r16,r2
 1007618:	10000015 	stw	zero,0(r2)
 100761c:	003fe106 	br	10075a4 <__pow5mult+0x60>
 1007620:	1085883a 	add	r2,r2,r2
 1007624:	00c04074 	movhi	r3,257
 1007628:	18ca5404 	addi	r3,r3,10576
 100762c:	1085883a 	add	r2,r2,r2
 1007630:	10c5883a 	add	r2,r2,r3
 1007634:	11bfff17 	ldw	r6,-4(r2)
 1007638:	000f883a 	mov	r7,zero
 100763c:	10074180 	call	1007418 <__multadd>
 1007640:	1029883a 	mov	r20,r2
 1007644:	003fcb06 	br	1007574 <__pow5mult+0x30>
 1007648:	9809883a 	mov	r4,r19
 100764c:	01409c44 	movi	r5,625
 1007650:	10073dc0 	call	10073dc <__i2b>
 1007654:	98801215 	stw	r2,72(r19)
 1007658:	1021883a 	mov	r16,r2
 100765c:	10000015 	stw	zero,0(r2)
 1007660:	003fd006 	br	10075a4 <__pow5mult+0x60>

01007664 <__s2b>:
 1007664:	defff904 	addi	sp,sp,-28
 1007668:	dcc00315 	stw	r19,12(sp)
 100766c:	dc800215 	stw	r18,8(sp)
 1007670:	2827883a 	mov	r19,r5
 1007674:	2025883a 	mov	r18,r4
 1007678:	01400244 	movi	r5,9
 100767c:	39000204 	addi	r4,r7,8
 1007680:	dd000415 	stw	r20,16(sp)
 1007684:	dc400115 	stw	r17,4(sp)
 1007688:	dfc00615 	stw	ra,24(sp)
 100768c:	dd400515 	stw	r21,20(sp)
 1007690:	dc000015 	stw	r16,0(sp)
 1007694:	3829883a 	mov	r20,r7
 1007698:	3023883a 	mov	r17,r6
 100769c:	100a37c0 	call	100a37c <__divsi3>
 10076a0:	00c00044 	movi	r3,1
 10076a4:	1880350e 	bge	r3,r2,100777c <__s2b+0x118>
 10076a8:	000b883a 	mov	r5,zero
 10076ac:	18c7883a 	add	r3,r3,r3
 10076b0:	29400044 	addi	r5,r5,1
 10076b4:	18bffd16 	blt	r3,r2,10076ac <__s2b+0x48>
 10076b8:	9009883a 	mov	r4,r18
 10076bc:	1006c780 	call	1006c78 <_Balloc>
 10076c0:	1011883a 	mov	r8,r2
 10076c4:	d8800717 	ldw	r2,28(sp)
 10076c8:	00c00044 	movi	r3,1
 10076cc:	01800244 	movi	r6,9
 10076d0:	40800515 	stw	r2,20(r8)
 10076d4:	40c00415 	stw	r3,16(r8)
 10076d8:	3440260e 	bge	r6,r17,1007774 <__s2b+0x110>
 10076dc:	3021883a 	mov	r16,r6
 10076e0:	99ab883a 	add	r21,r19,r6
 10076e4:	9c05883a 	add	r2,r19,r16
 10076e8:	11c00007 	ldb	r7,0(r2)
 10076ec:	400b883a 	mov	r5,r8
 10076f0:	9009883a 	mov	r4,r18
 10076f4:	39fff404 	addi	r7,r7,-48
 10076f8:	01800284 	movi	r6,10
 10076fc:	10074180 	call	1007418 <__multadd>
 1007700:	84000044 	addi	r16,r16,1
 1007704:	1011883a 	mov	r8,r2
 1007708:	8c3ff61e 	bne	r17,r16,10076e4 <__s2b+0x80>
 100770c:	ac45883a 	add	r2,r21,r17
 1007710:	117ffe04 	addi	r5,r2,-8
 1007714:	880d883a 	mov	r6,r17
 1007718:	35000c0e 	bge	r6,r20,100774c <__s2b+0xe8>
 100771c:	a185c83a 	sub	r2,r20,r6
 1007720:	2821883a 	mov	r16,r5
 1007724:	28a3883a 	add	r17,r5,r2
 1007728:	81c00007 	ldb	r7,0(r16)
 100772c:	400b883a 	mov	r5,r8
 1007730:	9009883a 	mov	r4,r18
 1007734:	39fff404 	addi	r7,r7,-48
 1007738:	01800284 	movi	r6,10
 100773c:	10074180 	call	1007418 <__multadd>
 1007740:	84000044 	addi	r16,r16,1
 1007744:	1011883a 	mov	r8,r2
 1007748:	847ff71e 	bne	r16,r17,1007728 <__s2b+0xc4>
 100774c:	4005883a 	mov	r2,r8
 1007750:	dfc00617 	ldw	ra,24(sp)
 1007754:	dd400517 	ldw	r21,20(sp)
 1007758:	dd000417 	ldw	r20,16(sp)
 100775c:	dcc00317 	ldw	r19,12(sp)
 1007760:	dc800217 	ldw	r18,8(sp)
 1007764:	dc400117 	ldw	r17,4(sp)
 1007768:	dc000017 	ldw	r16,0(sp)
 100776c:	dec00704 	addi	sp,sp,28
 1007770:	f800283a 	ret
 1007774:	99400284 	addi	r5,r19,10
 1007778:	003fe706 	br	1007718 <__s2b+0xb4>
 100777c:	000b883a 	mov	r5,zero
 1007780:	003fcd06 	br	10076b8 <__s2b+0x54>

01007784 <_realloc_r>:
 1007784:	defff404 	addi	sp,sp,-48
 1007788:	dd800815 	stw	r22,32(sp)
 100778c:	dc800415 	stw	r18,16(sp)
 1007790:	dc400315 	stw	r17,12(sp)
 1007794:	dfc00b15 	stw	ra,44(sp)
 1007798:	df000a15 	stw	fp,40(sp)
 100779c:	ddc00915 	stw	r23,36(sp)
 10077a0:	dd400715 	stw	r21,28(sp)
 10077a4:	dd000615 	stw	r20,24(sp)
 10077a8:	dcc00515 	stw	r19,20(sp)
 10077ac:	dc000215 	stw	r16,8(sp)
 10077b0:	2825883a 	mov	r18,r5
 10077b4:	3023883a 	mov	r17,r6
 10077b8:	202d883a 	mov	r22,r4
 10077bc:	2800c926 	beq	r5,zero,1007ae4 <_realloc_r+0x360>
 10077c0:	100ae040 	call	100ae04 <__malloc_lock>
 10077c4:	943ffe04 	addi	r16,r18,-8
 10077c8:	88c002c4 	addi	r3,r17,11
 10077cc:	00800584 	movi	r2,22
 10077d0:	82000117 	ldw	r8,4(r16)
 10077d4:	10c01b2e 	bgeu	r2,r3,1007844 <_realloc_r+0xc0>
 10077d8:	00bffe04 	movi	r2,-8
 10077dc:	188e703a 	and	r7,r3,r2
 10077e0:	3839883a 	mov	fp,r7
 10077e4:	38001a16 	blt	r7,zero,1007850 <_realloc_r+0xcc>
 10077e8:	e4401936 	bltu	fp,r17,1007850 <_realloc_r+0xcc>
 10077ec:	013fff04 	movi	r4,-4
 10077f0:	4126703a 	and	r19,r8,r4
 10077f4:	99c02616 	blt	r19,r7,1007890 <_realloc_r+0x10c>
 10077f8:	802b883a 	mov	r21,r16
 10077fc:	9829883a 	mov	r20,r19
 1007800:	84000204 	addi	r16,r16,8
 1007804:	a80f883a 	mov	r7,r21
 1007808:	a70dc83a 	sub	r6,r20,fp
 100780c:	008003c4 	movi	r2,15
 1007810:	1180c136 	bltu	r2,r6,1007b18 <_realloc_r+0x394>
 1007814:	38800117 	ldw	r2,4(r7)
 1007818:	a549883a 	add	r4,r20,r21
 100781c:	1080004c 	andi	r2,r2,1
 1007820:	a084b03a 	or	r2,r20,r2
 1007824:	38800115 	stw	r2,4(r7)
 1007828:	20c00117 	ldw	r3,4(r4)
 100782c:	18c00054 	ori	r3,r3,1
 1007830:	20c00115 	stw	r3,4(r4)
 1007834:	b009883a 	mov	r4,r22
 1007838:	100ae240 	call	100ae24 <__malloc_unlock>
 100783c:	8023883a 	mov	r17,r16
 1007840:	00000606 	br	100785c <_realloc_r+0xd8>
 1007844:	01c00404 	movi	r7,16
 1007848:	3839883a 	mov	fp,r7
 100784c:	e47fe72e 	bgeu	fp,r17,10077ec <_realloc_r+0x68>
 1007850:	00800304 	movi	r2,12
 1007854:	0023883a 	mov	r17,zero
 1007858:	b0800015 	stw	r2,0(r22)
 100785c:	8805883a 	mov	r2,r17
 1007860:	dfc00b17 	ldw	ra,44(sp)
 1007864:	df000a17 	ldw	fp,40(sp)
 1007868:	ddc00917 	ldw	r23,36(sp)
 100786c:	dd800817 	ldw	r22,32(sp)
 1007870:	dd400717 	ldw	r21,28(sp)
 1007874:	dd000617 	ldw	r20,24(sp)
 1007878:	dcc00517 	ldw	r19,20(sp)
 100787c:	dc800417 	ldw	r18,16(sp)
 1007880:	dc400317 	ldw	r17,12(sp)
 1007884:	dc000217 	ldw	r16,8(sp)
 1007888:	dec00c04 	addi	sp,sp,48
 100788c:	f800283a 	ret
 1007890:	00804074 	movhi	r2,257
 1007894:	108b9504 	addi	r2,r2,11860
 1007898:	12400217 	ldw	r9,8(r2)
 100789c:	84cd883a 	add	r6,r16,r19
 10078a0:	802b883a 	mov	r21,r16
 10078a4:	3240b926 	beq	r6,r9,1007b8c <_realloc_r+0x408>
 10078a8:	31400117 	ldw	r5,4(r6)
 10078ac:	00bfff84 	movi	r2,-2
 10078b0:	2884703a 	and	r2,r5,r2
 10078b4:	1185883a 	add	r2,r2,r6
 10078b8:	10c00117 	ldw	r3,4(r2)
 10078bc:	18c0004c 	andi	r3,r3,1
 10078c0:	1807003a 	cmpeq	r3,r3,zero
 10078c4:	1800a326 	beq	r3,zero,1007b54 <_realloc_r+0x3d0>
 10078c8:	2908703a 	and	r4,r5,r4
 10078cc:	9929883a 	add	r20,r19,r4
 10078d0:	a1c0a30e 	bge	r20,r7,1007b60 <_realloc_r+0x3dc>
 10078d4:	4080004c 	andi	r2,r8,1
 10078d8:	1000551e 	bne	r2,zero,1007a30 <_realloc_r+0x2ac>
 10078dc:	80800017 	ldw	r2,0(r16)
 10078e0:	80afc83a 	sub	r23,r16,r2
 10078e4:	b8c00117 	ldw	r3,4(r23)
 10078e8:	00bfff04 	movi	r2,-4
 10078ec:	1884703a 	and	r2,r3,r2
 10078f0:	30002e26 	beq	r6,zero,10079ac <_realloc_r+0x228>
 10078f4:	3240b926 	beq	r6,r9,1007bdc <_realloc_r+0x458>
 10078f8:	98a9883a 	add	r20,r19,r2
 10078fc:	2509883a 	add	r4,r4,r20
 1007900:	d9000015 	stw	r4,0(sp)
 1007904:	21c02a16 	blt	r4,r7,10079b0 <_realloc_r+0x22c>
 1007908:	30800317 	ldw	r2,12(r6)
 100790c:	30c00217 	ldw	r3,8(r6)
 1007910:	01400904 	movi	r5,36
 1007914:	99bfff04 	addi	r6,r19,-4
 1007918:	18800315 	stw	r2,12(r3)
 100791c:	10c00215 	stw	r3,8(r2)
 1007920:	b9000317 	ldw	r4,12(r23)
 1007924:	b8800217 	ldw	r2,8(r23)
 1007928:	b82b883a 	mov	r21,r23
 100792c:	bc000204 	addi	r16,r23,8
 1007930:	20800215 	stw	r2,8(r4)
 1007934:	11000315 	stw	r4,12(r2)
 1007938:	2980e436 	bltu	r5,r6,1007ccc <_realloc_r+0x548>
 100793c:	008004c4 	movi	r2,19
 1007940:	9009883a 	mov	r4,r18
 1007944:	8011883a 	mov	r8,r16
 1007948:	11800f2e 	bgeu	r2,r6,1007988 <_realloc_r+0x204>
 100794c:	90800017 	ldw	r2,0(r18)
 1007950:	ba000404 	addi	r8,r23,16
 1007954:	91000204 	addi	r4,r18,8
 1007958:	b8800215 	stw	r2,8(r23)
 100795c:	90c00117 	ldw	r3,4(r18)
 1007960:	008006c4 	movi	r2,27
 1007964:	b8c00315 	stw	r3,12(r23)
 1007968:	1180072e 	bgeu	r2,r6,1007988 <_realloc_r+0x204>
 100796c:	90c00217 	ldw	r3,8(r18)
 1007970:	ba000604 	addi	r8,r23,24
 1007974:	91000404 	addi	r4,r18,16
 1007978:	b8c00415 	stw	r3,16(r23)
 100797c:	90800317 	ldw	r2,12(r18)
 1007980:	b8800515 	stw	r2,20(r23)
 1007984:	3140e726 	beq	r6,r5,1007d24 <_realloc_r+0x5a0>
 1007988:	20800017 	ldw	r2,0(r4)
 100798c:	dd000017 	ldw	r20,0(sp)
 1007990:	b80f883a 	mov	r7,r23
 1007994:	40800015 	stw	r2,0(r8)
 1007998:	20c00117 	ldw	r3,4(r4)
 100799c:	40c00115 	stw	r3,4(r8)
 10079a0:	20800217 	ldw	r2,8(r4)
 10079a4:	40800215 	stw	r2,8(r8)
 10079a8:	003f9706 	br	1007808 <_realloc_r+0x84>
 10079ac:	98a9883a 	add	r20,r19,r2
 10079b0:	a1c01f16 	blt	r20,r7,1007a30 <_realloc_r+0x2ac>
 10079b4:	b8c00317 	ldw	r3,12(r23)
 10079b8:	b8800217 	ldw	r2,8(r23)
 10079bc:	99bfff04 	addi	r6,r19,-4
 10079c0:	01400904 	movi	r5,36
 10079c4:	b82b883a 	mov	r21,r23
 10079c8:	18800215 	stw	r2,8(r3)
 10079cc:	10c00315 	stw	r3,12(r2)
 10079d0:	bc000204 	addi	r16,r23,8
 10079d4:	2980c336 	bltu	r5,r6,1007ce4 <_realloc_r+0x560>
 10079d8:	008004c4 	movi	r2,19
 10079dc:	9009883a 	mov	r4,r18
 10079e0:	8011883a 	mov	r8,r16
 10079e4:	11800f2e 	bgeu	r2,r6,1007a24 <_realloc_r+0x2a0>
 10079e8:	90800017 	ldw	r2,0(r18)
 10079ec:	ba000404 	addi	r8,r23,16
 10079f0:	91000204 	addi	r4,r18,8
 10079f4:	b8800215 	stw	r2,8(r23)
 10079f8:	90c00117 	ldw	r3,4(r18)
 10079fc:	008006c4 	movi	r2,27
 1007a00:	b8c00315 	stw	r3,12(r23)
 1007a04:	1180072e 	bgeu	r2,r6,1007a24 <_realloc_r+0x2a0>
 1007a08:	90c00217 	ldw	r3,8(r18)
 1007a0c:	ba000604 	addi	r8,r23,24
 1007a10:	91000404 	addi	r4,r18,16
 1007a14:	b8c00415 	stw	r3,16(r23)
 1007a18:	90800317 	ldw	r2,12(r18)
 1007a1c:	b8800515 	stw	r2,20(r23)
 1007a20:	3140c726 	beq	r6,r5,1007d40 <_realloc_r+0x5bc>
 1007a24:	20800017 	ldw	r2,0(r4)
 1007a28:	b80f883a 	mov	r7,r23
 1007a2c:	003fd906 	br	1007994 <_realloc_r+0x210>
 1007a30:	880b883a 	mov	r5,r17
 1007a34:	b009883a 	mov	r4,r22
 1007a38:	1005cbc0 	call	1005cbc <_malloc_r>
 1007a3c:	1023883a 	mov	r17,r2
 1007a40:	10002526 	beq	r2,zero,1007ad8 <_realloc_r+0x354>
 1007a44:	80800117 	ldw	r2,4(r16)
 1007a48:	00ffff84 	movi	r3,-2
 1007a4c:	893ffe04 	addi	r4,r17,-8
 1007a50:	10c4703a 	and	r2,r2,r3
 1007a54:	8085883a 	add	r2,r16,r2
 1007a58:	20809526 	beq	r4,r2,1007cb0 <_realloc_r+0x52c>
 1007a5c:	99bfff04 	addi	r6,r19,-4
 1007a60:	01c00904 	movi	r7,36
 1007a64:	39804536 	bltu	r7,r6,1007b7c <_realloc_r+0x3f8>
 1007a68:	008004c4 	movi	r2,19
 1007a6c:	9009883a 	mov	r4,r18
 1007a70:	880b883a 	mov	r5,r17
 1007a74:	11800f2e 	bgeu	r2,r6,1007ab4 <_realloc_r+0x330>
 1007a78:	90800017 	ldw	r2,0(r18)
 1007a7c:	89400204 	addi	r5,r17,8
 1007a80:	91000204 	addi	r4,r18,8
 1007a84:	88800015 	stw	r2,0(r17)
 1007a88:	90c00117 	ldw	r3,4(r18)
 1007a8c:	008006c4 	movi	r2,27
 1007a90:	88c00115 	stw	r3,4(r17)
 1007a94:	1180072e 	bgeu	r2,r6,1007ab4 <_realloc_r+0x330>
 1007a98:	90c00217 	ldw	r3,8(r18)
 1007a9c:	89400404 	addi	r5,r17,16
 1007aa0:	91000404 	addi	r4,r18,16
 1007aa4:	88c00215 	stw	r3,8(r17)
 1007aa8:	90800317 	ldw	r2,12(r18)
 1007aac:	88800315 	stw	r2,12(r17)
 1007ab0:	31c09126 	beq	r6,r7,1007cf8 <_realloc_r+0x574>
 1007ab4:	20800017 	ldw	r2,0(r4)
 1007ab8:	28800015 	stw	r2,0(r5)
 1007abc:	20c00117 	ldw	r3,4(r4)
 1007ac0:	28c00115 	stw	r3,4(r5)
 1007ac4:	20800217 	ldw	r2,8(r4)
 1007ac8:	28800215 	stw	r2,8(r5)
 1007acc:	900b883a 	mov	r5,r18
 1007ad0:	b009883a 	mov	r4,r22
 1007ad4:	10051340 	call	1005134 <_free_r>
 1007ad8:	b009883a 	mov	r4,r22
 1007adc:	100ae240 	call	100ae24 <__malloc_unlock>
 1007ae0:	003f5e06 	br	100785c <_realloc_r+0xd8>
 1007ae4:	300b883a 	mov	r5,r6
 1007ae8:	dfc00b17 	ldw	ra,44(sp)
 1007aec:	df000a17 	ldw	fp,40(sp)
 1007af0:	ddc00917 	ldw	r23,36(sp)
 1007af4:	dd800817 	ldw	r22,32(sp)
 1007af8:	dd400717 	ldw	r21,28(sp)
 1007afc:	dd000617 	ldw	r20,24(sp)
 1007b00:	dcc00517 	ldw	r19,20(sp)
 1007b04:	dc800417 	ldw	r18,16(sp)
 1007b08:	dc400317 	ldw	r17,12(sp)
 1007b0c:	dc000217 	ldw	r16,8(sp)
 1007b10:	dec00c04 	addi	sp,sp,48
 1007b14:	1005cbc1 	jmpi	1005cbc <_malloc_r>
 1007b18:	38800117 	ldw	r2,4(r7)
 1007b1c:	e54b883a 	add	r5,fp,r21
 1007b20:	31000054 	ori	r4,r6,1
 1007b24:	1080004c 	andi	r2,r2,1
 1007b28:	1704b03a 	or	r2,r2,fp
 1007b2c:	38800115 	stw	r2,4(r7)
 1007b30:	29000115 	stw	r4,4(r5)
 1007b34:	2987883a 	add	r3,r5,r6
 1007b38:	18800117 	ldw	r2,4(r3)
 1007b3c:	29400204 	addi	r5,r5,8
 1007b40:	b009883a 	mov	r4,r22
 1007b44:	10800054 	ori	r2,r2,1
 1007b48:	18800115 	stw	r2,4(r3)
 1007b4c:	10051340 	call	1005134 <_free_r>
 1007b50:	003f3806 	br	1007834 <_realloc_r+0xb0>
 1007b54:	000d883a 	mov	r6,zero
 1007b58:	0009883a 	mov	r4,zero
 1007b5c:	003f5d06 	br	10078d4 <_realloc_r+0x150>
 1007b60:	30c00217 	ldw	r3,8(r6)
 1007b64:	30800317 	ldw	r2,12(r6)
 1007b68:	800f883a 	mov	r7,r16
 1007b6c:	84000204 	addi	r16,r16,8
 1007b70:	10c00215 	stw	r3,8(r2)
 1007b74:	18800315 	stw	r2,12(r3)
 1007b78:	003f2306 	br	1007808 <_realloc_r+0x84>
 1007b7c:	8809883a 	mov	r4,r17
 1007b80:	900b883a 	mov	r5,r18
 1007b84:	10065800 	call	1006580 <memmove>
 1007b88:	003fd006 	br	1007acc <_realloc_r+0x348>
 1007b8c:	30800117 	ldw	r2,4(r6)
 1007b90:	e0c00404 	addi	r3,fp,16
 1007b94:	1108703a 	and	r4,r2,r4
 1007b98:	9905883a 	add	r2,r19,r4
 1007b9c:	10ff4d16 	blt	r2,r3,10078d4 <_realloc_r+0x150>
 1007ba0:	1705c83a 	sub	r2,r2,fp
 1007ba4:	870b883a 	add	r5,r16,fp
 1007ba8:	10800054 	ori	r2,r2,1
 1007bac:	28800115 	stw	r2,4(r5)
 1007bb0:	80c00117 	ldw	r3,4(r16)
 1007bb4:	00804074 	movhi	r2,257
 1007bb8:	108b9504 	addi	r2,r2,11860
 1007bbc:	b009883a 	mov	r4,r22
 1007bc0:	18c0004c 	andi	r3,r3,1
 1007bc4:	e0c6b03a 	or	r3,fp,r3
 1007bc8:	11400215 	stw	r5,8(r2)
 1007bcc:	80c00115 	stw	r3,4(r16)
 1007bd0:	100ae240 	call	100ae24 <__malloc_unlock>
 1007bd4:	84400204 	addi	r17,r16,8
 1007bd8:	003f2006 	br	100785c <_realloc_r+0xd8>
 1007bdc:	98a9883a 	add	r20,r19,r2
 1007be0:	2509883a 	add	r4,r4,r20
 1007be4:	e0800404 	addi	r2,fp,16
 1007be8:	d9000115 	stw	r4,4(sp)
 1007bec:	20bf7016 	blt	r4,r2,10079b0 <_realloc_r+0x22c>
 1007bf0:	b8c00317 	ldw	r3,12(r23)
 1007bf4:	b8800217 	ldw	r2,8(r23)
 1007bf8:	99bfff04 	addi	r6,r19,-4
 1007bfc:	01400904 	movi	r5,36
 1007c00:	18800215 	stw	r2,8(r3)
 1007c04:	10c00315 	stw	r3,12(r2)
 1007c08:	bc400204 	addi	r17,r23,8
 1007c0c:	29804136 	bltu	r5,r6,1007d14 <_realloc_r+0x590>
 1007c10:	008004c4 	movi	r2,19
 1007c14:	9009883a 	mov	r4,r18
 1007c18:	880f883a 	mov	r7,r17
 1007c1c:	11800f2e 	bgeu	r2,r6,1007c5c <_realloc_r+0x4d8>
 1007c20:	90800017 	ldw	r2,0(r18)
 1007c24:	b9c00404 	addi	r7,r23,16
 1007c28:	91000204 	addi	r4,r18,8
 1007c2c:	b8800215 	stw	r2,8(r23)
 1007c30:	90c00117 	ldw	r3,4(r18)
 1007c34:	008006c4 	movi	r2,27
 1007c38:	b8c00315 	stw	r3,12(r23)
 1007c3c:	1180072e 	bgeu	r2,r6,1007c5c <_realloc_r+0x4d8>
 1007c40:	90c00217 	ldw	r3,8(r18)
 1007c44:	b9c00604 	addi	r7,r23,24
 1007c48:	91000404 	addi	r4,r18,16
 1007c4c:	b8c00415 	stw	r3,16(r23)
 1007c50:	90800317 	ldw	r2,12(r18)
 1007c54:	b8800515 	stw	r2,20(r23)
 1007c58:	31404026 	beq	r6,r5,1007d5c <_realloc_r+0x5d8>
 1007c5c:	20800017 	ldw	r2,0(r4)
 1007c60:	38800015 	stw	r2,0(r7)
 1007c64:	20c00117 	ldw	r3,4(r4)
 1007c68:	38c00115 	stw	r3,4(r7)
 1007c6c:	20800217 	ldw	r2,8(r4)
 1007c70:	38800215 	stw	r2,8(r7)
 1007c74:	d8c00117 	ldw	r3,4(sp)
 1007c78:	bf0b883a 	add	r5,r23,fp
 1007c7c:	b009883a 	mov	r4,r22
 1007c80:	1f05c83a 	sub	r2,r3,fp
 1007c84:	10800054 	ori	r2,r2,1
 1007c88:	28800115 	stw	r2,4(r5)
 1007c8c:	b8c00117 	ldw	r3,4(r23)
 1007c90:	00804074 	movhi	r2,257
 1007c94:	108b9504 	addi	r2,r2,11860
 1007c98:	11400215 	stw	r5,8(r2)
 1007c9c:	18c0004c 	andi	r3,r3,1
 1007ca0:	e0c6b03a 	or	r3,fp,r3
 1007ca4:	b8c00115 	stw	r3,4(r23)
 1007ca8:	100ae240 	call	100ae24 <__malloc_unlock>
 1007cac:	003eeb06 	br	100785c <_realloc_r+0xd8>
 1007cb0:	20800117 	ldw	r2,4(r4)
 1007cb4:	00ffff04 	movi	r3,-4
 1007cb8:	800f883a 	mov	r7,r16
 1007cbc:	10c4703a 	and	r2,r2,r3
 1007cc0:	98a9883a 	add	r20,r19,r2
 1007cc4:	84000204 	addi	r16,r16,8
 1007cc8:	003ecf06 	br	1007808 <_realloc_r+0x84>
 1007ccc:	900b883a 	mov	r5,r18
 1007cd0:	8009883a 	mov	r4,r16
 1007cd4:	10065800 	call	1006580 <memmove>
 1007cd8:	dd000017 	ldw	r20,0(sp)
 1007cdc:	b80f883a 	mov	r7,r23
 1007ce0:	003ec906 	br	1007808 <_realloc_r+0x84>
 1007ce4:	900b883a 	mov	r5,r18
 1007ce8:	8009883a 	mov	r4,r16
 1007cec:	10065800 	call	1006580 <memmove>
 1007cf0:	b80f883a 	mov	r7,r23
 1007cf4:	003ec406 	br	1007808 <_realloc_r+0x84>
 1007cf8:	90c00417 	ldw	r3,16(r18)
 1007cfc:	89400604 	addi	r5,r17,24
 1007d00:	91000604 	addi	r4,r18,24
 1007d04:	88c00415 	stw	r3,16(r17)
 1007d08:	90800517 	ldw	r2,20(r18)
 1007d0c:	88800515 	stw	r2,20(r17)
 1007d10:	003f6806 	br	1007ab4 <_realloc_r+0x330>
 1007d14:	900b883a 	mov	r5,r18
 1007d18:	8809883a 	mov	r4,r17
 1007d1c:	10065800 	call	1006580 <memmove>
 1007d20:	003fd406 	br	1007c74 <_realloc_r+0x4f0>
 1007d24:	90c00417 	ldw	r3,16(r18)
 1007d28:	91000604 	addi	r4,r18,24
 1007d2c:	ba000804 	addi	r8,r23,32
 1007d30:	b8c00615 	stw	r3,24(r23)
 1007d34:	90800517 	ldw	r2,20(r18)
 1007d38:	b8800715 	stw	r2,28(r23)
 1007d3c:	003f1206 	br	1007988 <_realloc_r+0x204>
 1007d40:	90c00417 	ldw	r3,16(r18)
 1007d44:	91000604 	addi	r4,r18,24
 1007d48:	ba000804 	addi	r8,r23,32
 1007d4c:	b8c00615 	stw	r3,24(r23)
 1007d50:	90800517 	ldw	r2,20(r18)
 1007d54:	b8800715 	stw	r2,28(r23)
 1007d58:	003f3206 	br	1007a24 <_realloc_r+0x2a0>
 1007d5c:	90c00417 	ldw	r3,16(r18)
 1007d60:	91000604 	addi	r4,r18,24
 1007d64:	b9c00804 	addi	r7,r23,32
 1007d68:	b8c00615 	stw	r3,24(r23)
 1007d6c:	90800517 	ldw	r2,20(r18)
 1007d70:	b8800715 	stw	r2,28(r23)
 1007d74:	003fb906 	br	1007c5c <_realloc_r+0x4d8>

01007d78 <__isinfd>:
 1007d78:	200d883a 	mov	r6,r4
 1007d7c:	0109c83a 	sub	r4,zero,r4
 1007d80:	2188b03a 	or	r4,r4,r6
 1007d84:	2008d7fa 	srli	r4,r4,31
 1007d88:	00a00034 	movhi	r2,32768
 1007d8c:	10bfffc4 	addi	r2,r2,-1
 1007d90:	1144703a 	and	r2,r2,r5
 1007d94:	2088b03a 	or	r4,r4,r2
 1007d98:	009ffc34 	movhi	r2,32752
 1007d9c:	1105c83a 	sub	r2,r2,r4
 1007da0:	0087c83a 	sub	r3,zero,r2
 1007da4:	10c4b03a 	or	r2,r2,r3
 1007da8:	1004d7fa 	srli	r2,r2,31
 1007dac:	00c00044 	movi	r3,1
 1007db0:	1885c83a 	sub	r2,r3,r2
 1007db4:	f800283a 	ret

01007db8 <__isnand>:
 1007db8:	200d883a 	mov	r6,r4
 1007dbc:	0109c83a 	sub	r4,zero,r4
 1007dc0:	2188b03a 	or	r4,r4,r6
 1007dc4:	2008d7fa 	srli	r4,r4,31
 1007dc8:	00a00034 	movhi	r2,32768
 1007dcc:	10bfffc4 	addi	r2,r2,-1
 1007dd0:	1144703a 	and	r2,r2,r5
 1007dd4:	2088b03a 	or	r4,r4,r2
 1007dd8:	009ffc34 	movhi	r2,32752
 1007ddc:	1105c83a 	sub	r2,r2,r4
 1007de0:	1004d7fa 	srli	r2,r2,31
 1007de4:	f800283a 	ret

01007de8 <_sbrk_r>:
 1007de8:	defffd04 	addi	sp,sp,-12
 1007dec:	dc000015 	stw	r16,0(sp)
 1007df0:	04004074 	movhi	r16,257
 1007df4:	84184004 	addi	r16,r16,24832
 1007df8:	dc400115 	stw	r17,4(sp)
 1007dfc:	80000015 	stw	zero,0(r16)
 1007e00:	2023883a 	mov	r17,r4
 1007e04:	2809883a 	mov	r4,r5
 1007e08:	dfc00215 	stw	ra,8(sp)
 1007e0c:	100b0400 	call	100b040 <sbrk>
 1007e10:	1007883a 	mov	r3,r2
 1007e14:	00bfffc4 	movi	r2,-1
 1007e18:	18800626 	beq	r3,r2,1007e34 <_sbrk_r+0x4c>
 1007e1c:	1805883a 	mov	r2,r3
 1007e20:	dfc00217 	ldw	ra,8(sp)
 1007e24:	dc400117 	ldw	r17,4(sp)
 1007e28:	dc000017 	ldw	r16,0(sp)
 1007e2c:	dec00304 	addi	sp,sp,12
 1007e30:	f800283a 	ret
 1007e34:	80800017 	ldw	r2,0(r16)
 1007e38:	103ff826 	beq	r2,zero,1007e1c <_sbrk_r+0x34>
 1007e3c:	88800015 	stw	r2,0(r17)
 1007e40:	1805883a 	mov	r2,r3
 1007e44:	dfc00217 	ldw	ra,8(sp)
 1007e48:	dc400117 	ldw	r17,4(sp)
 1007e4c:	dc000017 	ldw	r16,0(sp)
 1007e50:	dec00304 	addi	sp,sp,12
 1007e54:	f800283a 	ret

01007e58 <__sclose>:
 1007e58:	2940038f 	ldh	r5,14(r5)
 1007e5c:	10081a01 	jmpi	10081a0 <_close_r>

01007e60 <__sseek>:
 1007e60:	defffe04 	addi	sp,sp,-8
 1007e64:	dc000015 	stw	r16,0(sp)
 1007e68:	2821883a 	mov	r16,r5
 1007e6c:	2940038f 	ldh	r5,14(r5)
 1007e70:	dfc00115 	stw	ra,4(sp)
 1007e74:	10084180 	call	1008418 <_lseek_r>
 1007e78:	1007883a 	mov	r3,r2
 1007e7c:	00bfffc4 	movi	r2,-1
 1007e80:	18800926 	beq	r3,r2,1007ea8 <__sseek+0x48>
 1007e84:	8080030b 	ldhu	r2,12(r16)
 1007e88:	80c01415 	stw	r3,80(r16)
 1007e8c:	10840014 	ori	r2,r2,4096
 1007e90:	8080030d 	sth	r2,12(r16)
 1007e94:	1805883a 	mov	r2,r3
 1007e98:	dfc00117 	ldw	ra,4(sp)
 1007e9c:	dc000017 	ldw	r16,0(sp)
 1007ea0:	dec00204 	addi	sp,sp,8
 1007ea4:	f800283a 	ret
 1007ea8:	8080030b 	ldhu	r2,12(r16)
 1007eac:	10bbffcc 	andi	r2,r2,61439
 1007eb0:	8080030d 	sth	r2,12(r16)
 1007eb4:	1805883a 	mov	r2,r3
 1007eb8:	dfc00117 	ldw	ra,4(sp)
 1007ebc:	dc000017 	ldw	r16,0(sp)
 1007ec0:	dec00204 	addi	sp,sp,8
 1007ec4:	f800283a 	ret

01007ec8 <__swrite>:
 1007ec8:	2880030b 	ldhu	r2,12(r5)
 1007ecc:	defffb04 	addi	sp,sp,-20
 1007ed0:	dcc00315 	stw	r19,12(sp)
 1007ed4:	1080400c 	andi	r2,r2,256
 1007ed8:	dc800215 	stw	r18,8(sp)
 1007edc:	dc400115 	stw	r17,4(sp)
 1007ee0:	dc000015 	stw	r16,0(sp)
 1007ee4:	3027883a 	mov	r19,r6
 1007ee8:	3825883a 	mov	r18,r7
 1007eec:	dfc00415 	stw	ra,16(sp)
 1007ef0:	2821883a 	mov	r16,r5
 1007ef4:	000d883a 	mov	r6,zero
 1007ef8:	01c00084 	movi	r7,2
 1007efc:	2023883a 	mov	r17,r4
 1007f00:	10000226 	beq	r2,zero,1007f0c <__swrite+0x44>
 1007f04:	2940038f 	ldh	r5,14(r5)
 1007f08:	10084180 	call	1008418 <_lseek_r>
 1007f0c:	8080030b 	ldhu	r2,12(r16)
 1007f10:	8140038f 	ldh	r5,14(r16)
 1007f14:	8809883a 	mov	r4,r17
 1007f18:	10bbffcc 	andi	r2,r2,61439
 1007f1c:	980d883a 	mov	r6,r19
 1007f20:	900f883a 	mov	r7,r18
 1007f24:	8080030d 	sth	r2,12(r16)
 1007f28:	dfc00417 	ldw	ra,16(sp)
 1007f2c:	dcc00317 	ldw	r19,12(sp)
 1007f30:	dc800217 	ldw	r18,8(sp)
 1007f34:	dc400117 	ldw	r17,4(sp)
 1007f38:	dc000017 	ldw	r16,0(sp)
 1007f3c:	dec00504 	addi	sp,sp,20
 1007f40:	10080601 	jmpi	1008060 <_write_r>

01007f44 <__sread>:
 1007f44:	defffe04 	addi	sp,sp,-8
 1007f48:	dc000015 	stw	r16,0(sp)
 1007f4c:	2821883a 	mov	r16,r5
 1007f50:	2940038f 	ldh	r5,14(r5)
 1007f54:	dfc00115 	stw	ra,4(sp)
 1007f58:	10084900 	call	1008490 <_read_r>
 1007f5c:	1007883a 	mov	r3,r2
 1007f60:	10000816 	blt	r2,zero,1007f84 <__sread+0x40>
 1007f64:	80801417 	ldw	r2,80(r16)
 1007f68:	10c5883a 	add	r2,r2,r3
 1007f6c:	80801415 	stw	r2,80(r16)
 1007f70:	1805883a 	mov	r2,r3
 1007f74:	dfc00117 	ldw	ra,4(sp)
 1007f78:	dc000017 	ldw	r16,0(sp)
 1007f7c:	dec00204 	addi	sp,sp,8
 1007f80:	f800283a 	ret
 1007f84:	8080030b 	ldhu	r2,12(r16)
 1007f88:	10bbffcc 	andi	r2,r2,61439
 1007f8c:	8080030d 	sth	r2,12(r16)
 1007f90:	1805883a 	mov	r2,r3
 1007f94:	dfc00117 	ldw	ra,4(sp)
 1007f98:	dc000017 	ldw	r16,0(sp)
 1007f9c:	dec00204 	addi	sp,sp,8
 1007fa0:	f800283a 	ret

01007fa4 <strcmp>:
 1007fa4:	2144b03a 	or	r2,r4,r5
 1007fa8:	108000cc 	andi	r2,r2,3
 1007fac:	10001d1e 	bne	r2,zero,1008024 <strcmp+0x80>
 1007fb0:	200f883a 	mov	r7,r4
 1007fb4:	28800017 	ldw	r2,0(r5)
 1007fb8:	21000017 	ldw	r4,0(r4)
 1007fbc:	280d883a 	mov	r6,r5
 1007fc0:	2080161e 	bne	r4,r2,100801c <strcmp+0x78>
 1007fc4:	023fbff4 	movhi	r8,65279
 1007fc8:	423fbfc4 	addi	r8,r8,-257
 1007fcc:	2207883a 	add	r3,r4,r8
 1007fd0:	01602074 	movhi	r5,32897
 1007fd4:	29602004 	addi	r5,r5,-32640
 1007fd8:	1946703a 	and	r3,r3,r5
 1007fdc:	0104303a 	nor	r2,zero,r4
 1007fe0:	10c4703a 	and	r2,r2,r3
 1007fe4:	10001c1e 	bne	r2,zero,1008058 <strcmp+0xb4>
 1007fe8:	4013883a 	mov	r9,r8
 1007fec:	2811883a 	mov	r8,r5
 1007ff0:	00000106 	br	1007ff8 <strcmp+0x54>
 1007ff4:	1800181e 	bne	r3,zero,1008058 <strcmp+0xb4>
 1007ff8:	39c00104 	addi	r7,r7,4
 1007ffc:	39000017 	ldw	r4,0(r7)
 1008000:	31800104 	addi	r6,r6,4
 1008004:	31400017 	ldw	r5,0(r6)
 1008008:	2245883a 	add	r2,r4,r9
 100800c:	1204703a 	and	r2,r2,r8
 1008010:	0106303a 	nor	r3,zero,r4
 1008014:	1886703a 	and	r3,r3,r2
 1008018:	217ff626 	beq	r4,r5,1007ff4 <strcmp+0x50>
 100801c:	3809883a 	mov	r4,r7
 1008020:	300b883a 	mov	r5,r6
 1008024:	20c00007 	ldb	r3,0(r4)
 1008028:	1800051e 	bne	r3,zero,1008040 <strcmp+0x9c>
 100802c:	00000606 	br	1008048 <strcmp+0xa4>
 1008030:	21000044 	addi	r4,r4,1
 1008034:	20c00007 	ldb	r3,0(r4)
 1008038:	29400044 	addi	r5,r5,1
 100803c:	18000226 	beq	r3,zero,1008048 <strcmp+0xa4>
 1008040:	28800007 	ldb	r2,0(r5)
 1008044:	18bffa26 	beq	r3,r2,1008030 <strcmp+0x8c>
 1008048:	20c00003 	ldbu	r3,0(r4)
 100804c:	28800003 	ldbu	r2,0(r5)
 1008050:	1885c83a 	sub	r2,r3,r2
 1008054:	f800283a 	ret
 1008058:	0005883a 	mov	r2,zero
 100805c:	f800283a 	ret

01008060 <_write_r>:
 1008060:	defffd04 	addi	sp,sp,-12
 1008064:	dc000015 	stw	r16,0(sp)
 1008068:	04004074 	movhi	r16,257
 100806c:	84184004 	addi	r16,r16,24832
 1008070:	dc400115 	stw	r17,4(sp)
 1008074:	80000015 	stw	zero,0(r16)
 1008078:	2023883a 	mov	r17,r4
 100807c:	2809883a 	mov	r4,r5
 1008080:	300b883a 	mov	r5,r6
 1008084:	380d883a 	mov	r6,r7
 1008088:	dfc00215 	stw	ra,8(sp)
 100808c:	100b0fc0 	call	100b0fc <write>
 1008090:	1007883a 	mov	r3,r2
 1008094:	00bfffc4 	movi	r2,-1
 1008098:	18800626 	beq	r3,r2,10080b4 <_write_r+0x54>
 100809c:	1805883a 	mov	r2,r3
 10080a0:	dfc00217 	ldw	ra,8(sp)
 10080a4:	dc400117 	ldw	r17,4(sp)
 10080a8:	dc000017 	ldw	r16,0(sp)
 10080ac:	dec00304 	addi	sp,sp,12
 10080b0:	f800283a 	ret
 10080b4:	80800017 	ldw	r2,0(r16)
 10080b8:	103ff826 	beq	r2,zero,100809c <_write_r+0x3c>
 10080bc:	88800015 	stw	r2,0(r17)
 10080c0:	1805883a 	mov	r2,r3
 10080c4:	dfc00217 	ldw	ra,8(sp)
 10080c8:	dc400117 	ldw	r17,4(sp)
 10080cc:	dc000017 	ldw	r16,0(sp)
 10080d0:	dec00304 	addi	sp,sp,12
 10080d4:	f800283a 	ret

010080d8 <_calloc_r>:
 10080d8:	defffe04 	addi	sp,sp,-8
 10080dc:	dc400015 	stw	r17,0(sp)
 10080e0:	2023883a 	mov	r17,r4
 10080e4:	2809883a 	mov	r4,r5
 10080e8:	300b883a 	mov	r5,r6
 10080ec:	dfc00115 	stw	ra,4(sp)
 10080f0:	1000adc0 	call	1000adc <__mulsi3>
 10080f4:	100b883a 	mov	r5,r2
 10080f8:	8809883a 	mov	r4,r17
 10080fc:	1005cbc0 	call	1005cbc <_malloc_r>
 1008100:	1023883a 	mov	r17,r2
 1008104:	01c00904 	movi	r7,36
 1008108:	10000d26 	beq	r2,zero,1008140 <_calloc_r+0x68>
 100810c:	10ffff17 	ldw	r3,-4(r2)
 1008110:	1009883a 	mov	r4,r2
 1008114:	00bfff04 	movi	r2,-4
 1008118:	1886703a 	and	r3,r3,r2
 100811c:	1887883a 	add	r3,r3,r2
 1008120:	180d883a 	mov	r6,r3
 1008124:	000b883a 	mov	r5,zero
 1008128:	38c01736 	bltu	r7,r3,1008188 <_calloc_r+0xb0>
 100812c:	008004c4 	movi	r2,19
 1008130:	10c00836 	bltu	r2,r3,1008154 <_calloc_r+0x7c>
 1008134:	20000215 	stw	zero,8(r4)
 1008138:	20000015 	stw	zero,0(r4)
 100813c:	20000115 	stw	zero,4(r4)
 1008140:	8805883a 	mov	r2,r17
 1008144:	dfc00117 	ldw	ra,4(sp)
 1008148:	dc400017 	ldw	r17,0(sp)
 100814c:	dec00204 	addi	sp,sp,8
 1008150:	f800283a 	ret
 1008154:	008006c4 	movi	r2,27
 1008158:	88000015 	stw	zero,0(r17)
 100815c:	88000115 	stw	zero,4(r17)
 1008160:	89000204 	addi	r4,r17,8
 1008164:	10fff32e 	bgeu	r2,r3,1008134 <_calloc_r+0x5c>
 1008168:	88000215 	stw	zero,8(r17)
 100816c:	88000315 	stw	zero,12(r17)
 1008170:	89000404 	addi	r4,r17,16
 1008174:	19ffef1e 	bne	r3,r7,1008134 <_calloc_r+0x5c>
 1008178:	89000604 	addi	r4,r17,24
 100817c:	88000415 	stw	zero,16(r17)
 1008180:	88000515 	stw	zero,20(r17)
 1008184:	003feb06 	br	1008134 <_calloc_r+0x5c>
 1008188:	10066600 	call	1006660 <memset>
 100818c:	8805883a 	mov	r2,r17
 1008190:	dfc00117 	ldw	ra,4(sp)
 1008194:	dc400017 	ldw	r17,0(sp)
 1008198:	dec00204 	addi	sp,sp,8
 100819c:	f800283a 	ret

010081a0 <_close_r>:
 10081a0:	defffd04 	addi	sp,sp,-12
 10081a4:	dc000015 	stw	r16,0(sp)
 10081a8:	04004074 	movhi	r16,257
 10081ac:	84184004 	addi	r16,r16,24832
 10081b0:	dc400115 	stw	r17,4(sp)
 10081b4:	80000015 	stw	zero,0(r16)
 10081b8:	2023883a 	mov	r17,r4
 10081bc:	2809883a 	mov	r4,r5
 10081c0:	dfc00215 	stw	ra,8(sp)
 10081c4:	100a7700 	call	100a770 <close>
 10081c8:	1007883a 	mov	r3,r2
 10081cc:	00bfffc4 	movi	r2,-1
 10081d0:	18800626 	beq	r3,r2,10081ec <_close_r+0x4c>
 10081d4:	1805883a 	mov	r2,r3
 10081d8:	dfc00217 	ldw	ra,8(sp)
 10081dc:	dc400117 	ldw	r17,4(sp)
 10081e0:	dc000017 	ldw	r16,0(sp)
 10081e4:	dec00304 	addi	sp,sp,12
 10081e8:	f800283a 	ret
 10081ec:	80800017 	ldw	r2,0(r16)
 10081f0:	103ff826 	beq	r2,zero,10081d4 <_close_r+0x34>
 10081f4:	88800015 	stw	r2,0(r17)
 10081f8:	1805883a 	mov	r2,r3
 10081fc:	dfc00217 	ldw	ra,8(sp)
 1008200:	dc400117 	ldw	r17,4(sp)
 1008204:	dc000017 	ldw	r16,0(sp)
 1008208:	dec00304 	addi	sp,sp,12
 100820c:	f800283a 	ret

01008210 <_fclose_r>:
 1008210:	defffc04 	addi	sp,sp,-16
 1008214:	dc400115 	stw	r17,4(sp)
 1008218:	dc000015 	stw	r16,0(sp)
 100821c:	dfc00315 	stw	ra,12(sp)
 1008220:	dc800215 	stw	r18,8(sp)
 1008224:	2821883a 	mov	r16,r5
 1008228:	2023883a 	mov	r17,r4
 100822c:	28002926 	beq	r5,zero,10082d4 <_fclose_r+0xc4>
 1008230:	1004d6c0 	call	1004d6c <__sfp_lock_acquire>
 1008234:	88000226 	beq	r17,zero,1008240 <_fclose_r+0x30>
 1008238:	88800e17 	ldw	r2,56(r17)
 100823c:	10002d26 	beq	r2,zero,10082f4 <_fclose_r+0xe4>
 1008240:	8080030f 	ldh	r2,12(r16)
 1008244:	10002226 	beq	r2,zero,10082d0 <_fclose_r+0xc0>
 1008248:	8809883a 	mov	r4,r17
 100824c:	800b883a 	mov	r5,r16
 1008250:	1004ae40 	call	1004ae4 <_fflush_r>
 1008254:	1025883a 	mov	r18,r2
 1008258:	80800b17 	ldw	r2,44(r16)
 100825c:	10000426 	beq	r2,zero,1008270 <_fclose_r+0x60>
 1008260:	81400717 	ldw	r5,28(r16)
 1008264:	8809883a 	mov	r4,r17
 1008268:	103ee83a 	callr	r2
 100826c:	10002a16 	blt	r2,zero,1008318 <_fclose_r+0x108>
 1008270:	8080030b 	ldhu	r2,12(r16)
 1008274:	1080200c 	andi	r2,r2,128
 1008278:	1000231e 	bne	r2,zero,1008308 <_fclose_r+0xf8>
 100827c:	81400c17 	ldw	r5,48(r16)
 1008280:	28000526 	beq	r5,zero,1008298 <_fclose_r+0x88>
 1008284:	80801004 	addi	r2,r16,64
 1008288:	28800226 	beq	r5,r2,1008294 <_fclose_r+0x84>
 100828c:	8809883a 	mov	r4,r17
 1008290:	10051340 	call	1005134 <_free_r>
 1008294:	80000c15 	stw	zero,48(r16)
 1008298:	81401117 	ldw	r5,68(r16)
 100829c:	28000326 	beq	r5,zero,10082ac <_fclose_r+0x9c>
 10082a0:	8809883a 	mov	r4,r17
 10082a4:	10051340 	call	1005134 <_free_r>
 10082a8:	80001115 	stw	zero,68(r16)
 10082ac:	8000030d 	sth	zero,12(r16)
 10082b0:	1004d700 	call	1004d70 <__sfp_lock_release>
 10082b4:	9005883a 	mov	r2,r18
 10082b8:	dfc00317 	ldw	ra,12(sp)
 10082bc:	dc800217 	ldw	r18,8(sp)
 10082c0:	dc400117 	ldw	r17,4(sp)
 10082c4:	dc000017 	ldw	r16,0(sp)
 10082c8:	dec00404 	addi	sp,sp,16
 10082cc:	f800283a 	ret
 10082d0:	1004d700 	call	1004d70 <__sfp_lock_release>
 10082d4:	0025883a 	mov	r18,zero
 10082d8:	9005883a 	mov	r2,r18
 10082dc:	dfc00317 	ldw	ra,12(sp)
 10082e0:	dc800217 	ldw	r18,8(sp)
 10082e4:	dc400117 	ldw	r17,4(sp)
 10082e8:	dc000017 	ldw	r16,0(sp)
 10082ec:	dec00404 	addi	sp,sp,16
 10082f0:	f800283a 	ret
 10082f4:	8809883a 	mov	r4,r17
 10082f8:	1004d7c0 	call	1004d7c <__sinit>
 10082fc:	8080030f 	ldh	r2,12(r16)
 1008300:	103fd11e 	bne	r2,zero,1008248 <_fclose_r+0x38>
 1008304:	003ff206 	br	10082d0 <_fclose_r+0xc0>
 1008308:	81400417 	ldw	r5,16(r16)
 100830c:	8809883a 	mov	r4,r17
 1008310:	10051340 	call	1005134 <_free_r>
 1008314:	003fd906 	br	100827c <_fclose_r+0x6c>
 1008318:	04bfffc4 	movi	r18,-1
 100831c:	003fd406 	br	1008270 <_fclose_r+0x60>

01008320 <fclose>:
 1008320:	00804074 	movhi	r2,257
 1008324:	10915604 	addi	r2,r2,17752
 1008328:	200b883a 	mov	r5,r4
 100832c:	11000017 	ldw	r4,0(r2)
 1008330:	10082101 	jmpi	1008210 <_fclose_r>

01008334 <_fstat_r>:
 1008334:	defffd04 	addi	sp,sp,-12
 1008338:	dc000015 	stw	r16,0(sp)
 100833c:	04004074 	movhi	r16,257
 1008340:	84184004 	addi	r16,r16,24832
 1008344:	dc400115 	stw	r17,4(sp)
 1008348:	80000015 	stw	zero,0(r16)
 100834c:	2023883a 	mov	r17,r4
 1008350:	2809883a 	mov	r4,r5
 1008354:	300b883a 	mov	r5,r6
 1008358:	dfc00215 	stw	ra,8(sp)
 100835c:	100a8fc0 	call	100a8fc <fstat>
 1008360:	1007883a 	mov	r3,r2
 1008364:	00bfffc4 	movi	r2,-1
 1008368:	18800626 	beq	r3,r2,1008384 <_fstat_r+0x50>
 100836c:	1805883a 	mov	r2,r3
 1008370:	dfc00217 	ldw	ra,8(sp)
 1008374:	dc400117 	ldw	r17,4(sp)
 1008378:	dc000017 	ldw	r16,0(sp)
 100837c:	dec00304 	addi	sp,sp,12
 1008380:	f800283a 	ret
 1008384:	80800017 	ldw	r2,0(r16)
 1008388:	103ff826 	beq	r2,zero,100836c <_fstat_r+0x38>
 100838c:	88800015 	stw	r2,0(r17)
 1008390:	1805883a 	mov	r2,r3
 1008394:	dfc00217 	ldw	ra,8(sp)
 1008398:	dc400117 	ldw	r17,4(sp)
 100839c:	dc000017 	ldw	r16,0(sp)
 10083a0:	dec00304 	addi	sp,sp,12
 10083a4:	f800283a 	ret

010083a8 <_isatty_r>:
 10083a8:	defffd04 	addi	sp,sp,-12
 10083ac:	dc000015 	stw	r16,0(sp)
 10083b0:	04004074 	movhi	r16,257
 10083b4:	84184004 	addi	r16,r16,24832
 10083b8:	dc400115 	stw	r17,4(sp)
 10083bc:	80000015 	stw	zero,0(r16)
 10083c0:	2023883a 	mov	r17,r4
 10083c4:	2809883a 	mov	r4,r5
 10083c8:	dfc00215 	stw	ra,8(sp)
 10083cc:	100aa340 	call	100aa34 <isatty>
 10083d0:	1007883a 	mov	r3,r2
 10083d4:	00bfffc4 	movi	r2,-1
 10083d8:	18800626 	beq	r3,r2,10083f4 <_isatty_r+0x4c>
 10083dc:	1805883a 	mov	r2,r3
 10083e0:	dfc00217 	ldw	ra,8(sp)
 10083e4:	dc400117 	ldw	r17,4(sp)
 10083e8:	dc000017 	ldw	r16,0(sp)
 10083ec:	dec00304 	addi	sp,sp,12
 10083f0:	f800283a 	ret
 10083f4:	80800017 	ldw	r2,0(r16)
 10083f8:	103ff826 	beq	r2,zero,10083dc <_isatty_r+0x34>
 10083fc:	88800015 	stw	r2,0(r17)
 1008400:	1805883a 	mov	r2,r3
 1008404:	dfc00217 	ldw	ra,8(sp)
 1008408:	dc400117 	ldw	r17,4(sp)
 100840c:	dc000017 	ldw	r16,0(sp)
 1008410:	dec00304 	addi	sp,sp,12
 1008414:	f800283a 	ret

01008418 <_lseek_r>:
 1008418:	defffd04 	addi	sp,sp,-12
 100841c:	dc000015 	stw	r16,0(sp)
 1008420:	04004074 	movhi	r16,257
 1008424:	84184004 	addi	r16,r16,24832
 1008428:	dc400115 	stw	r17,4(sp)
 100842c:	80000015 	stw	zero,0(r16)
 1008430:	2023883a 	mov	r17,r4
 1008434:	2809883a 	mov	r4,r5
 1008438:	300b883a 	mov	r5,r6
 100843c:	380d883a 	mov	r6,r7
 1008440:	dfc00215 	stw	ra,8(sp)
 1008444:	100ac440 	call	100ac44 <lseek>
 1008448:	1007883a 	mov	r3,r2
 100844c:	00bfffc4 	movi	r2,-1
 1008450:	18800626 	beq	r3,r2,100846c <_lseek_r+0x54>
 1008454:	1805883a 	mov	r2,r3
 1008458:	dfc00217 	ldw	ra,8(sp)
 100845c:	dc400117 	ldw	r17,4(sp)
 1008460:	dc000017 	ldw	r16,0(sp)
 1008464:	dec00304 	addi	sp,sp,12
 1008468:	f800283a 	ret
 100846c:	80800017 	ldw	r2,0(r16)
 1008470:	103ff826 	beq	r2,zero,1008454 <_lseek_r+0x3c>
 1008474:	88800015 	stw	r2,0(r17)
 1008478:	1805883a 	mov	r2,r3
 100847c:	dfc00217 	ldw	ra,8(sp)
 1008480:	dc400117 	ldw	r17,4(sp)
 1008484:	dc000017 	ldw	r16,0(sp)
 1008488:	dec00304 	addi	sp,sp,12
 100848c:	f800283a 	ret

01008490 <_read_r>:
 1008490:	defffd04 	addi	sp,sp,-12
 1008494:	dc000015 	stw	r16,0(sp)
 1008498:	04004074 	movhi	r16,257
 100849c:	84184004 	addi	r16,r16,24832
 10084a0:	dc400115 	stw	r17,4(sp)
 10084a4:	80000015 	stw	zero,0(r16)
 10084a8:	2023883a 	mov	r17,r4
 10084ac:	2809883a 	mov	r4,r5
 10084b0:	300b883a 	mov	r5,r6
 10084b4:	380d883a 	mov	r6,r7
 10084b8:	dfc00215 	stw	ra,8(sp)
 10084bc:	100ae440 	call	100ae44 <read>
 10084c0:	1007883a 	mov	r3,r2
 10084c4:	00bfffc4 	movi	r2,-1
 10084c8:	18800626 	beq	r3,r2,10084e4 <_read_r+0x54>
 10084cc:	1805883a 	mov	r2,r3
 10084d0:	dfc00217 	ldw	ra,8(sp)
 10084d4:	dc400117 	ldw	r17,4(sp)
 10084d8:	dc000017 	ldw	r16,0(sp)
 10084dc:	dec00304 	addi	sp,sp,12
 10084e0:	f800283a 	ret
 10084e4:	80800017 	ldw	r2,0(r16)
 10084e8:	103ff826 	beq	r2,zero,10084cc <_read_r+0x3c>
 10084ec:	88800015 	stw	r2,0(r17)
 10084f0:	1805883a 	mov	r2,r3
 10084f4:	dfc00217 	ldw	ra,8(sp)
 10084f8:	dc400117 	ldw	r17,4(sp)
 10084fc:	dc000017 	ldw	r16,0(sp)
 1008500:	dec00304 	addi	sp,sp,12
 1008504:	f800283a 	ret

01008508 <__udivdi3>:
 1008508:	defff104 	addi	sp,sp,-60
 100850c:	0015883a 	mov	r10,zero
 1008510:	2005883a 	mov	r2,r4
 1008514:	3011883a 	mov	r8,r6
 1008518:	df000d15 	stw	fp,52(sp)
 100851c:	dd400a15 	stw	r21,40(sp)
 1008520:	dcc00815 	stw	r19,32(sp)
 1008524:	dfc00e15 	stw	ra,56(sp)
 1008528:	ddc00c15 	stw	r23,48(sp)
 100852c:	dd800b15 	stw	r22,44(sp)
 1008530:	dd000915 	stw	r20,36(sp)
 1008534:	dc800715 	stw	r18,28(sp)
 1008538:	dc400615 	stw	r17,24(sp)
 100853c:	dc000515 	stw	r16,20(sp)
 1008540:	da800315 	stw	r10,12(sp)
 1008544:	4027883a 	mov	r19,r8
 1008548:	1039883a 	mov	fp,r2
 100854c:	282b883a 	mov	r21,r5
 1008550:	da800415 	stw	r10,16(sp)
 1008554:	3800401e 	bne	r7,zero,1008658 <__udivdi3+0x150>
 1008558:	2a006536 	bltu	r5,r8,10086f0 <__udivdi3+0x1e8>
 100855c:	4000b526 	beq	r8,zero,1008834 <__udivdi3+0x32c>
 1008560:	00bfffd4 	movui	r2,65535
 1008564:	14c0ad36 	bltu	r2,r19,100881c <__udivdi3+0x314>
 1008568:	00803fc4 	movi	r2,255
 100856c:	14c15e36 	bltu	r2,r19,1008ae8 <__udivdi3+0x5e0>
 1008570:	000b883a 	mov	r5,zero
 1008574:	0005883a 	mov	r2,zero
 1008578:	9884d83a 	srl	r2,r19,r2
 100857c:	01004074 	movhi	r4,257
 1008580:	21099804 	addi	r4,r4,9824
 1008584:	01800804 	movi	r6,32
 1008588:	1105883a 	add	r2,r2,r4
 100858c:	10c00003 	ldbu	r3,0(r2)
 1008590:	28c7883a 	add	r3,r5,r3
 1008594:	30e9c83a 	sub	r20,r6,r3
 1008598:	a0010a1e 	bne	r20,zero,10089c4 <__udivdi3+0x4bc>
 100859c:	982ed43a 	srli	r23,r19,16
 10085a0:	acebc83a 	sub	r21,r21,r19
 10085a4:	9dbfffcc 	andi	r22,r19,65535
 10085a8:	05000044 	movi	r20,1
 10085ac:	a809883a 	mov	r4,r21
 10085b0:	b80b883a 	mov	r5,r23
 10085b4:	100a43c0 	call	100a43c <__udivsi3>
 10085b8:	100b883a 	mov	r5,r2
 10085bc:	b009883a 	mov	r4,r22
 10085c0:	1021883a 	mov	r16,r2
 10085c4:	1000adc0 	call	1000adc <__mulsi3>
 10085c8:	a809883a 	mov	r4,r21
 10085cc:	b80b883a 	mov	r5,r23
 10085d0:	1023883a 	mov	r17,r2
 10085d4:	100a4440 	call	100a444 <__umodsi3>
 10085d8:	1004943a 	slli	r2,r2,16
 10085dc:	e006d43a 	srli	r3,fp,16
 10085e0:	10c4b03a 	or	r2,r2,r3
 10085e4:	1440042e 	bgeu	r2,r17,10085f8 <__udivdi3+0xf0>
 10085e8:	14c5883a 	add	r2,r2,r19
 10085ec:	843fffc4 	addi	r16,r16,-1
 10085f0:	14c00136 	bltu	r2,r19,10085f8 <__udivdi3+0xf0>
 10085f4:	14415c36 	bltu	r2,r17,1008b68 <__udivdi3+0x660>
 10085f8:	1463c83a 	sub	r17,r2,r17
 10085fc:	8809883a 	mov	r4,r17
 1008600:	b80b883a 	mov	r5,r23
 1008604:	100a43c0 	call	100a43c <__udivsi3>
 1008608:	100b883a 	mov	r5,r2
 100860c:	b009883a 	mov	r4,r22
 1008610:	102b883a 	mov	r21,r2
 1008614:	1000adc0 	call	1000adc <__mulsi3>
 1008618:	8809883a 	mov	r4,r17
 100861c:	b80b883a 	mov	r5,r23
 1008620:	1025883a 	mov	r18,r2
 1008624:	100a4440 	call	100a444 <__umodsi3>
 1008628:	1004943a 	slli	r2,r2,16
 100862c:	e0ffffcc 	andi	r3,fp,65535
 1008630:	10c4b03a 	or	r2,r2,r3
 1008634:	1480042e 	bgeu	r2,r18,1008648 <__udivdi3+0x140>
 1008638:	9885883a 	add	r2,r19,r2
 100863c:	ad7fffc4 	addi	r21,r21,-1
 1008640:	14c00136 	bltu	r2,r19,1008648 <__udivdi3+0x140>
 1008644:	14813c36 	bltu	r2,r18,1008b38 <__udivdi3+0x630>
 1008648:	8004943a 	slli	r2,r16,16
 100864c:	a009883a 	mov	r4,r20
 1008650:	a884b03a 	or	r2,r21,r2
 1008654:	00001506 	br	10086ac <__udivdi3+0x1a4>
 1008658:	380d883a 	mov	r6,r7
 100865c:	29c06c36 	bltu	r5,r7,1008810 <__udivdi3+0x308>
 1008660:	00bfffd4 	movui	r2,65535
 1008664:	11c06436 	bltu	r2,r7,10087f8 <__udivdi3+0x2f0>
 1008668:	00803fc4 	movi	r2,255
 100866c:	11c11836 	bltu	r2,r7,1008ad0 <__udivdi3+0x5c8>
 1008670:	000b883a 	mov	r5,zero
 1008674:	0005883a 	mov	r2,zero
 1008678:	3084d83a 	srl	r2,r6,r2
 100867c:	01004074 	movhi	r4,257
 1008680:	21099804 	addi	r4,r4,9824
 1008684:	01c00804 	movi	r7,32
 1008688:	1105883a 	add	r2,r2,r4
 100868c:	10c00003 	ldbu	r3,0(r2)
 1008690:	28c7883a 	add	r3,r5,r3
 1008694:	38edc83a 	sub	r22,r7,r3
 1008698:	b000731e 	bne	r22,zero,1008868 <__udivdi3+0x360>
 100869c:	35400136 	bltu	r6,r21,10086a4 <__udivdi3+0x19c>
 10086a0:	e4c05b36 	bltu	fp,r19,1008810 <__udivdi3+0x308>
 10086a4:	00800044 	movi	r2,1
 10086a8:	0009883a 	mov	r4,zero
 10086ac:	d8800315 	stw	r2,12(sp)
 10086b0:	d9400317 	ldw	r5,12(sp)
 10086b4:	d9000415 	stw	r4,16(sp)
 10086b8:	2007883a 	mov	r3,r4
 10086bc:	2805883a 	mov	r2,r5
 10086c0:	dfc00e17 	ldw	ra,56(sp)
 10086c4:	df000d17 	ldw	fp,52(sp)
 10086c8:	ddc00c17 	ldw	r23,48(sp)
 10086cc:	dd800b17 	ldw	r22,44(sp)
 10086d0:	dd400a17 	ldw	r21,40(sp)
 10086d4:	dd000917 	ldw	r20,36(sp)
 10086d8:	dcc00817 	ldw	r19,32(sp)
 10086dc:	dc800717 	ldw	r18,28(sp)
 10086e0:	dc400617 	ldw	r17,24(sp)
 10086e4:	dc000517 	ldw	r16,20(sp)
 10086e8:	dec00f04 	addi	sp,sp,60
 10086ec:	f800283a 	ret
 10086f0:	00bfffd4 	movui	r2,65535
 10086f4:	12005636 	bltu	r2,r8,1008850 <__udivdi3+0x348>
 10086f8:	00803fc4 	movi	r2,255
 10086fc:	12010036 	bltu	r2,r8,1008b00 <__udivdi3+0x5f8>
 1008700:	000b883a 	mov	r5,zero
 1008704:	0005883a 	mov	r2,zero
 1008708:	9884d83a 	srl	r2,r19,r2
 100870c:	01004074 	movhi	r4,257
 1008710:	21099804 	addi	r4,r4,9824
 1008714:	01800804 	movi	r6,32
 1008718:	1105883a 	add	r2,r2,r4
 100871c:	10c00003 	ldbu	r3,0(r2)
 1008720:	28c7883a 	add	r3,r5,r3
 1008724:	30cbc83a 	sub	r5,r6,r3
 1008728:	28000626 	beq	r5,zero,1008744 <__udivdi3+0x23c>
 100872c:	3145c83a 	sub	r2,r6,r5
 1008730:	e084d83a 	srl	r2,fp,r2
 1008734:	a946983a 	sll	r3,r21,r5
 1008738:	e178983a 	sll	fp,fp,r5
 100873c:	9966983a 	sll	r19,r19,r5
 1008740:	18aab03a 	or	r21,r3,r2
 1008744:	982ed43a 	srli	r23,r19,16
 1008748:	a809883a 	mov	r4,r21
 100874c:	9cbfffcc 	andi	r18,r19,65535
 1008750:	b80b883a 	mov	r5,r23
 1008754:	100a43c0 	call	100a43c <__udivsi3>
 1008758:	100b883a 	mov	r5,r2
 100875c:	9009883a 	mov	r4,r18
 1008760:	1021883a 	mov	r16,r2
 1008764:	1000adc0 	call	1000adc <__mulsi3>
 1008768:	a809883a 	mov	r4,r21
 100876c:	b80b883a 	mov	r5,r23
 1008770:	1023883a 	mov	r17,r2
 1008774:	100a4440 	call	100a444 <__umodsi3>
 1008778:	1004943a 	slli	r2,r2,16
 100877c:	e006d43a 	srli	r3,fp,16
 1008780:	10c4b03a 	or	r2,r2,r3
 1008784:	1440042e 	bgeu	r2,r17,1008798 <__udivdi3+0x290>
 1008788:	14c5883a 	add	r2,r2,r19
 100878c:	843fffc4 	addi	r16,r16,-1
 1008790:	14c00136 	bltu	r2,r19,1008798 <__udivdi3+0x290>
 1008794:	1440ea36 	bltu	r2,r17,1008b40 <__udivdi3+0x638>
 1008798:	1463c83a 	sub	r17,r2,r17
 100879c:	8809883a 	mov	r4,r17
 10087a0:	b80b883a 	mov	r5,r23
 10087a4:	100a43c0 	call	100a43c <__udivsi3>
 10087a8:	100b883a 	mov	r5,r2
 10087ac:	9009883a 	mov	r4,r18
 10087b0:	102b883a 	mov	r21,r2
 10087b4:	1000adc0 	call	1000adc <__mulsi3>
 10087b8:	8809883a 	mov	r4,r17
 10087bc:	b80b883a 	mov	r5,r23
 10087c0:	1025883a 	mov	r18,r2
 10087c4:	100a4440 	call	100a444 <__umodsi3>
 10087c8:	1004943a 	slli	r2,r2,16
 10087cc:	e0ffffcc 	andi	r3,fp,65535
 10087d0:	10c4b03a 	or	r2,r2,r3
 10087d4:	1480042e 	bgeu	r2,r18,10087e8 <__udivdi3+0x2e0>
 10087d8:	9885883a 	add	r2,r19,r2
 10087dc:	ad7fffc4 	addi	r21,r21,-1
 10087e0:	14c00136 	bltu	r2,r19,10087e8 <__udivdi3+0x2e0>
 10087e4:	1480d936 	bltu	r2,r18,1008b4c <__udivdi3+0x644>
 10087e8:	8004943a 	slli	r2,r16,16
 10087ec:	0009883a 	mov	r4,zero
 10087f0:	a884b03a 	or	r2,r21,r2
 10087f4:	003fad06 	br	10086ac <__udivdi3+0x1a4>
 10087f8:	00804034 	movhi	r2,256
 10087fc:	10bfffc4 	addi	r2,r2,-1
 1008800:	11c0b636 	bltu	r2,r7,1008adc <__udivdi3+0x5d4>
 1008804:	01400404 	movi	r5,16
 1008808:	2805883a 	mov	r2,r5
 100880c:	003f9a06 	br	1008678 <__udivdi3+0x170>
 1008810:	0005883a 	mov	r2,zero
 1008814:	0009883a 	mov	r4,zero
 1008818:	003fa406 	br	10086ac <__udivdi3+0x1a4>
 100881c:	00804034 	movhi	r2,256
 1008820:	10bfffc4 	addi	r2,r2,-1
 1008824:	14c0b336 	bltu	r2,r19,1008af4 <__udivdi3+0x5ec>
 1008828:	01400404 	movi	r5,16
 100882c:	2805883a 	mov	r2,r5
 1008830:	003f5106 	br	1008578 <__udivdi3+0x70>
 1008834:	01000044 	movi	r4,1
 1008838:	000b883a 	mov	r5,zero
 100883c:	100a43c0 	call	100a43c <__udivsi3>
 1008840:	1027883a 	mov	r19,r2
 1008844:	00bfffd4 	movui	r2,65535
 1008848:	14fff436 	bltu	r2,r19,100881c <__udivdi3+0x314>
 100884c:	003f4606 	br	1008568 <__udivdi3+0x60>
 1008850:	00804034 	movhi	r2,256
 1008854:	10bfffc4 	addi	r2,r2,-1
 1008858:	1200ac36 	bltu	r2,r8,1008b0c <__udivdi3+0x604>
 100885c:	01400404 	movi	r5,16
 1008860:	2805883a 	mov	r2,r5
 1008864:	003fa806 	br	1008708 <__udivdi3+0x200>
 1008868:	3d85c83a 	sub	r2,r7,r22
 100886c:	3588983a 	sll	r4,r6,r22
 1008870:	9886d83a 	srl	r3,r19,r2
 1008874:	a8a2d83a 	srl	r17,r21,r2
 1008878:	e084d83a 	srl	r2,fp,r2
 100887c:	20eeb03a 	or	r23,r4,r3
 1008880:	b824d43a 	srli	r18,r23,16
 1008884:	ad86983a 	sll	r3,r21,r22
 1008888:	8809883a 	mov	r4,r17
 100888c:	900b883a 	mov	r5,r18
 1008890:	1886b03a 	or	r3,r3,r2
 1008894:	d8c00115 	stw	r3,4(sp)
 1008898:	bc3fffcc 	andi	r16,r23,65535
 100889c:	100a43c0 	call	100a43c <__udivsi3>
 10088a0:	100b883a 	mov	r5,r2
 10088a4:	8009883a 	mov	r4,r16
 10088a8:	1029883a 	mov	r20,r2
 10088ac:	1000adc0 	call	1000adc <__mulsi3>
 10088b0:	900b883a 	mov	r5,r18
 10088b4:	8809883a 	mov	r4,r17
 10088b8:	102b883a 	mov	r21,r2
 10088bc:	100a4440 	call	100a444 <__umodsi3>
 10088c0:	d9400117 	ldw	r5,4(sp)
 10088c4:	1004943a 	slli	r2,r2,16
 10088c8:	9da6983a 	sll	r19,r19,r22
 10088cc:	2806d43a 	srli	r3,r5,16
 10088d0:	10c4b03a 	or	r2,r2,r3
 10088d4:	1540032e 	bgeu	r2,r21,10088e4 <__udivdi3+0x3dc>
 10088d8:	15c5883a 	add	r2,r2,r23
 10088dc:	a53fffc4 	addi	r20,r20,-1
 10088e0:	15c0912e 	bgeu	r2,r23,1008b28 <__udivdi3+0x620>
 10088e4:	1563c83a 	sub	r17,r2,r21
 10088e8:	8809883a 	mov	r4,r17
 10088ec:	900b883a 	mov	r5,r18
 10088f0:	100a43c0 	call	100a43c <__udivsi3>
 10088f4:	100b883a 	mov	r5,r2
 10088f8:	8009883a 	mov	r4,r16
 10088fc:	102b883a 	mov	r21,r2
 1008900:	1000adc0 	call	1000adc <__mulsi3>
 1008904:	8809883a 	mov	r4,r17
 1008908:	900b883a 	mov	r5,r18
 100890c:	1021883a 	mov	r16,r2
 1008910:	100a4440 	call	100a444 <__umodsi3>
 1008914:	da800117 	ldw	r10,4(sp)
 1008918:	1004943a 	slli	r2,r2,16
 100891c:	50ffffcc 	andi	r3,r10,65535
 1008920:	10c6b03a 	or	r3,r2,r3
 1008924:	1c00032e 	bgeu	r3,r16,1008934 <__udivdi3+0x42c>
 1008928:	1dc7883a 	add	r3,r3,r23
 100892c:	ad7fffc4 	addi	r21,r21,-1
 1008930:	1dc0792e 	bgeu	r3,r23,1008b18 <__udivdi3+0x610>
 1008934:	a004943a 	slli	r2,r20,16
 1008938:	982ed43a 	srli	r23,r19,16
 100893c:	9cffffcc 	andi	r19,r19,65535
 1008940:	a8a4b03a 	or	r18,r21,r2
 1008944:	947fffcc 	andi	r17,r18,65535
 1008948:	902ad43a 	srli	r21,r18,16
 100894c:	8809883a 	mov	r4,r17
 1008950:	980b883a 	mov	r5,r19
 1008954:	1c21c83a 	sub	r16,r3,r16
 1008958:	1000adc0 	call	1000adc <__mulsi3>
 100895c:	8809883a 	mov	r4,r17
 1008960:	b80b883a 	mov	r5,r23
 1008964:	1029883a 	mov	r20,r2
 1008968:	1000adc0 	call	1000adc <__mulsi3>
 100896c:	980b883a 	mov	r5,r19
 1008970:	a809883a 	mov	r4,r21
 1008974:	1023883a 	mov	r17,r2
 1008978:	1000adc0 	call	1000adc <__mulsi3>
 100897c:	a809883a 	mov	r4,r21
 1008980:	b80b883a 	mov	r5,r23
 1008984:	1027883a 	mov	r19,r2
 1008988:	1000adc0 	call	1000adc <__mulsi3>
 100898c:	1009883a 	mov	r4,r2
 1008990:	a004d43a 	srli	r2,r20,16
 1008994:	8ce3883a 	add	r17,r17,r19
 1008998:	1447883a 	add	r3,r2,r17
 100899c:	1cc0022e 	bgeu	r3,r19,10089a8 <__udivdi3+0x4a0>
 10089a0:	00800074 	movhi	r2,1
 10089a4:	2089883a 	add	r4,r4,r2
 10089a8:	1804d43a 	srli	r2,r3,16
 10089ac:	2085883a 	add	r2,r4,r2
 10089b0:	80804436 	bltu	r16,r2,1008ac4 <__udivdi3+0x5bc>
 10089b4:	80803e26 	beq	r16,r2,1008ab0 <__udivdi3+0x5a8>
 10089b8:	9005883a 	mov	r2,r18
 10089bc:	0009883a 	mov	r4,zero
 10089c0:	003f3a06 	br	10086ac <__udivdi3+0x1a4>
 10089c4:	9d26983a 	sll	r19,r19,r20
 10089c8:	3505c83a 	sub	r2,r6,r20
 10089cc:	a8a2d83a 	srl	r17,r21,r2
 10089d0:	982ed43a 	srli	r23,r19,16
 10089d4:	e084d83a 	srl	r2,fp,r2
 10089d8:	ad06983a 	sll	r3,r21,r20
 10089dc:	8809883a 	mov	r4,r17
 10089e0:	b80b883a 	mov	r5,r23
 10089e4:	1886b03a 	or	r3,r3,r2
 10089e8:	d8c00015 	stw	r3,0(sp)
 10089ec:	9dbfffcc 	andi	r22,r19,65535
 10089f0:	100a43c0 	call	100a43c <__udivsi3>
 10089f4:	100b883a 	mov	r5,r2
 10089f8:	b009883a 	mov	r4,r22
 10089fc:	d8800215 	stw	r2,8(sp)
 1008a00:	1000adc0 	call	1000adc <__mulsi3>
 1008a04:	8809883a 	mov	r4,r17
 1008a08:	b80b883a 	mov	r5,r23
 1008a0c:	102b883a 	mov	r21,r2
 1008a10:	100a4440 	call	100a444 <__umodsi3>
 1008a14:	d9000017 	ldw	r4,0(sp)
 1008a18:	1004943a 	slli	r2,r2,16
 1008a1c:	2006d43a 	srli	r3,r4,16
 1008a20:	10c4b03a 	or	r2,r2,r3
 1008a24:	1540052e 	bgeu	r2,r21,1008a3c <__udivdi3+0x534>
 1008a28:	d9400217 	ldw	r5,8(sp)
 1008a2c:	14c5883a 	add	r2,r2,r19
 1008a30:	297fffc4 	addi	r5,r5,-1
 1008a34:	d9400215 	stw	r5,8(sp)
 1008a38:	14c0462e 	bgeu	r2,r19,1008b54 <__udivdi3+0x64c>
 1008a3c:	1563c83a 	sub	r17,r2,r21
 1008a40:	8809883a 	mov	r4,r17
 1008a44:	b80b883a 	mov	r5,r23
 1008a48:	100a43c0 	call	100a43c <__udivsi3>
 1008a4c:	100b883a 	mov	r5,r2
 1008a50:	b009883a 	mov	r4,r22
 1008a54:	1025883a 	mov	r18,r2
 1008a58:	1000adc0 	call	1000adc <__mulsi3>
 1008a5c:	8809883a 	mov	r4,r17
 1008a60:	b80b883a 	mov	r5,r23
 1008a64:	1021883a 	mov	r16,r2
 1008a68:	100a4440 	call	100a444 <__umodsi3>
 1008a6c:	da800017 	ldw	r10,0(sp)
 1008a70:	1004943a 	slli	r2,r2,16
 1008a74:	50ffffcc 	andi	r3,r10,65535
 1008a78:	10c6b03a 	or	r3,r2,r3
 1008a7c:	1c00062e 	bgeu	r3,r16,1008a98 <__udivdi3+0x590>
 1008a80:	1cc7883a 	add	r3,r3,r19
 1008a84:	94bfffc4 	addi	r18,r18,-1
 1008a88:	1cc00336 	bltu	r3,r19,1008a98 <__udivdi3+0x590>
 1008a8c:	1c00022e 	bgeu	r3,r16,1008a98 <__udivdi3+0x590>
 1008a90:	94bfffc4 	addi	r18,r18,-1
 1008a94:	1cc7883a 	add	r3,r3,r19
 1008a98:	d9000217 	ldw	r4,8(sp)
 1008a9c:	e538983a 	sll	fp,fp,r20
 1008aa0:	1c2bc83a 	sub	r21,r3,r16
 1008aa4:	2004943a 	slli	r2,r4,16
 1008aa8:	90a8b03a 	or	r20,r18,r2
 1008aac:	003ebf06 	br	10085ac <__udivdi3+0xa4>
 1008ab0:	1804943a 	slli	r2,r3,16
 1008ab4:	e588983a 	sll	r4,fp,r22
 1008ab8:	a0ffffcc 	andi	r3,r20,65535
 1008abc:	10c5883a 	add	r2,r2,r3
 1008ac0:	20bfbd2e 	bgeu	r4,r2,10089b8 <__udivdi3+0x4b0>
 1008ac4:	90bfffc4 	addi	r2,r18,-1
 1008ac8:	0009883a 	mov	r4,zero
 1008acc:	003ef706 	br	10086ac <__udivdi3+0x1a4>
 1008ad0:	01400204 	movi	r5,8
 1008ad4:	2805883a 	mov	r2,r5
 1008ad8:	003ee706 	br	1008678 <__udivdi3+0x170>
 1008adc:	01400604 	movi	r5,24
 1008ae0:	2805883a 	mov	r2,r5
 1008ae4:	003ee406 	br	1008678 <__udivdi3+0x170>
 1008ae8:	01400204 	movi	r5,8
 1008aec:	2805883a 	mov	r2,r5
 1008af0:	003ea106 	br	1008578 <__udivdi3+0x70>
 1008af4:	01400604 	movi	r5,24
 1008af8:	2805883a 	mov	r2,r5
 1008afc:	003e9e06 	br	1008578 <__udivdi3+0x70>
 1008b00:	01400204 	movi	r5,8
 1008b04:	2805883a 	mov	r2,r5
 1008b08:	003eff06 	br	1008708 <__udivdi3+0x200>
 1008b0c:	01400604 	movi	r5,24
 1008b10:	2805883a 	mov	r2,r5
 1008b14:	003efc06 	br	1008708 <__udivdi3+0x200>
 1008b18:	1c3f862e 	bgeu	r3,r16,1008934 <__udivdi3+0x42c>
 1008b1c:	1dc7883a 	add	r3,r3,r23
 1008b20:	ad7fffc4 	addi	r21,r21,-1
 1008b24:	003f8306 	br	1008934 <__udivdi3+0x42c>
 1008b28:	157f6e2e 	bgeu	r2,r21,10088e4 <__udivdi3+0x3dc>
 1008b2c:	a53fffc4 	addi	r20,r20,-1
 1008b30:	15c5883a 	add	r2,r2,r23
 1008b34:	003f6b06 	br	10088e4 <__udivdi3+0x3dc>
 1008b38:	ad7fffc4 	addi	r21,r21,-1
 1008b3c:	003ec206 	br	1008648 <__udivdi3+0x140>
 1008b40:	843fffc4 	addi	r16,r16,-1
 1008b44:	14c5883a 	add	r2,r2,r19
 1008b48:	003f1306 	br	1008798 <__udivdi3+0x290>
 1008b4c:	ad7fffc4 	addi	r21,r21,-1
 1008b50:	003f2506 	br	10087e8 <__udivdi3+0x2e0>
 1008b54:	157fb92e 	bgeu	r2,r21,1008a3c <__udivdi3+0x534>
 1008b58:	297fffc4 	addi	r5,r5,-1
 1008b5c:	14c5883a 	add	r2,r2,r19
 1008b60:	d9400215 	stw	r5,8(sp)
 1008b64:	003fb506 	br	1008a3c <__udivdi3+0x534>
 1008b68:	843fffc4 	addi	r16,r16,-1
 1008b6c:	14c5883a 	add	r2,r2,r19
 1008b70:	003ea106 	br	10085f8 <__udivdi3+0xf0>

01008b74 <__umoddi3>:
 1008b74:	defff004 	addi	sp,sp,-64
 1008b78:	3011883a 	mov	r8,r6
 1008b7c:	000d883a 	mov	r6,zero
 1008b80:	dd400b15 	stw	r21,44(sp)
 1008b84:	dcc00915 	stw	r19,36(sp)
 1008b88:	dc000615 	stw	r16,24(sp)
 1008b8c:	dfc00f15 	stw	ra,60(sp)
 1008b90:	df000e15 	stw	fp,56(sp)
 1008b94:	ddc00d15 	stw	r23,52(sp)
 1008b98:	dd800c15 	stw	r22,48(sp)
 1008b9c:	dd000a15 	stw	r20,40(sp)
 1008ba0:	dc800815 	stw	r18,32(sp)
 1008ba4:	dc400715 	stw	r17,28(sp)
 1008ba8:	2817883a 	mov	r11,r5
 1008bac:	d9800415 	stw	r6,16(sp)
 1008bb0:	4027883a 	mov	r19,r8
 1008bb4:	d9800515 	stw	r6,20(sp)
 1008bb8:	2021883a 	mov	r16,r4
 1008bbc:	282b883a 	mov	r21,r5
 1008bc0:	38002c1e 	bne	r7,zero,1008c74 <__umoddi3+0x100>
 1008bc4:	2a005636 	bltu	r5,r8,1008d20 <__umoddi3+0x1ac>
 1008bc8:	40009a26 	beq	r8,zero,1008e34 <__umoddi3+0x2c0>
 1008bcc:	00bfffd4 	movui	r2,65535
 1008bd0:	14c09236 	bltu	r2,r19,1008e1c <__umoddi3+0x2a8>
 1008bd4:	00803fc4 	movi	r2,255
 1008bd8:	14c15c36 	bltu	r2,r19,100914c <__umoddi3+0x5d8>
 1008bdc:	000b883a 	mov	r5,zero
 1008be0:	0005883a 	mov	r2,zero
 1008be4:	9884d83a 	srl	r2,r19,r2
 1008be8:	01004074 	movhi	r4,257
 1008bec:	21099804 	addi	r4,r4,9824
 1008bf0:	01800804 	movi	r6,32
 1008bf4:	1105883a 	add	r2,r2,r4
 1008bf8:	10c00003 	ldbu	r3,0(r2)
 1008bfc:	28c7883a 	add	r3,r5,r3
 1008c00:	30e5c83a 	sub	r18,r6,r3
 1008c04:	9000a41e 	bne	r18,zero,1008e98 <__umoddi3+0x324>
 1008c08:	982ed43a 	srli	r23,r19,16
 1008c0c:	acebc83a 	sub	r21,r21,r19
 1008c10:	9d3fffcc 	andi	r20,r19,65535
 1008c14:	002d883a 	mov	r22,zero
 1008c18:	a809883a 	mov	r4,r21
 1008c1c:	b80b883a 	mov	r5,r23
 1008c20:	100a43c0 	call	100a43c <__udivsi3>
 1008c24:	100b883a 	mov	r5,r2
 1008c28:	a009883a 	mov	r4,r20
 1008c2c:	1000adc0 	call	1000adc <__mulsi3>
 1008c30:	a809883a 	mov	r4,r21
 1008c34:	b80b883a 	mov	r5,r23
 1008c38:	1023883a 	mov	r17,r2
 1008c3c:	100a4440 	call	100a444 <__umodsi3>
 1008c40:	1004943a 	slli	r2,r2,16
 1008c44:	8006d43a 	srli	r3,r16,16
 1008c48:	10c4b03a 	or	r2,r2,r3
 1008c4c:	1440032e 	bgeu	r2,r17,1008c5c <__umoddi3+0xe8>
 1008c50:	14c5883a 	add	r2,r2,r19
 1008c54:	14c00136 	bltu	r2,r19,1008c5c <__umoddi3+0xe8>
 1008c58:	14415836 	bltu	r2,r17,10091bc <__umoddi3+0x648>
 1008c5c:	1463c83a 	sub	r17,r2,r17
 1008c60:	8809883a 	mov	r4,r17
 1008c64:	b80b883a 	mov	r5,r23
 1008c68:	100a43c0 	call	100a43c <__udivsi3>
 1008c6c:	a009883a 	mov	r4,r20
 1008c70:	00005306 	br	1008dc0 <__umoddi3+0x24c>
 1008c74:	380d883a 	mov	r6,r7
 1008c78:	29c0132e 	bgeu	r5,r7,1008cc8 <__umoddi3+0x154>
 1008c7c:	d9000415 	stw	r4,16(sp)
 1008c80:	d9400515 	stw	r5,20(sp)
 1008c84:	d9400417 	ldw	r5,16(sp)
 1008c88:	5813883a 	mov	r9,r11
 1008c8c:	2811883a 	mov	r8,r5
 1008c90:	4005883a 	mov	r2,r8
 1008c94:	4807883a 	mov	r3,r9
 1008c98:	dfc00f17 	ldw	ra,60(sp)
 1008c9c:	df000e17 	ldw	fp,56(sp)
 1008ca0:	ddc00d17 	ldw	r23,52(sp)
 1008ca4:	dd800c17 	ldw	r22,48(sp)
 1008ca8:	dd400b17 	ldw	r21,44(sp)
 1008cac:	dd000a17 	ldw	r20,40(sp)
 1008cb0:	dcc00917 	ldw	r19,36(sp)
 1008cb4:	dc800817 	ldw	r18,32(sp)
 1008cb8:	dc400717 	ldw	r17,28(sp)
 1008cbc:	dc000617 	ldw	r16,24(sp)
 1008cc0:	dec01004 	addi	sp,sp,64
 1008cc4:	f800283a 	ret
 1008cc8:	00bfffd4 	movui	r2,65535
 1008ccc:	11c06636 	bltu	r2,r7,1008e68 <__umoddi3+0x2f4>
 1008cd0:	00803fc4 	movi	r2,255
 1008cd4:	11c12036 	bltu	r2,r7,1009158 <__umoddi3+0x5e4>
 1008cd8:	000b883a 	mov	r5,zero
 1008cdc:	0005883a 	mov	r2,zero
 1008ce0:	3084d83a 	srl	r2,r6,r2
 1008ce4:	01004074 	movhi	r4,257
 1008ce8:	21099804 	addi	r4,r4,9824
 1008cec:	01c00804 	movi	r7,32
 1008cf0:	1105883a 	add	r2,r2,r4
 1008cf4:	10c00003 	ldbu	r3,0(r2)
 1008cf8:	28c7883a 	add	r3,r5,r3
 1008cfc:	38e5c83a 	sub	r18,r7,r3
 1008d00:	9000941e 	bne	r18,zero,1008f54 <__umoddi3+0x3e0>
 1008d04:	35405e36 	bltu	r6,r21,1008e80 <__umoddi3+0x30c>
 1008d08:	84c05d2e 	bgeu	r16,r19,1008e80 <__umoddi3+0x30c>
 1008d0c:	8011883a 	mov	r8,r16
 1008d10:	a813883a 	mov	r9,r21
 1008d14:	dc000415 	stw	r16,16(sp)
 1008d18:	dd400515 	stw	r21,20(sp)
 1008d1c:	003fdc06 	br	1008c90 <__umoddi3+0x11c>
 1008d20:	00bfffd4 	movui	r2,65535
 1008d24:	12004a36 	bltu	r2,r8,1008e50 <__umoddi3+0x2dc>
 1008d28:	00803fc4 	movi	r2,255
 1008d2c:	12010d36 	bltu	r2,r8,1009164 <__umoddi3+0x5f0>
 1008d30:	000b883a 	mov	r5,zero
 1008d34:	0005883a 	mov	r2,zero
 1008d38:	9884d83a 	srl	r2,r19,r2
 1008d3c:	01004074 	movhi	r4,257
 1008d40:	21099804 	addi	r4,r4,9824
 1008d44:	01800804 	movi	r6,32
 1008d48:	1105883a 	add	r2,r2,r4
 1008d4c:	10c00003 	ldbu	r3,0(r2)
 1008d50:	28c7883a 	add	r3,r5,r3
 1008d54:	30c7c83a 	sub	r3,r6,r3
 1008d58:	1800dc1e 	bne	r3,zero,10090cc <__umoddi3+0x558>
 1008d5c:	002d883a 	mov	r22,zero
 1008d60:	982ed43a 	srli	r23,r19,16
 1008d64:	a809883a 	mov	r4,r21
 1008d68:	9cbfffcc 	andi	r18,r19,65535
 1008d6c:	b80b883a 	mov	r5,r23
 1008d70:	100a43c0 	call	100a43c <__udivsi3>
 1008d74:	100b883a 	mov	r5,r2
 1008d78:	9009883a 	mov	r4,r18
 1008d7c:	1000adc0 	call	1000adc <__mulsi3>
 1008d80:	a809883a 	mov	r4,r21
 1008d84:	b80b883a 	mov	r5,r23
 1008d88:	1023883a 	mov	r17,r2
 1008d8c:	100a4440 	call	100a444 <__umodsi3>
 1008d90:	1004943a 	slli	r2,r2,16
 1008d94:	8006d43a 	srli	r3,r16,16
 1008d98:	10c4b03a 	or	r2,r2,r3
 1008d9c:	1440032e 	bgeu	r2,r17,1008dac <__umoddi3+0x238>
 1008da0:	14c5883a 	add	r2,r2,r19
 1008da4:	14c00136 	bltu	r2,r19,1008dac <__umoddi3+0x238>
 1008da8:	14410236 	bltu	r2,r17,10091b4 <__umoddi3+0x640>
 1008dac:	1463c83a 	sub	r17,r2,r17
 1008db0:	8809883a 	mov	r4,r17
 1008db4:	b80b883a 	mov	r5,r23
 1008db8:	100a43c0 	call	100a43c <__udivsi3>
 1008dbc:	9009883a 	mov	r4,r18
 1008dc0:	100b883a 	mov	r5,r2
 1008dc4:	1000adc0 	call	1000adc <__mulsi3>
 1008dc8:	8809883a 	mov	r4,r17
 1008dcc:	b80b883a 	mov	r5,r23
 1008dd0:	102b883a 	mov	r21,r2
 1008dd4:	100a4440 	call	100a444 <__umodsi3>
 1008dd8:	1004943a 	slli	r2,r2,16
 1008ddc:	80ffffcc 	andi	r3,r16,65535
 1008de0:	10c4b03a 	or	r2,r2,r3
 1008de4:	1540042e 	bgeu	r2,r21,1008df8 <__umoddi3+0x284>
 1008de8:	14c5883a 	add	r2,r2,r19
 1008dec:	14c00236 	bltu	r2,r19,1008df8 <__umoddi3+0x284>
 1008df0:	1540012e 	bgeu	r2,r21,1008df8 <__umoddi3+0x284>
 1008df4:	14c5883a 	add	r2,r2,r19
 1008df8:	1545c83a 	sub	r2,r2,r21
 1008dfc:	1584d83a 	srl	r2,r2,r22
 1008e00:	0013883a 	mov	r9,zero
 1008e04:	d8800415 	stw	r2,16(sp)
 1008e08:	d8c00417 	ldw	r3,16(sp)
 1008e0c:	0005883a 	mov	r2,zero
 1008e10:	d8800515 	stw	r2,20(sp)
 1008e14:	1811883a 	mov	r8,r3
 1008e18:	003f9d06 	br	1008c90 <__umoddi3+0x11c>
 1008e1c:	00804034 	movhi	r2,256
 1008e20:	10bfffc4 	addi	r2,r2,-1
 1008e24:	14c0c636 	bltu	r2,r19,1009140 <__umoddi3+0x5cc>
 1008e28:	01400404 	movi	r5,16
 1008e2c:	2805883a 	mov	r2,r5
 1008e30:	003f6c06 	br	1008be4 <__umoddi3+0x70>
 1008e34:	01000044 	movi	r4,1
 1008e38:	000b883a 	mov	r5,zero
 1008e3c:	100a43c0 	call	100a43c <__udivsi3>
 1008e40:	1027883a 	mov	r19,r2
 1008e44:	00bfffd4 	movui	r2,65535
 1008e48:	14fff436 	bltu	r2,r19,1008e1c <__umoddi3+0x2a8>
 1008e4c:	003f6106 	br	1008bd4 <__umoddi3+0x60>
 1008e50:	00804034 	movhi	r2,256
 1008e54:	10bfffc4 	addi	r2,r2,-1
 1008e58:	1200c536 	bltu	r2,r8,1009170 <__umoddi3+0x5fc>
 1008e5c:	01400404 	movi	r5,16
 1008e60:	2805883a 	mov	r2,r5
 1008e64:	003fb406 	br	1008d38 <__umoddi3+0x1c4>
 1008e68:	00804034 	movhi	r2,256
 1008e6c:	10bfffc4 	addi	r2,r2,-1
 1008e70:	11c0c236 	bltu	r2,r7,100917c <__umoddi3+0x608>
 1008e74:	01400404 	movi	r5,16
 1008e78:	2805883a 	mov	r2,r5
 1008e7c:	003f9806 	br	1008ce0 <__umoddi3+0x16c>
 1008e80:	84c9c83a 	sub	r4,r16,r19
 1008e84:	8105803a 	cmpltu	r2,r16,r4
 1008e88:	a987c83a 	sub	r3,r21,r6
 1008e8c:	18abc83a 	sub	r21,r3,r2
 1008e90:	2021883a 	mov	r16,r4
 1008e94:	003f9d06 	br	1008d0c <__umoddi3+0x198>
 1008e98:	9ca6983a 	sll	r19,r19,r18
 1008e9c:	3485c83a 	sub	r2,r6,r18
 1008ea0:	a8a2d83a 	srl	r17,r21,r2
 1008ea4:	982ed43a 	srli	r23,r19,16
 1008ea8:	ac86983a 	sll	r3,r21,r18
 1008eac:	8084d83a 	srl	r2,r16,r2
 1008eb0:	8809883a 	mov	r4,r17
 1008eb4:	b80b883a 	mov	r5,r23
 1008eb8:	18b8b03a 	or	fp,r3,r2
 1008ebc:	9d3fffcc 	andi	r20,r19,65535
 1008ec0:	100a43c0 	call	100a43c <__udivsi3>
 1008ec4:	100b883a 	mov	r5,r2
 1008ec8:	a009883a 	mov	r4,r20
 1008ecc:	1000adc0 	call	1000adc <__mulsi3>
 1008ed0:	8809883a 	mov	r4,r17
 1008ed4:	b80b883a 	mov	r5,r23
 1008ed8:	102b883a 	mov	r21,r2
 1008edc:	100a4440 	call	100a444 <__umodsi3>
 1008ee0:	1004943a 	slli	r2,r2,16
 1008ee4:	e006d43a 	srli	r3,fp,16
 1008ee8:	902d883a 	mov	r22,r18
 1008eec:	10c4b03a 	or	r2,r2,r3
 1008ef0:	1540022e 	bgeu	r2,r21,1008efc <__umoddi3+0x388>
 1008ef4:	14c5883a 	add	r2,r2,r19
 1008ef8:	14c0ab2e 	bgeu	r2,r19,10091a8 <__umoddi3+0x634>
 1008efc:	1563c83a 	sub	r17,r2,r21
 1008f00:	8809883a 	mov	r4,r17
 1008f04:	b80b883a 	mov	r5,r23
 1008f08:	100a43c0 	call	100a43c <__udivsi3>
 1008f0c:	100b883a 	mov	r5,r2
 1008f10:	a009883a 	mov	r4,r20
 1008f14:	1000adc0 	call	1000adc <__mulsi3>
 1008f18:	8809883a 	mov	r4,r17
 1008f1c:	b80b883a 	mov	r5,r23
 1008f20:	102b883a 	mov	r21,r2
 1008f24:	100a4440 	call	100a444 <__umodsi3>
 1008f28:	1004943a 	slli	r2,r2,16
 1008f2c:	e0ffffcc 	andi	r3,fp,65535
 1008f30:	10c4b03a 	or	r2,r2,r3
 1008f34:	1540042e 	bgeu	r2,r21,1008f48 <__umoddi3+0x3d4>
 1008f38:	14c5883a 	add	r2,r2,r19
 1008f3c:	14c00236 	bltu	r2,r19,1008f48 <__umoddi3+0x3d4>
 1008f40:	1540012e 	bgeu	r2,r21,1008f48 <__umoddi3+0x3d4>
 1008f44:	14c5883a 	add	r2,r2,r19
 1008f48:	84a0983a 	sll	r16,r16,r18
 1008f4c:	156bc83a 	sub	r21,r2,r21
 1008f50:	003f3106 	br	1008c18 <__umoddi3+0xa4>
 1008f54:	3c8fc83a 	sub	r7,r7,r18
 1008f58:	3486983a 	sll	r3,r6,r18
 1008f5c:	99c4d83a 	srl	r2,r19,r7
 1008f60:	a9e2d83a 	srl	r17,r21,r7
 1008f64:	ac8c983a 	sll	r6,r21,r18
 1008f68:	18acb03a 	or	r22,r3,r2
 1008f6c:	b02ed43a 	srli	r23,r22,16
 1008f70:	81c4d83a 	srl	r2,r16,r7
 1008f74:	8809883a 	mov	r4,r17
 1008f78:	b80b883a 	mov	r5,r23
 1008f7c:	308cb03a 	or	r6,r6,r2
 1008f80:	d9c00315 	stw	r7,12(sp)
 1008f84:	d9800215 	stw	r6,8(sp)
 1008f88:	b53fffcc 	andi	r20,r22,65535
 1008f8c:	100a43c0 	call	100a43c <__udivsi3>
 1008f90:	100b883a 	mov	r5,r2
 1008f94:	a009883a 	mov	r4,r20
 1008f98:	1039883a 	mov	fp,r2
 1008f9c:	1000adc0 	call	1000adc <__mulsi3>
 1008fa0:	8809883a 	mov	r4,r17
 1008fa4:	b80b883a 	mov	r5,r23
 1008fa8:	102b883a 	mov	r21,r2
 1008fac:	100a4440 	call	100a444 <__umodsi3>
 1008fb0:	d9000217 	ldw	r4,8(sp)
 1008fb4:	1004943a 	slli	r2,r2,16
 1008fb8:	9ca6983a 	sll	r19,r19,r18
 1008fbc:	2006d43a 	srli	r3,r4,16
 1008fc0:	84a0983a 	sll	r16,r16,r18
 1008fc4:	dcc00015 	stw	r19,0(sp)
 1008fc8:	10c4b03a 	or	r2,r2,r3
 1008fcc:	dc000115 	stw	r16,4(sp)
 1008fd0:	1540032e 	bgeu	r2,r21,1008fe0 <__umoddi3+0x46c>
 1008fd4:	1585883a 	add	r2,r2,r22
 1008fd8:	e73fffc4 	addi	fp,fp,-1
 1008fdc:	15806e2e 	bgeu	r2,r22,1009198 <__umoddi3+0x624>
 1008fe0:	1563c83a 	sub	r17,r2,r21
 1008fe4:	8809883a 	mov	r4,r17
 1008fe8:	b80b883a 	mov	r5,r23
 1008fec:	100a43c0 	call	100a43c <__udivsi3>
 1008ff0:	100b883a 	mov	r5,r2
 1008ff4:	a009883a 	mov	r4,r20
 1008ff8:	1021883a 	mov	r16,r2
 1008ffc:	1000adc0 	call	1000adc <__mulsi3>
 1009000:	b80b883a 	mov	r5,r23
 1009004:	8809883a 	mov	r4,r17
 1009008:	1029883a 	mov	r20,r2
 100900c:	100a4440 	call	100a444 <__umodsi3>
 1009010:	d9400217 	ldw	r5,8(sp)
 1009014:	1004943a 	slli	r2,r2,16
 1009018:	28ffffcc 	andi	r3,r5,65535
 100901c:	10c4b03a 	or	r2,r2,r3
 1009020:	1500032e 	bgeu	r2,r20,1009030 <__umoddi3+0x4bc>
 1009024:	1585883a 	add	r2,r2,r22
 1009028:	843fffc4 	addi	r16,r16,-1
 100902c:	1580562e 	bgeu	r2,r22,1009188 <__umoddi3+0x614>
 1009030:	d9800017 	ldw	r6,0(sp)
 1009034:	e022943a 	slli	r17,fp,16
 1009038:	302ed43a 	srli	r23,r6,16
 100903c:	8462b03a 	or	r17,r16,r17
 1009040:	34ffffcc 	andi	r19,r6,65535
 1009044:	882ad43a 	srli	r21,r17,16
 1009048:	8c7fffcc 	andi	r17,r17,65535
 100904c:	8809883a 	mov	r4,r17
 1009050:	980b883a 	mov	r5,r19
 1009054:	1521c83a 	sub	r16,r2,r20
 1009058:	1000adc0 	call	1000adc <__mulsi3>
 100905c:	8809883a 	mov	r4,r17
 1009060:	b80b883a 	mov	r5,r23
 1009064:	1029883a 	mov	r20,r2
 1009068:	1000adc0 	call	1000adc <__mulsi3>
 100906c:	980b883a 	mov	r5,r19
 1009070:	a809883a 	mov	r4,r21
 1009074:	1023883a 	mov	r17,r2
 1009078:	1000adc0 	call	1000adc <__mulsi3>
 100907c:	a809883a 	mov	r4,r21
 1009080:	b80b883a 	mov	r5,r23
 1009084:	1027883a 	mov	r19,r2
 1009088:	1000adc0 	call	1000adc <__mulsi3>
 100908c:	100b883a 	mov	r5,r2
 1009090:	a004d43a 	srli	r2,r20,16
 1009094:	8ce3883a 	add	r17,r17,r19
 1009098:	1449883a 	add	r4,r2,r17
 100909c:	24c0022e 	bgeu	r4,r19,10090a8 <__umoddi3+0x534>
 10090a0:	00800074 	movhi	r2,1
 10090a4:	288b883a 	add	r5,r5,r2
 10090a8:	2004d43a 	srli	r2,r4,16
 10090ac:	2008943a 	slli	r4,r4,16
 10090b0:	a0ffffcc 	andi	r3,r20,65535
 10090b4:	288d883a 	add	r6,r5,r2
 10090b8:	20c9883a 	add	r4,r4,r3
 10090bc:	81800b36 	bltu	r16,r6,10090ec <__umoddi3+0x578>
 10090c0:	81804026 	beq	r16,r6,10091c4 <__umoddi3+0x650>
 10090c4:	818dc83a 	sub	r6,r16,r6
 10090c8:	00000f06 	br	1009108 <__umoddi3+0x594>
 10090cc:	30c5c83a 	sub	r2,r6,r3
 10090d0:	182d883a 	mov	r22,r3
 10090d4:	8084d83a 	srl	r2,r16,r2
 10090d8:	a8c6983a 	sll	r3,r21,r3
 10090dc:	9da6983a 	sll	r19,r19,r22
 10090e0:	85a0983a 	sll	r16,r16,r22
 10090e4:	18aab03a 	or	r21,r3,r2
 10090e8:	003f1d06 	br	1008d60 <__umoddi3+0x1ec>
 10090ec:	d8c00017 	ldw	r3,0(sp)
 10090f0:	20c5c83a 	sub	r2,r4,r3
 10090f4:	2089803a 	cmpltu	r4,r4,r2
 10090f8:	3587c83a 	sub	r3,r6,r22
 10090fc:	1907c83a 	sub	r3,r3,r4
 1009100:	80cdc83a 	sub	r6,r16,r3
 1009104:	1009883a 	mov	r4,r2
 1009108:	d9400117 	ldw	r5,4(sp)
 100910c:	2905c83a 	sub	r2,r5,r4
 1009110:	2887803a 	cmpltu	r3,r5,r2
 1009114:	30c7c83a 	sub	r3,r6,r3
 1009118:	d9800317 	ldw	r6,12(sp)
 100911c:	1484d83a 	srl	r2,r2,r18
 1009120:	1988983a 	sll	r4,r3,r6
 1009124:	1c86d83a 	srl	r3,r3,r18
 1009128:	2088b03a 	or	r4,r4,r2
 100912c:	2011883a 	mov	r8,r4
 1009130:	1813883a 	mov	r9,r3
 1009134:	d9000415 	stw	r4,16(sp)
 1009138:	d8c00515 	stw	r3,20(sp)
 100913c:	003ed406 	br	1008c90 <__umoddi3+0x11c>
 1009140:	01400604 	movi	r5,24
 1009144:	2805883a 	mov	r2,r5
 1009148:	003ea606 	br	1008be4 <__umoddi3+0x70>
 100914c:	01400204 	movi	r5,8
 1009150:	2805883a 	mov	r2,r5
 1009154:	003ea306 	br	1008be4 <__umoddi3+0x70>
 1009158:	01400204 	movi	r5,8
 100915c:	2805883a 	mov	r2,r5
 1009160:	003edf06 	br	1008ce0 <__umoddi3+0x16c>
 1009164:	01400204 	movi	r5,8
 1009168:	2805883a 	mov	r2,r5
 100916c:	003ef206 	br	1008d38 <__umoddi3+0x1c4>
 1009170:	01400604 	movi	r5,24
 1009174:	2805883a 	mov	r2,r5
 1009178:	003eef06 	br	1008d38 <__umoddi3+0x1c4>
 100917c:	01400604 	movi	r5,24
 1009180:	2805883a 	mov	r2,r5
 1009184:	003ed606 	br	1008ce0 <__umoddi3+0x16c>
 1009188:	153fa92e 	bgeu	r2,r20,1009030 <__umoddi3+0x4bc>
 100918c:	843fffc4 	addi	r16,r16,-1
 1009190:	1585883a 	add	r2,r2,r22
 1009194:	003fa606 	br	1009030 <__umoddi3+0x4bc>
 1009198:	157f912e 	bgeu	r2,r21,1008fe0 <__umoddi3+0x46c>
 100919c:	e73fffc4 	addi	fp,fp,-1
 10091a0:	1585883a 	add	r2,r2,r22
 10091a4:	003f8e06 	br	1008fe0 <__umoddi3+0x46c>
 10091a8:	157f542e 	bgeu	r2,r21,1008efc <__umoddi3+0x388>
 10091ac:	14c5883a 	add	r2,r2,r19
 10091b0:	003f5206 	br	1008efc <__umoddi3+0x388>
 10091b4:	14c5883a 	add	r2,r2,r19
 10091b8:	003efc06 	br	1008dac <__umoddi3+0x238>
 10091bc:	14c5883a 	add	r2,r2,r19
 10091c0:	003ea606 	br	1008c5c <__umoddi3+0xe8>
 10091c4:	d8800117 	ldw	r2,4(sp)
 10091c8:	113fc836 	bltu	r2,r4,10090ec <__umoddi3+0x578>
 10091cc:	000d883a 	mov	r6,zero
 10091d0:	003fcd06 	br	1009108 <__umoddi3+0x594>

010091d4 <_fpadd_parts>:
 10091d4:	defff804 	addi	sp,sp,-32
 10091d8:	dcc00315 	stw	r19,12(sp)
 10091dc:	2027883a 	mov	r19,r4
 10091e0:	21000017 	ldw	r4,0(r4)
 10091e4:	00c00044 	movi	r3,1
 10091e8:	dd400515 	stw	r21,20(sp)
 10091ec:	dd000415 	stw	r20,16(sp)
 10091f0:	ddc00715 	stw	r23,28(sp)
 10091f4:	dd800615 	stw	r22,24(sp)
 10091f8:	dc800215 	stw	r18,8(sp)
 10091fc:	dc400115 	stw	r17,4(sp)
 1009200:	dc000015 	stw	r16,0(sp)
 1009204:	282b883a 	mov	r21,r5
 1009208:	3029883a 	mov	r20,r6
 100920c:	1900632e 	bgeu	r3,r4,100939c <_fpadd_parts+0x1c8>
 1009210:	28800017 	ldw	r2,0(r5)
 1009214:	1880812e 	bgeu	r3,r2,100941c <_fpadd_parts+0x248>
 1009218:	00c00104 	movi	r3,4
 100921c:	20c0dc26 	beq	r4,r3,1009590 <_fpadd_parts+0x3bc>
 1009220:	10c07e26 	beq	r2,r3,100941c <_fpadd_parts+0x248>
 1009224:	00c00084 	movi	r3,2
 1009228:	10c06726 	beq	r2,r3,10093c8 <_fpadd_parts+0x1f4>
 100922c:	20c07b26 	beq	r4,r3,100941c <_fpadd_parts+0x248>
 1009230:	9dc00217 	ldw	r23,8(r19)
 1009234:	28c00217 	ldw	r3,8(r5)
 1009238:	9c400317 	ldw	r17,12(r19)
 100923c:	2bc00317 	ldw	r15,12(r5)
 1009240:	b8cdc83a 	sub	r6,r23,r3
 1009244:	9c800417 	ldw	r18,16(r19)
 1009248:	2c000417 	ldw	r16,16(r5)
 100924c:	3009883a 	mov	r4,r6
 1009250:	30009716 	blt	r6,zero,10094b0 <_fpadd_parts+0x2dc>
 1009254:	00800fc4 	movi	r2,63
 1009258:	11806b16 	blt	r2,r6,1009408 <_fpadd_parts+0x234>
 100925c:	0100a40e 	bge	zero,r4,10094f0 <_fpadd_parts+0x31c>
 1009260:	35bff804 	addi	r22,r6,-32
 1009264:	b000bc16 	blt	r22,zero,1009558 <_fpadd_parts+0x384>
 1009268:	8596d83a 	srl	r11,r16,r22
 100926c:	0019883a 	mov	r12,zero
 1009270:	0013883a 	mov	r9,zero
 1009274:	01000044 	movi	r4,1
 1009278:	0015883a 	mov	r10,zero
 100927c:	b000be16 	blt	r22,zero,1009578 <_fpadd_parts+0x3a4>
 1009280:	2590983a 	sll	r8,r4,r22
 1009284:	000f883a 	mov	r7,zero
 1009288:	00bfffc4 	movi	r2,-1
 100928c:	3889883a 	add	r4,r7,r2
 1009290:	408b883a 	add	r5,r8,r2
 1009294:	21cd803a 	cmpltu	r6,r4,r7
 1009298:	314b883a 	add	r5,r6,r5
 100929c:	7904703a 	and	r2,r15,r4
 10092a0:	8146703a 	and	r3,r16,r5
 10092a4:	10c4b03a 	or	r2,r2,r3
 10092a8:	10000226 	beq	r2,zero,10092b4 <_fpadd_parts+0xe0>
 10092ac:	02400044 	movi	r9,1
 10092b0:	0015883a 	mov	r10,zero
 10092b4:	5a5eb03a 	or	r15,r11,r9
 10092b8:	62a0b03a 	or	r16,r12,r10
 10092bc:	99400117 	ldw	r5,4(r19)
 10092c0:	a8800117 	ldw	r2,4(r21)
 10092c4:	28806e26 	beq	r5,r2,1009480 <_fpadd_parts+0x2ac>
 10092c8:	28006626 	beq	r5,zero,1009464 <_fpadd_parts+0x290>
 10092cc:	7c45c83a 	sub	r2,r15,r17
 10092d0:	7889803a 	cmpltu	r4,r15,r2
 10092d4:	8487c83a 	sub	r3,r16,r18
 10092d8:	1909c83a 	sub	r4,r3,r4
 10092dc:	100d883a 	mov	r6,r2
 10092e0:	200f883a 	mov	r7,r4
 10092e4:	38007716 	blt	r7,zero,10094c4 <_fpadd_parts+0x2f0>
 10092e8:	a5c00215 	stw	r23,8(r20)
 10092ec:	a1c00415 	stw	r7,16(r20)
 10092f0:	a0000115 	stw	zero,4(r20)
 10092f4:	a1800315 	stw	r6,12(r20)
 10092f8:	a2000317 	ldw	r8,12(r20)
 10092fc:	a2400417 	ldw	r9,16(r20)
 1009300:	00bfffc4 	movi	r2,-1
 1009304:	408b883a 	add	r5,r8,r2
 1009308:	2a09803a 	cmpltu	r4,r5,r8
 100930c:	488d883a 	add	r6,r9,r2
 1009310:	01c40034 	movhi	r7,4096
 1009314:	39ffffc4 	addi	r7,r7,-1
 1009318:	218d883a 	add	r6,r4,r6
 100931c:	39801736 	bltu	r7,r6,100937c <_fpadd_parts+0x1a8>
 1009320:	31c06526 	beq	r6,r7,10094b8 <_fpadd_parts+0x2e4>
 1009324:	a3000217 	ldw	r12,8(r20)
 1009328:	4209883a 	add	r4,r8,r8
 100932c:	00bfffc4 	movi	r2,-1
 1009330:	220f803a 	cmpltu	r7,r4,r8
 1009334:	4a4b883a 	add	r5,r9,r9
 1009338:	394f883a 	add	r7,r7,r5
 100933c:	2095883a 	add	r10,r4,r2
 1009340:	3897883a 	add	r11,r7,r2
 1009344:	510d803a 	cmpltu	r6,r10,r4
 1009348:	6099883a 	add	r12,r12,r2
 100934c:	32d7883a 	add	r11,r6,r11
 1009350:	00840034 	movhi	r2,4096
 1009354:	10bfffc4 	addi	r2,r2,-1
 1009358:	2011883a 	mov	r8,r4
 100935c:	3813883a 	mov	r9,r7
 1009360:	a1000315 	stw	r4,12(r20)
 1009364:	a1c00415 	stw	r7,16(r20)
 1009368:	a3000215 	stw	r12,8(r20)
 100936c:	12c00336 	bltu	r2,r11,100937c <_fpadd_parts+0x1a8>
 1009370:	58bfed1e 	bne	r11,r2,1009328 <_fpadd_parts+0x154>
 1009374:	00bfff84 	movi	r2,-2
 1009378:	12bfeb2e 	bgeu	r2,r10,1009328 <_fpadd_parts+0x154>
 100937c:	a2800417 	ldw	r10,16(r20)
 1009380:	008000c4 	movi	r2,3
 1009384:	00c80034 	movhi	r3,8192
 1009388:	18ffffc4 	addi	r3,r3,-1
 100938c:	a2400317 	ldw	r9,12(r20)
 1009390:	a0800015 	stw	r2,0(r20)
 1009394:	1a802336 	bltu	r3,r10,1009424 <_fpadd_parts+0x250>
 1009398:	a027883a 	mov	r19,r20
 100939c:	9805883a 	mov	r2,r19
 10093a0:	ddc00717 	ldw	r23,28(sp)
 10093a4:	dd800617 	ldw	r22,24(sp)
 10093a8:	dd400517 	ldw	r21,20(sp)
 10093ac:	dd000417 	ldw	r20,16(sp)
 10093b0:	dcc00317 	ldw	r19,12(sp)
 10093b4:	dc800217 	ldw	r18,8(sp)
 10093b8:	dc400117 	ldw	r17,4(sp)
 10093bc:	dc000017 	ldw	r16,0(sp)
 10093c0:	dec00804 	addi	sp,sp,32
 10093c4:	f800283a 	ret
 10093c8:	20fff41e 	bne	r4,r3,100939c <_fpadd_parts+0x1c8>
 10093cc:	31000015 	stw	r4,0(r6)
 10093d0:	98800117 	ldw	r2,4(r19)
 10093d4:	30800115 	stw	r2,4(r6)
 10093d8:	98c00217 	ldw	r3,8(r19)
 10093dc:	30c00215 	stw	r3,8(r6)
 10093e0:	98800317 	ldw	r2,12(r19)
 10093e4:	30800315 	stw	r2,12(r6)
 10093e8:	98c00417 	ldw	r3,16(r19)
 10093ec:	30c00415 	stw	r3,16(r6)
 10093f0:	98800117 	ldw	r2,4(r19)
 10093f4:	28c00117 	ldw	r3,4(r5)
 10093f8:	3027883a 	mov	r19,r6
 10093fc:	10c4703a 	and	r2,r2,r3
 1009400:	30800115 	stw	r2,4(r6)
 1009404:	003fe506 	br	100939c <_fpadd_parts+0x1c8>
 1009408:	1dc02616 	blt	r3,r23,10094a4 <_fpadd_parts+0x2d0>
 100940c:	0023883a 	mov	r17,zero
 1009410:	182f883a 	mov	r23,r3
 1009414:	0025883a 	mov	r18,zero
 1009418:	003fa806 	br	10092bc <_fpadd_parts+0xe8>
 100941c:	a827883a 	mov	r19,r21
 1009420:	003fde06 	br	100939c <_fpadd_parts+0x1c8>
 1009424:	01800044 	movi	r6,1
 1009428:	500497fa 	slli	r2,r10,31
 100942c:	4808d07a 	srli	r4,r9,1
 1009430:	518ad83a 	srl	r5,r10,r6
 1009434:	a2000217 	ldw	r8,8(r20)
 1009438:	1108b03a 	or	r4,r2,r4
 100943c:	0007883a 	mov	r3,zero
 1009440:	4984703a 	and	r2,r9,r6
 1009444:	208cb03a 	or	r6,r4,r2
 1009448:	28ceb03a 	or	r7,r5,r3
 100944c:	42000044 	addi	r8,r8,1
 1009450:	a027883a 	mov	r19,r20
 1009454:	a1c00415 	stw	r7,16(r20)
 1009458:	a2000215 	stw	r8,8(r20)
 100945c:	a1800315 	stw	r6,12(r20)
 1009460:	003fce06 	br	100939c <_fpadd_parts+0x1c8>
 1009464:	8bc5c83a 	sub	r2,r17,r15
 1009468:	8889803a 	cmpltu	r4,r17,r2
 100946c:	9407c83a 	sub	r3,r18,r16
 1009470:	1909c83a 	sub	r4,r3,r4
 1009474:	100d883a 	mov	r6,r2
 1009478:	200f883a 	mov	r7,r4
 100947c:	003f9906 	br	10092e4 <_fpadd_parts+0x110>
 1009480:	7c45883a 	add	r2,r15,r17
 1009484:	13c9803a 	cmpltu	r4,r2,r15
 1009488:	8487883a 	add	r3,r16,r18
 100948c:	20c9883a 	add	r4,r4,r3
 1009490:	a1400115 	stw	r5,4(r20)
 1009494:	a5c00215 	stw	r23,8(r20)
 1009498:	a0800315 	stw	r2,12(r20)
 100949c:	a1000415 	stw	r4,16(r20)
 10094a0:	003fb606 	br	100937c <_fpadd_parts+0x1a8>
 10094a4:	001f883a 	mov	r15,zero
 10094a8:	0021883a 	mov	r16,zero
 10094ac:	003f8306 	br	10092bc <_fpadd_parts+0xe8>
 10094b0:	018dc83a 	sub	r6,zero,r6
 10094b4:	003f6706 	br	1009254 <_fpadd_parts+0x80>
 10094b8:	00bfff84 	movi	r2,-2
 10094bc:	117faf36 	bltu	r2,r5,100937c <_fpadd_parts+0x1a8>
 10094c0:	003f9806 	br	1009324 <_fpadd_parts+0x150>
 10094c4:	0005883a 	mov	r2,zero
 10094c8:	1189c83a 	sub	r4,r2,r6
 10094cc:	1105803a 	cmpltu	r2,r2,r4
 10094d0:	01cbc83a 	sub	r5,zero,r7
 10094d4:	2885c83a 	sub	r2,r5,r2
 10094d8:	01800044 	movi	r6,1
 10094dc:	a1800115 	stw	r6,4(r20)
 10094e0:	a5c00215 	stw	r23,8(r20)
 10094e4:	a1000315 	stw	r4,12(r20)
 10094e8:	a0800415 	stw	r2,16(r20)
 10094ec:	003f8206 	br	10092f8 <_fpadd_parts+0x124>
 10094f0:	203f7226 	beq	r4,zero,10092bc <_fpadd_parts+0xe8>
 10094f4:	35bff804 	addi	r22,r6,-32
 10094f8:	b9af883a 	add	r23,r23,r6
 10094fc:	b0003116 	blt	r22,zero,10095c4 <_fpadd_parts+0x3f0>
 1009500:	959ad83a 	srl	r13,r18,r22
 1009504:	001d883a 	mov	r14,zero
 1009508:	000f883a 	mov	r7,zero
 100950c:	01000044 	movi	r4,1
 1009510:	0011883a 	mov	r8,zero
 1009514:	b0002516 	blt	r22,zero,10095ac <_fpadd_parts+0x3d8>
 1009518:	2594983a 	sll	r10,r4,r22
 100951c:	0013883a 	mov	r9,zero
 1009520:	00bfffc4 	movi	r2,-1
 1009524:	4889883a 	add	r4,r9,r2
 1009528:	508b883a 	add	r5,r10,r2
 100952c:	224d803a 	cmpltu	r6,r4,r9
 1009530:	314b883a 	add	r5,r6,r5
 1009534:	8904703a 	and	r2,r17,r4
 1009538:	9146703a 	and	r3,r18,r5
 100953c:	10c4b03a 	or	r2,r2,r3
 1009540:	10000226 	beq	r2,zero,100954c <_fpadd_parts+0x378>
 1009544:	01c00044 	movi	r7,1
 1009548:	0011883a 	mov	r8,zero
 100954c:	69e2b03a 	or	r17,r13,r7
 1009550:	7224b03a 	or	r18,r14,r8
 1009554:	003f5906 	br	10092bc <_fpadd_parts+0xe8>
 1009558:	8407883a 	add	r3,r16,r16
 100955c:	008007c4 	movi	r2,31
 1009560:	1185c83a 	sub	r2,r2,r6
 1009564:	1886983a 	sll	r3,r3,r2
 1009568:	7996d83a 	srl	r11,r15,r6
 100956c:	8198d83a 	srl	r12,r16,r6
 1009570:	1ad6b03a 	or	r11,r3,r11
 1009574:	003f3e06 	br	1009270 <_fpadd_parts+0x9c>
 1009578:	2006d07a 	srli	r3,r4,1
 100957c:	008007c4 	movi	r2,31
 1009580:	1185c83a 	sub	r2,r2,r6
 1009584:	1890d83a 	srl	r8,r3,r2
 1009588:	218e983a 	sll	r7,r4,r6
 100958c:	003f3e06 	br	1009288 <_fpadd_parts+0xb4>
 1009590:	113f821e 	bne	r2,r4,100939c <_fpadd_parts+0x1c8>
 1009594:	28c00117 	ldw	r3,4(r5)
 1009598:	98800117 	ldw	r2,4(r19)
 100959c:	10ff7f26 	beq	r2,r3,100939c <_fpadd_parts+0x1c8>
 10095a0:	04c04074 	movhi	r19,257
 10095a4:	9cca5704 	addi	r19,r19,10588
 10095a8:	003f7c06 	br	100939c <_fpadd_parts+0x1c8>
 10095ac:	2006d07a 	srli	r3,r4,1
 10095b0:	008007c4 	movi	r2,31
 10095b4:	1185c83a 	sub	r2,r2,r6
 10095b8:	1894d83a 	srl	r10,r3,r2
 10095bc:	2192983a 	sll	r9,r4,r6
 10095c0:	003fd706 	br	1009520 <_fpadd_parts+0x34c>
 10095c4:	9487883a 	add	r3,r18,r18
 10095c8:	008007c4 	movi	r2,31
 10095cc:	1185c83a 	sub	r2,r2,r6
 10095d0:	1886983a 	sll	r3,r3,r2
 10095d4:	899ad83a 	srl	r13,r17,r6
 10095d8:	919cd83a 	srl	r14,r18,r6
 10095dc:	1b5ab03a 	or	r13,r3,r13
 10095e0:	003fc906 	br	1009508 <_fpadd_parts+0x334>

010095e4 <__subdf3>:
 10095e4:	deffea04 	addi	sp,sp,-88
 10095e8:	dcc01415 	stw	r19,80(sp)
 10095ec:	dcc00404 	addi	r19,sp,16
 10095f0:	2011883a 	mov	r8,r4
 10095f4:	2813883a 	mov	r9,r5
 10095f8:	dc401315 	stw	r17,76(sp)
 10095fc:	d809883a 	mov	r4,sp
 1009600:	980b883a 	mov	r5,r19
 1009604:	dc400904 	addi	r17,sp,36
 1009608:	dfc01515 	stw	ra,84(sp)
 100960c:	da400115 	stw	r9,4(sp)
 1009610:	d9c00315 	stw	r7,12(sp)
 1009614:	da000015 	stw	r8,0(sp)
 1009618:	d9800215 	stw	r6,8(sp)
 100961c:	100a5700 	call	100a570 <__unpack_d>
 1009620:	d9000204 	addi	r4,sp,8
 1009624:	880b883a 	mov	r5,r17
 1009628:	100a5700 	call	100a570 <__unpack_d>
 100962c:	d8800a17 	ldw	r2,40(sp)
 1009630:	880b883a 	mov	r5,r17
 1009634:	9809883a 	mov	r4,r19
 1009638:	d9800e04 	addi	r6,sp,56
 100963c:	1080005c 	xori	r2,r2,1
 1009640:	d8800a15 	stw	r2,40(sp)
 1009644:	10091d40 	call	10091d4 <_fpadd_parts>
 1009648:	1009883a 	mov	r4,r2
 100964c:	1000dbc0 	call	1000dbc <__pack_d>
 1009650:	dfc01517 	ldw	ra,84(sp)
 1009654:	dcc01417 	ldw	r19,80(sp)
 1009658:	dc401317 	ldw	r17,76(sp)
 100965c:	dec01604 	addi	sp,sp,88
 1009660:	f800283a 	ret

01009664 <__adddf3>:
 1009664:	deffea04 	addi	sp,sp,-88
 1009668:	dcc01415 	stw	r19,80(sp)
 100966c:	dcc00404 	addi	r19,sp,16
 1009670:	2011883a 	mov	r8,r4
 1009674:	2813883a 	mov	r9,r5
 1009678:	dc401315 	stw	r17,76(sp)
 100967c:	d809883a 	mov	r4,sp
 1009680:	980b883a 	mov	r5,r19
 1009684:	dc400904 	addi	r17,sp,36
 1009688:	dfc01515 	stw	ra,84(sp)
 100968c:	da400115 	stw	r9,4(sp)
 1009690:	d9c00315 	stw	r7,12(sp)
 1009694:	da000015 	stw	r8,0(sp)
 1009698:	d9800215 	stw	r6,8(sp)
 100969c:	100a5700 	call	100a570 <__unpack_d>
 10096a0:	d9000204 	addi	r4,sp,8
 10096a4:	880b883a 	mov	r5,r17
 10096a8:	100a5700 	call	100a570 <__unpack_d>
 10096ac:	d9800e04 	addi	r6,sp,56
 10096b0:	9809883a 	mov	r4,r19
 10096b4:	880b883a 	mov	r5,r17
 10096b8:	10091d40 	call	10091d4 <_fpadd_parts>
 10096bc:	1009883a 	mov	r4,r2
 10096c0:	1000dbc0 	call	1000dbc <__pack_d>
 10096c4:	dfc01517 	ldw	ra,84(sp)
 10096c8:	dcc01417 	ldw	r19,80(sp)
 10096cc:	dc401317 	ldw	r17,76(sp)
 10096d0:	dec01604 	addi	sp,sp,88
 10096d4:	f800283a 	ret

010096d8 <__muldf3>:
 10096d8:	deffe004 	addi	sp,sp,-128
 10096dc:	dc401815 	stw	r17,96(sp)
 10096e0:	dc400404 	addi	r17,sp,16
 10096e4:	2011883a 	mov	r8,r4
 10096e8:	2813883a 	mov	r9,r5
 10096ec:	dc001715 	stw	r16,92(sp)
 10096f0:	d809883a 	mov	r4,sp
 10096f4:	880b883a 	mov	r5,r17
 10096f8:	dc000904 	addi	r16,sp,36
 10096fc:	dfc01f15 	stw	ra,124(sp)
 1009700:	da400115 	stw	r9,4(sp)
 1009704:	d9c00315 	stw	r7,12(sp)
 1009708:	da000015 	stw	r8,0(sp)
 100970c:	d9800215 	stw	r6,8(sp)
 1009710:	ddc01e15 	stw	r23,120(sp)
 1009714:	dd801d15 	stw	r22,116(sp)
 1009718:	dd401c15 	stw	r21,112(sp)
 100971c:	dd001b15 	stw	r20,108(sp)
 1009720:	dcc01a15 	stw	r19,104(sp)
 1009724:	dc801915 	stw	r18,100(sp)
 1009728:	100a5700 	call	100a570 <__unpack_d>
 100972c:	d9000204 	addi	r4,sp,8
 1009730:	800b883a 	mov	r5,r16
 1009734:	100a5700 	call	100a570 <__unpack_d>
 1009738:	d9000417 	ldw	r4,16(sp)
 100973c:	00800044 	movi	r2,1
 1009740:	1100102e 	bgeu	r2,r4,1009784 <__muldf3+0xac>
 1009744:	d8c00917 	ldw	r3,36(sp)
 1009748:	10c0062e 	bgeu	r2,r3,1009764 <__muldf3+0x8c>
 100974c:	00800104 	movi	r2,4
 1009750:	20800a26 	beq	r4,r2,100977c <__muldf3+0xa4>
 1009754:	1880cc26 	beq	r3,r2,1009a88 <__muldf3+0x3b0>
 1009758:	00800084 	movi	r2,2
 100975c:	20800926 	beq	r4,r2,1009784 <__muldf3+0xac>
 1009760:	1880191e 	bne	r3,r2,10097c8 <__muldf3+0xf0>
 1009764:	d8c00a17 	ldw	r3,40(sp)
 1009768:	d8800517 	ldw	r2,20(sp)
 100976c:	8009883a 	mov	r4,r16
 1009770:	10c4c03a 	cmpne	r2,r2,r3
 1009774:	d8800a15 	stw	r2,40(sp)
 1009778:	00000706 	br	1009798 <__muldf3+0xc0>
 100977c:	00800084 	movi	r2,2
 1009780:	1880c326 	beq	r3,r2,1009a90 <__muldf3+0x3b8>
 1009784:	d8800517 	ldw	r2,20(sp)
 1009788:	d8c00a17 	ldw	r3,40(sp)
 100978c:	8809883a 	mov	r4,r17
 1009790:	10c4c03a 	cmpne	r2,r2,r3
 1009794:	d8800515 	stw	r2,20(sp)
 1009798:	1000dbc0 	call	1000dbc <__pack_d>
 100979c:	dfc01f17 	ldw	ra,124(sp)
 10097a0:	ddc01e17 	ldw	r23,120(sp)
 10097a4:	dd801d17 	ldw	r22,116(sp)
 10097a8:	dd401c17 	ldw	r21,112(sp)
 10097ac:	dd001b17 	ldw	r20,108(sp)
 10097b0:	dcc01a17 	ldw	r19,104(sp)
 10097b4:	dc801917 	ldw	r18,100(sp)
 10097b8:	dc401817 	ldw	r17,96(sp)
 10097bc:	dc001717 	ldw	r16,92(sp)
 10097c0:	dec02004 	addi	sp,sp,128
 10097c4:	f800283a 	ret
 10097c8:	dd800717 	ldw	r22,28(sp)
 10097cc:	dc800c17 	ldw	r18,48(sp)
 10097d0:	002b883a 	mov	r21,zero
 10097d4:	0023883a 	mov	r17,zero
 10097d8:	a80b883a 	mov	r5,r21
 10097dc:	b00d883a 	mov	r6,r22
 10097e0:	880f883a 	mov	r7,r17
 10097e4:	ddc00817 	ldw	r23,32(sp)
 10097e8:	dcc00d17 	ldw	r19,52(sp)
 10097ec:	9009883a 	mov	r4,r18
 10097f0:	100a44c0 	call	100a44c <__muldi3>
 10097f4:	001b883a 	mov	r13,zero
 10097f8:	680f883a 	mov	r7,r13
 10097fc:	b009883a 	mov	r4,r22
 1009800:	000b883a 	mov	r5,zero
 1009804:	980d883a 	mov	r6,r19
 1009808:	b82d883a 	mov	r22,r23
 100980c:	002f883a 	mov	r23,zero
 1009810:	db401615 	stw	r13,88(sp)
 1009814:	d8801315 	stw	r2,76(sp)
 1009818:	d8c01415 	stw	r3,80(sp)
 100981c:	dcc01515 	stw	r19,84(sp)
 1009820:	100a44c0 	call	100a44c <__muldi3>
 1009824:	b00d883a 	mov	r6,r22
 1009828:	000b883a 	mov	r5,zero
 100982c:	9009883a 	mov	r4,r18
 1009830:	b80f883a 	mov	r7,r23
 1009834:	1021883a 	mov	r16,r2
 1009838:	1823883a 	mov	r17,r3
 100983c:	100a44c0 	call	100a44c <__muldi3>
 1009840:	8085883a 	add	r2,r16,r2
 1009844:	140d803a 	cmpltu	r6,r2,r16
 1009848:	88c7883a 	add	r3,r17,r3
 100984c:	30cd883a 	add	r6,r6,r3
 1009850:	1029883a 	mov	r20,r2
 1009854:	302b883a 	mov	r21,r6
 1009858:	da801317 	ldw	r10,76(sp)
 100985c:	dac01417 	ldw	r11,80(sp)
 1009860:	db001517 	ldw	r12,84(sp)
 1009864:	db401617 	ldw	r13,88(sp)
 1009868:	3440612e 	bgeu	r6,r17,10099f0 <__muldf3+0x318>
 100986c:	0009883a 	mov	r4,zero
 1009870:	5105883a 	add	r2,r10,r4
 1009874:	128d803a 	cmpltu	r6,r2,r10
 1009878:	5d07883a 	add	r3,r11,r20
 100987c:	30cd883a 	add	r6,r6,r3
 1009880:	0021883a 	mov	r16,zero
 1009884:	04400044 	movi	r17,1
 1009888:	1025883a 	mov	r18,r2
 100988c:	3027883a 	mov	r19,r6
 1009890:	32c06236 	bltu	r6,r11,1009a1c <__muldf3+0x344>
 1009894:	59807a26 	beq	r11,r6,1009a80 <__muldf3+0x3a8>
 1009898:	680b883a 	mov	r5,r13
 100989c:	b80f883a 	mov	r7,r23
 10098a0:	6009883a 	mov	r4,r12
 10098a4:	b00d883a 	mov	r6,r22
 10098a8:	100a44c0 	call	100a44c <__muldi3>
 10098ac:	1009883a 	mov	r4,r2
 10098b0:	000f883a 	mov	r7,zero
 10098b4:	1545883a 	add	r2,r2,r21
 10098b8:	1111803a 	cmpltu	r8,r2,r4
 10098bc:	19c7883a 	add	r3,r3,r7
 10098c0:	40c7883a 	add	r3,r8,r3
 10098c4:	88cb883a 	add	r5,r17,r3
 10098c8:	d8c00617 	ldw	r3,24(sp)
 10098cc:	8089883a 	add	r4,r16,r2
 10098d0:	d8800b17 	ldw	r2,44(sp)
 10098d4:	18c00104 	addi	r3,r3,4
 10098d8:	240d803a 	cmpltu	r6,r4,r16
 10098dc:	10c7883a 	add	r3,r2,r3
 10098e0:	2013883a 	mov	r9,r4
 10098e4:	d8800a17 	ldw	r2,40(sp)
 10098e8:	d9000517 	ldw	r4,20(sp)
 10098ec:	314d883a 	add	r6,r6,r5
 10098f0:	3015883a 	mov	r10,r6
 10098f4:	2088c03a 	cmpne	r4,r4,r2
 10098f8:	00880034 	movhi	r2,8192
 10098fc:	10bfffc4 	addi	r2,r2,-1
 1009900:	d9000f15 	stw	r4,60(sp)
 1009904:	d8c01015 	stw	r3,64(sp)
 1009908:	1180162e 	bgeu	r2,r6,1009964 <__muldf3+0x28c>
 100990c:	1811883a 	mov	r8,r3
 1009910:	101f883a 	mov	r15,r2
 1009914:	980497fa 	slli	r2,r19,31
 1009918:	9016d07a 	srli	r11,r18,1
 100991c:	500697fa 	slli	r3,r10,31
 1009920:	480cd07a 	srli	r6,r9,1
 1009924:	500ed07a 	srli	r7,r10,1
 1009928:	12d6b03a 	or	r11,r2,r11
 100992c:	00800044 	movi	r2,1
 1009930:	198cb03a 	or	r6,r3,r6
 1009934:	4888703a 	and	r4,r9,r2
 1009938:	9818d07a 	srli	r12,r19,1
 100993c:	001b883a 	mov	r13,zero
 1009940:	03a00034 	movhi	r14,32768
 1009944:	3013883a 	mov	r9,r6
 1009948:	3815883a 	mov	r10,r7
 100994c:	4091883a 	add	r8,r8,r2
 1009950:	20000226 	beq	r4,zero,100995c <__muldf3+0x284>
 1009954:	5b64b03a 	or	r18,r11,r13
 1009958:	63a6b03a 	or	r19,r12,r14
 100995c:	7abfed36 	bltu	r15,r10,1009914 <__muldf3+0x23c>
 1009960:	da001015 	stw	r8,64(sp)
 1009964:	00840034 	movhi	r2,4096
 1009968:	10bfffc4 	addi	r2,r2,-1
 100996c:	12801436 	bltu	r2,r10,10099c0 <__muldf3+0x2e8>
 1009970:	da001017 	ldw	r8,64(sp)
 1009974:	101f883a 	mov	r15,r2
 1009978:	4a45883a 	add	r2,r9,r9
 100997c:	124d803a 	cmpltu	r6,r2,r9
 1009980:	5287883a 	add	r3,r10,r10
 1009984:	9497883a 	add	r11,r18,r18
 1009988:	5c8f803a 	cmpltu	r7,r11,r18
 100998c:	9cd9883a 	add	r12,r19,r19
 1009990:	01000044 	movi	r4,1
 1009994:	30cd883a 	add	r6,r6,r3
 1009998:	3b0f883a 	add	r7,r7,r12
 100999c:	423fffc4 	addi	r8,r8,-1
 10099a0:	1013883a 	mov	r9,r2
 10099a4:	3015883a 	mov	r10,r6
 10099a8:	111ab03a 	or	r13,r2,r4
 10099ac:	98003016 	blt	r19,zero,1009a70 <__muldf3+0x398>
 10099b0:	5825883a 	mov	r18,r11
 10099b4:	3827883a 	mov	r19,r7
 10099b8:	7abfef2e 	bgeu	r15,r10,1009978 <__muldf3+0x2a0>
 10099bc:	da001015 	stw	r8,64(sp)
 10099c0:	00803fc4 	movi	r2,255
 10099c4:	488e703a 	and	r7,r9,r2
 10099c8:	00802004 	movi	r2,128
 10099cc:	0007883a 	mov	r3,zero
 10099d0:	0011883a 	mov	r8,zero
 10099d4:	38801826 	beq	r7,r2,1009a38 <__muldf3+0x360>
 10099d8:	008000c4 	movi	r2,3
 10099dc:	d9000e04 	addi	r4,sp,56
 10099e0:	da801215 	stw	r10,72(sp)
 10099e4:	d8800e15 	stw	r2,56(sp)
 10099e8:	da401115 	stw	r9,68(sp)
 10099ec:	003f6a06 	br	1009798 <__muldf3+0xc0>
 10099f0:	89802126 	beq	r17,r6,1009a78 <__muldf3+0x3a0>
 10099f4:	0009883a 	mov	r4,zero
 10099f8:	5105883a 	add	r2,r10,r4
 10099fc:	128d803a 	cmpltu	r6,r2,r10
 1009a00:	5d07883a 	add	r3,r11,r20
 1009a04:	30cd883a 	add	r6,r6,r3
 1009a08:	0021883a 	mov	r16,zero
 1009a0c:	0023883a 	mov	r17,zero
 1009a10:	1025883a 	mov	r18,r2
 1009a14:	3027883a 	mov	r19,r6
 1009a18:	32ff9e2e 	bgeu	r6,r11,1009894 <__muldf3+0x1bc>
 1009a1c:	00800044 	movi	r2,1
 1009a20:	8089883a 	add	r4,r16,r2
 1009a24:	240d803a 	cmpltu	r6,r4,r16
 1009a28:	344d883a 	add	r6,r6,r17
 1009a2c:	2021883a 	mov	r16,r4
 1009a30:	3023883a 	mov	r17,r6
 1009a34:	003f9806 	br	1009898 <__muldf3+0x1c0>
 1009a38:	403fe71e 	bne	r8,zero,10099d8 <__muldf3+0x300>
 1009a3c:	01004004 	movi	r4,256
 1009a40:	4904703a 	and	r2,r9,r4
 1009a44:	10c4b03a 	or	r2,r2,r3
 1009a48:	103fe31e 	bne	r2,zero,10099d8 <__muldf3+0x300>
 1009a4c:	94c4b03a 	or	r2,r18,r19
 1009a50:	103fe126 	beq	r2,zero,10099d8 <__muldf3+0x300>
 1009a54:	49c5883a 	add	r2,r9,r7
 1009a58:	1251803a 	cmpltu	r8,r2,r9
 1009a5c:	4291883a 	add	r8,r8,r10
 1009a60:	013fc004 	movi	r4,-256
 1009a64:	1112703a 	and	r9,r2,r4
 1009a68:	4015883a 	mov	r10,r8
 1009a6c:	003fda06 	br	10099d8 <__muldf3+0x300>
 1009a70:	6813883a 	mov	r9,r13
 1009a74:	003fce06 	br	10099b0 <__muldf3+0x2d8>
 1009a78:	143f7c36 	bltu	r2,r16,100986c <__muldf3+0x194>
 1009a7c:	003fdd06 	br	10099f4 <__muldf3+0x31c>
 1009a80:	12bf852e 	bgeu	r2,r10,1009898 <__muldf3+0x1c0>
 1009a84:	003fe506 	br	1009a1c <__muldf3+0x344>
 1009a88:	00800084 	movi	r2,2
 1009a8c:	20bf351e 	bne	r4,r2,1009764 <__muldf3+0x8c>
 1009a90:	01004074 	movhi	r4,257
 1009a94:	210a5704 	addi	r4,r4,10588
 1009a98:	003f3f06 	br	1009798 <__muldf3+0xc0>

01009a9c <__divdf3>:
 1009a9c:	deffed04 	addi	sp,sp,-76
 1009aa0:	dcc01115 	stw	r19,68(sp)
 1009aa4:	dcc00404 	addi	r19,sp,16
 1009aa8:	2011883a 	mov	r8,r4
 1009aac:	2813883a 	mov	r9,r5
 1009ab0:	dc000e15 	stw	r16,56(sp)
 1009ab4:	d809883a 	mov	r4,sp
 1009ab8:	980b883a 	mov	r5,r19
 1009abc:	dc000904 	addi	r16,sp,36
 1009ac0:	dfc01215 	stw	ra,72(sp)
 1009ac4:	da400115 	stw	r9,4(sp)
 1009ac8:	d9c00315 	stw	r7,12(sp)
 1009acc:	da000015 	stw	r8,0(sp)
 1009ad0:	d9800215 	stw	r6,8(sp)
 1009ad4:	dc801015 	stw	r18,64(sp)
 1009ad8:	dc400f15 	stw	r17,60(sp)
 1009adc:	100a5700 	call	100a570 <__unpack_d>
 1009ae0:	d9000204 	addi	r4,sp,8
 1009ae4:	800b883a 	mov	r5,r16
 1009ae8:	100a5700 	call	100a570 <__unpack_d>
 1009aec:	d9000417 	ldw	r4,16(sp)
 1009af0:	00800044 	movi	r2,1
 1009af4:	11000b2e 	bgeu	r2,r4,1009b24 <__divdf3+0x88>
 1009af8:	d9400917 	ldw	r5,36(sp)
 1009afc:	1140762e 	bgeu	r2,r5,1009cd8 <__divdf3+0x23c>
 1009b00:	d8800517 	ldw	r2,20(sp)
 1009b04:	d8c00a17 	ldw	r3,40(sp)
 1009b08:	01800104 	movi	r6,4
 1009b0c:	10c4f03a 	xor	r2,r2,r3
 1009b10:	d8800515 	stw	r2,20(sp)
 1009b14:	21800226 	beq	r4,r6,1009b20 <__divdf3+0x84>
 1009b18:	00800084 	movi	r2,2
 1009b1c:	2080141e 	bne	r4,r2,1009b70 <__divdf3+0xd4>
 1009b20:	29000926 	beq	r5,r4,1009b48 <__divdf3+0xac>
 1009b24:	9809883a 	mov	r4,r19
 1009b28:	1000dbc0 	call	1000dbc <__pack_d>
 1009b2c:	dfc01217 	ldw	ra,72(sp)
 1009b30:	dcc01117 	ldw	r19,68(sp)
 1009b34:	dc801017 	ldw	r18,64(sp)
 1009b38:	dc400f17 	ldw	r17,60(sp)
 1009b3c:	dc000e17 	ldw	r16,56(sp)
 1009b40:	dec01304 	addi	sp,sp,76
 1009b44:	f800283a 	ret
 1009b48:	01004074 	movhi	r4,257
 1009b4c:	210a5704 	addi	r4,r4,10588
 1009b50:	1000dbc0 	call	1000dbc <__pack_d>
 1009b54:	dfc01217 	ldw	ra,72(sp)
 1009b58:	dcc01117 	ldw	r19,68(sp)
 1009b5c:	dc801017 	ldw	r18,64(sp)
 1009b60:	dc400f17 	ldw	r17,60(sp)
 1009b64:	dc000e17 	ldw	r16,56(sp)
 1009b68:	dec01304 	addi	sp,sp,76
 1009b6c:	f800283a 	ret
 1009b70:	29805b26 	beq	r5,r6,1009ce0 <__divdf3+0x244>
 1009b74:	28802d26 	beq	r5,r2,1009c2c <__divdf3+0x190>
 1009b78:	d8c00617 	ldw	r3,24(sp)
 1009b7c:	d8800b17 	ldw	r2,44(sp)
 1009b80:	d9c00817 	ldw	r7,32(sp)
 1009b84:	dc400d17 	ldw	r17,52(sp)
 1009b88:	188bc83a 	sub	r5,r3,r2
 1009b8c:	d9800717 	ldw	r6,28(sp)
 1009b90:	dc000c17 	ldw	r16,48(sp)
 1009b94:	d9400615 	stw	r5,24(sp)
 1009b98:	3c403836 	bltu	r7,r17,1009c7c <__divdf3+0x1e0>
 1009b9c:	89c03626 	beq	r17,r7,1009c78 <__divdf3+0x1dc>
 1009ba0:	0015883a 	mov	r10,zero
 1009ba4:	001d883a 	mov	r14,zero
 1009ba8:	02c40034 	movhi	r11,4096
 1009bac:	001f883a 	mov	r15,zero
 1009bb0:	003f883a 	mov	ra,zero
 1009bb4:	04800f44 	movi	r18,61
 1009bb8:	00000f06 	br	1009bf8 <__divdf3+0x15c>
 1009bbc:	601d883a 	mov	r14,r12
 1009bc0:	681f883a 	mov	r15,r13
 1009bc4:	400d883a 	mov	r6,r8
 1009bc8:	100f883a 	mov	r7,r2
 1009bcc:	3191883a 	add	r8,r6,r6
 1009bd0:	5808d07a 	srli	r4,r11,1
 1009bd4:	4185803a 	cmpltu	r2,r8,r6
 1009bd8:	39d3883a 	add	r9,r7,r7
 1009bdc:	28c6b03a 	or	r3,r5,r3
 1009be0:	1245883a 	add	r2,r2,r9
 1009be4:	1815883a 	mov	r10,r3
 1009be8:	2017883a 	mov	r11,r4
 1009bec:	400d883a 	mov	r6,r8
 1009bf0:	100f883a 	mov	r7,r2
 1009bf4:	fc801726 	beq	ra,r18,1009c54 <__divdf3+0x1b8>
 1009bf8:	580a97fa 	slli	r5,r11,31
 1009bfc:	5006d07a 	srli	r3,r10,1
 1009c00:	ffc00044 	addi	ra,ra,1
 1009c04:	3c7ff136 	bltu	r7,r17,1009bcc <__divdf3+0x130>
 1009c08:	3411c83a 	sub	r8,r6,r16
 1009c0c:	3205803a 	cmpltu	r2,r6,r8
 1009c10:	3c53c83a 	sub	r9,r7,r17
 1009c14:	7298b03a 	or	r12,r14,r10
 1009c18:	7adab03a 	or	r13,r15,r11
 1009c1c:	4885c83a 	sub	r2,r9,r2
 1009c20:	89ffe61e 	bne	r17,r7,1009bbc <__divdf3+0x120>
 1009c24:	343fe936 	bltu	r6,r16,1009bcc <__divdf3+0x130>
 1009c28:	003fe406 	br	1009bbc <__divdf3+0x120>
 1009c2c:	9809883a 	mov	r4,r19
 1009c30:	d9800415 	stw	r6,16(sp)
 1009c34:	1000dbc0 	call	1000dbc <__pack_d>
 1009c38:	dfc01217 	ldw	ra,72(sp)
 1009c3c:	dcc01117 	ldw	r19,68(sp)
 1009c40:	dc801017 	ldw	r18,64(sp)
 1009c44:	dc400f17 	ldw	r17,60(sp)
 1009c48:	dc000e17 	ldw	r16,56(sp)
 1009c4c:	dec01304 	addi	sp,sp,76
 1009c50:	f800283a 	ret
 1009c54:	00803fc4 	movi	r2,255
 1009c58:	7090703a 	and	r8,r14,r2
 1009c5c:	00802004 	movi	r2,128
 1009c60:	0007883a 	mov	r3,zero
 1009c64:	0013883a 	mov	r9,zero
 1009c68:	40800d26 	beq	r8,r2,1009ca0 <__divdf3+0x204>
 1009c6c:	dbc00815 	stw	r15,32(sp)
 1009c70:	db800715 	stw	r14,28(sp)
 1009c74:	003fab06 	br	1009b24 <__divdf3+0x88>
 1009c78:	343fc92e 	bgeu	r6,r16,1009ba0 <__divdf3+0x104>
 1009c7c:	3185883a 	add	r2,r6,r6
 1009c80:	1189803a 	cmpltu	r4,r2,r6
 1009c84:	39c7883a 	add	r3,r7,r7
 1009c88:	20c9883a 	add	r4,r4,r3
 1009c8c:	297fffc4 	addi	r5,r5,-1
 1009c90:	100d883a 	mov	r6,r2
 1009c94:	200f883a 	mov	r7,r4
 1009c98:	d9400615 	stw	r5,24(sp)
 1009c9c:	003fc006 	br	1009ba0 <__divdf3+0x104>
 1009ca0:	483ff21e 	bne	r9,zero,1009c6c <__divdf3+0x1d0>
 1009ca4:	01004004 	movi	r4,256
 1009ca8:	7104703a 	and	r2,r14,r4
 1009cac:	10c4b03a 	or	r2,r2,r3
 1009cb0:	103fee1e 	bne	r2,zero,1009c6c <__divdf3+0x1d0>
 1009cb4:	31c4b03a 	or	r2,r6,r7
 1009cb8:	103fec26 	beq	r2,zero,1009c6c <__divdf3+0x1d0>
 1009cbc:	7205883a 	add	r2,r14,r8
 1009cc0:	1391803a 	cmpltu	r8,r2,r14
 1009cc4:	43d1883a 	add	r8,r8,r15
 1009cc8:	013fc004 	movi	r4,-256
 1009ccc:	111c703a 	and	r14,r2,r4
 1009cd0:	401f883a 	mov	r15,r8
 1009cd4:	003fe506 	br	1009c6c <__divdf3+0x1d0>
 1009cd8:	8009883a 	mov	r4,r16
 1009cdc:	003f9206 	br	1009b28 <__divdf3+0x8c>
 1009ce0:	9809883a 	mov	r4,r19
 1009ce4:	d8000715 	stw	zero,28(sp)
 1009ce8:	d8000815 	stw	zero,32(sp)
 1009cec:	d8000615 	stw	zero,24(sp)
 1009cf0:	003f8d06 	br	1009b28 <__divdf3+0x8c>

01009cf4 <__eqdf2>:
 1009cf4:	deffef04 	addi	sp,sp,-68
 1009cf8:	dc400f15 	stw	r17,60(sp)
 1009cfc:	dc400404 	addi	r17,sp,16
 1009d00:	2005883a 	mov	r2,r4
 1009d04:	2807883a 	mov	r3,r5
 1009d08:	dc000e15 	stw	r16,56(sp)
 1009d0c:	d809883a 	mov	r4,sp
 1009d10:	880b883a 	mov	r5,r17
 1009d14:	dc000904 	addi	r16,sp,36
 1009d18:	d8c00115 	stw	r3,4(sp)
 1009d1c:	d8800015 	stw	r2,0(sp)
 1009d20:	d9800215 	stw	r6,8(sp)
 1009d24:	dfc01015 	stw	ra,64(sp)
 1009d28:	d9c00315 	stw	r7,12(sp)
 1009d2c:	100a5700 	call	100a570 <__unpack_d>
 1009d30:	d9000204 	addi	r4,sp,8
 1009d34:	800b883a 	mov	r5,r16
 1009d38:	100a5700 	call	100a570 <__unpack_d>
 1009d3c:	d8800417 	ldw	r2,16(sp)
 1009d40:	00c00044 	movi	r3,1
 1009d44:	180d883a 	mov	r6,r3
 1009d48:	1880062e 	bgeu	r3,r2,1009d64 <__eqdf2+0x70>
 1009d4c:	d8800917 	ldw	r2,36(sp)
 1009d50:	8809883a 	mov	r4,r17
 1009d54:	800b883a 	mov	r5,r16
 1009d58:	1880022e 	bgeu	r3,r2,1009d64 <__eqdf2+0x70>
 1009d5c:	100a6a80 	call	100a6a8 <__fpcmp_parts_d>
 1009d60:	100d883a 	mov	r6,r2
 1009d64:	3005883a 	mov	r2,r6
 1009d68:	dfc01017 	ldw	ra,64(sp)
 1009d6c:	dc400f17 	ldw	r17,60(sp)
 1009d70:	dc000e17 	ldw	r16,56(sp)
 1009d74:	dec01104 	addi	sp,sp,68
 1009d78:	f800283a 	ret

01009d7c <__nedf2>:
 1009d7c:	deffef04 	addi	sp,sp,-68
 1009d80:	dc400f15 	stw	r17,60(sp)
 1009d84:	dc400404 	addi	r17,sp,16
 1009d88:	2005883a 	mov	r2,r4
 1009d8c:	2807883a 	mov	r3,r5
 1009d90:	dc000e15 	stw	r16,56(sp)
 1009d94:	d809883a 	mov	r4,sp
 1009d98:	880b883a 	mov	r5,r17
 1009d9c:	dc000904 	addi	r16,sp,36
 1009da0:	d8c00115 	stw	r3,4(sp)
 1009da4:	d8800015 	stw	r2,0(sp)
 1009da8:	d9800215 	stw	r6,8(sp)
 1009dac:	dfc01015 	stw	ra,64(sp)
 1009db0:	d9c00315 	stw	r7,12(sp)
 1009db4:	100a5700 	call	100a570 <__unpack_d>
 1009db8:	d9000204 	addi	r4,sp,8
 1009dbc:	800b883a 	mov	r5,r16
 1009dc0:	100a5700 	call	100a570 <__unpack_d>
 1009dc4:	d8800417 	ldw	r2,16(sp)
 1009dc8:	00c00044 	movi	r3,1
 1009dcc:	180d883a 	mov	r6,r3
 1009dd0:	1880062e 	bgeu	r3,r2,1009dec <__nedf2+0x70>
 1009dd4:	d8800917 	ldw	r2,36(sp)
 1009dd8:	8809883a 	mov	r4,r17
 1009ddc:	800b883a 	mov	r5,r16
 1009de0:	1880022e 	bgeu	r3,r2,1009dec <__nedf2+0x70>
 1009de4:	100a6a80 	call	100a6a8 <__fpcmp_parts_d>
 1009de8:	100d883a 	mov	r6,r2
 1009dec:	3005883a 	mov	r2,r6
 1009df0:	dfc01017 	ldw	ra,64(sp)
 1009df4:	dc400f17 	ldw	r17,60(sp)
 1009df8:	dc000e17 	ldw	r16,56(sp)
 1009dfc:	dec01104 	addi	sp,sp,68
 1009e00:	f800283a 	ret

01009e04 <__gtdf2>:
 1009e04:	deffef04 	addi	sp,sp,-68
 1009e08:	dc400f15 	stw	r17,60(sp)
 1009e0c:	dc400404 	addi	r17,sp,16
 1009e10:	2005883a 	mov	r2,r4
 1009e14:	2807883a 	mov	r3,r5
 1009e18:	dc000e15 	stw	r16,56(sp)
 1009e1c:	d809883a 	mov	r4,sp
 1009e20:	880b883a 	mov	r5,r17
 1009e24:	dc000904 	addi	r16,sp,36
 1009e28:	d8c00115 	stw	r3,4(sp)
 1009e2c:	d8800015 	stw	r2,0(sp)
 1009e30:	d9800215 	stw	r6,8(sp)
 1009e34:	dfc01015 	stw	ra,64(sp)
 1009e38:	d9c00315 	stw	r7,12(sp)
 1009e3c:	100a5700 	call	100a570 <__unpack_d>
 1009e40:	d9000204 	addi	r4,sp,8
 1009e44:	800b883a 	mov	r5,r16
 1009e48:	100a5700 	call	100a570 <__unpack_d>
 1009e4c:	d8800417 	ldw	r2,16(sp)
 1009e50:	00c00044 	movi	r3,1
 1009e54:	01bfffc4 	movi	r6,-1
 1009e58:	1880062e 	bgeu	r3,r2,1009e74 <__gtdf2+0x70>
 1009e5c:	d8800917 	ldw	r2,36(sp)
 1009e60:	8809883a 	mov	r4,r17
 1009e64:	800b883a 	mov	r5,r16
 1009e68:	1880022e 	bgeu	r3,r2,1009e74 <__gtdf2+0x70>
 1009e6c:	100a6a80 	call	100a6a8 <__fpcmp_parts_d>
 1009e70:	100d883a 	mov	r6,r2
 1009e74:	3005883a 	mov	r2,r6
 1009e78:	dfc01017 	ldw	ra,64(sp)
 1009e7c:	dc400f17 	ldw	r17,60(sp)
 1009e80:	dc000e17 	ldw	r16,56(sp)
 1009e84:	dec01104 	addi	sp,sp,68
 1009e88:	f800283a 	ret

01009e8c <__gedf2>:
 1009e8c:	deffef04 	addi	sp,sp,-68
 1009e90:	dc400f15 	stw	r17,60(sp)
 1009e94:	dc400404 	addi	r17,sp,16
 1009e98:	2005883a 	mov	r2,r4
 1009e9c:	2807883a 	mov	r3,r5
 1009ea0:	dc000e15 	stw	r16,56(sp)
 1009ea4:	d809883a 	mov	r4,sp
 1009ea8:	880b883a 	mov	r5,r17
 1009eac:	dc000904 	addi	r16,sp,36
 1009eb0:	d8c00115 	stw	r3,4(sp)
 1009eb4:	d8800015 	stw	r2,0(sp)
 1009eb8:	d9800215 	stw	r6,8(sp)
 1009ebc:	dfc01015 	stw	ra,64(sp)
 1009ec0:	d9c00315 	stw	r7,12(sp)
 1009ec4:	100a5700 	call	100a570 <__unpack_d>
 1009ec8:	d9000204 	addi	r4,sp,8
 1009ecc:	800b883a 	mov	r5,r16
 1009ed0:	100a5700 	call	100a570 <__unpack_d>
 1009ed4:	d8800417 	ldw	r2,16(sp)
 1009ed8:	00c00044 	movi	r3,1
 1009edc:	01bfffc4 	movi	r6,-1
 1009ee0:	1880062e 	bgeu	r3,r2,1009efc <__gedf2+0x70>
 1009ee4:	d8800917 	ldw	r2,36(sp)
 1009ee8:	8809883a 	mov	r4,r17
 1009eec:	800b883a 	mov	r5,r16
 1009ef0:	1880022e 	bgeu	r3,r2,1009efc <__gedf2+0x70>
 1009ef4:	100a6a80 	call	100a6a8 <__fpcmp_parts_d>
 1009ef8:	100d883a 	mov	r6,r2
 1009efc:	3005883a 	mov	r2,r6
 1009f00:	dfc01017 	ldw	ra,64(sp)
 1009f04:	dc400f17 	ldw	r17,60(sp)
 1009f08:	dc000e17 	ldw	r16,56(sp)
 1009f0c:	dec01104 	addi	sp,sp,68
 1009f10:	f800283a 	ret

01009f14 <__ltdf2>:
 1009f14:	deffef04 	addi	sp,sp,-68
 1009f18:	dc400f15 	stw	r17,60(sp)
 1009f1c:	dc400404 	addi	r17,sp,16
 1009f20:	2005883a 	mov	r2,r4
 1009f24:	2807883a 	mov	r3,r5
 1009f28:	dc000e15 	stw	r16,56(sp)
 1009f2c:	d809883a 	mov	r4,sp
 1009f30:	880b883a 	mov	r5,r17
 1009f34:	dc000904 	addi	r16,sp,36
 1009f38:	d8c00115 	stw	r3,4(sp)
 1009f3c:	d8800015 	stw	r2,0(sp)
 1009f40:	d9800215 	stw	r6,8(sp)
 1009f44:	dfc01015 	stw	ra,64(sp)
 1009f48:	d9c00315 	stw	r7,12(sp)
 1009f4c:	100a5700 	call	100a570 <__unpack_d>
 1009f50:	d9000204 	addi	r4,sp,8
 1009f54:	800b883a 	mov	r5,r16
 1009f58:	100a5700 	call	100a570 <__unpack_d>
 1009f5c:	d8800417 	ldw	r2,16(sp)
 1009f60:	00c00044 	movi	r3,1
 1009f64:	180d883a 	mov	r6,r3
 1009f68:	1880062e 	bgeu	r3,r2,1009f84 <__ltdf2+0x70>
 1009f6c:	d8800917 	ldw	r2,36(sp)
 1009f70:	8809883a 	mov	r4,r17
 1009f74:	800b883a 	mov	r5,r16
 1009f78:	1880022e 	bgeu	r3,r2,1009f84 <__ltdf2+0x70>
 1009f7c:	100a6a80 	call	100a6a8 <__fpcmp_parts_d>
 1009f80:	100d883a 	mov	r6,r2
 1009f84:	3005883a 	mov	r2,r6
 1009f88:	dfc01017 	ldw	ra,64(sp)
 1009f8c:	dc400f17 	ldw	r17,60(sp)
 1009f90:	dc000e17 	ldw	r16,56(sp)
 1009f94:	dec01104 	addi	sp,sp,68
 1009f98:	f800283a 	ret

01009f9c <__floatsidf>:
 1009f9c:	2006d7fa 	srli	r3,r4,31
 1009fa0:	defff604 	addi	sp,sp,-40
 1009fa4:	008000c4 	movi	r2,3
 1009fa8:	dfc00915 	stw	ra,36(sp)
 1009fac:	dcc00815 	stw	r19,32(sp)
 1009fb0:	dc800715 	stw	r18,28(sp)
 1009fb4:	dc400615 	stw	r17,24(sp)
 1009fb8:	dc000515 	stw	r16,20(sp)
 1009fbc:	d8800015 	stw	r2,0(sp)
 1009fc0:	d8c00115 	stw	r3,4(sp)
 1009fc4:	20000f1e 	bne	r4,zero,100a004 <__floatsidf+0x68>
 1009fc8:	00800084 	movi	r2,2
 1009fcc:	d8800015 	stw	r2,0(sp)
 1009fd0:	d809883a 	mov	r4,sp
 1009fd4:	1000dbc0 	call	1000dbc <__pack_d>
 1009fd8:	1009883a 	mov	r4,r2
 1009fdc:	180b883a 	mov	r5,r3
 1009fe0:	2005883a 	mov	r2,r4
 1009fe4:	2807883a 	mov	r3,r5
 1009fe8:	dfc00917 	ldw	ra,36(sp)
 1009fec:	dcc00817 	ldw	r19,32(sp)
 1009ff0:	dc800717 	ldw	r18,28(sp)
 1009ff4:	dc400617 	ldw	r17,24(sp)
 1009ff8:	dc000517 	ldw	r16,20(sp)
 1009ffc:	dec00a04 	addi	sp,sp,40
 100a000:	f800283a 	ret
 100a004:	00800f04 	movi	r2,60
 100a008:	1807003a 	cmpeq	r3,r3,zero
 100a00c:	d8800215 	stw	r2,8(sp)
 100a010:	18001126 	beq	r3,zero,100a058 <__floatsidf+0xbc>
 100a014:	0027883a 	mov	r19,zero
 100a018:	2025883a 	mov	r18,r4
 100a01c:	d9000315 	stw	r4,12(sp)
 100a020:	dcc00415 	stw	r19,16(sp)
 100a024:	1000b140 	call	1000b14 <__clzsi2>
 100a028:	11000744 	addi	r4,r2,29
 100a02c:	013fe80e 	bge	zero,r4,1009fd0 <__floatsidf+0x34>
 100a030:	10bfff44 	addi	r2,r2,-3
 100a034:	10000c16 	blt	r2,zero,100a068 <__floatsidf+0xcc>
 100a038:	90a2983a 	sll	r17,r18,r2
 100a03c:	0021883a 	mov	r16,zero
 100a040:	d8800217 	ldw	r2,8(sp)
 100a044:	dc400415 	stw	r17,16(sp)
 100a048:	dc000315 	stw	r16,12(sp)
 100a04c:	1105c83a 	sub	r2,r2,r4
 100a050:	d8800215 	stw	r2,8(sp)
 100a054:	003fde06 	br	1009fd0 <__floatsidf+0x34>
 100a058:	00a00034 	movhi	r2,32768
 100a05c:	20800a26 	beq	r4,r2,100a088 <__floatsidf+0xec>
 100a060:	0109c83a 	sub	r4,zero,r4
 100a064:	003feb06 	br	100a014 <__floatsidf+0x78>
 100a068:	9006d07a 	srli	r3,r18,1
 100a06c:	008007c4 	movi	r2,31
 100a070:	1105c83a 	sub	r2,r2,r4
 100a074:	1886d83a 	srl	r3,r3,r2
 100a078:	9922983a 	sll	r17,r19,r4
 100a07c:	9120983a 	sll	r16,r18,r4
 100a080:	1c62b03a 	or	r17,r3,r17
 100a084:	003fee06 	br	100a040 <__floatsidf+0xa4>
 100a088:	0009883a 	mov	r4,zero
 100a08c:	01707834 	movhi	r5,49632
 100a090:	003fd306 	br	1009fe0 <__floatsidf+0x44>

0100a094 <__fixdfsi>:
 100a094:	defff804 	addi	sp,sp,-32
 100a098:	2005883a 	mov	r2,r4
 100a09c:	2807883a 	mov	r3,r5
 100a0a0:	d809883a 	mov	r4,sp
 100a0a4:	d9400204 	addi	r5,sp,8
 100a0a8:	d8c00115 	stw	r3,4(sp)
 100a0ac:	d8800015 	stw	r2,0(sp)
 100a0b0:	dfc00715 	stw	ra,28(sp)
 100a0b4:	100a5700 	call	100a570 <__unpack_d>
 100a0b8:	d8c00217 	ldw	r3,8(sp)
 100a0bc:	00800084 	movi	r2,2
 100a0c0:	1880051e 	bne	r3,r2,100a0d8 <__fixdfsi+0x44>
 100a0c4:	0007883a 	mov	r3,zero
 100a0c8:	1805883a 	mov	r2,r3
 100a0cc:	dfc00717 	ldw	ra,28(sp)
 100a0d0:	dec00804 	addi	sp,sp,32
 100a0d4:	f800283a 	ret
 100a0d8:	00800044 	movi	r2,1
 100a0dc:	10fff92e 	bgeu	r2,r3,100a0c4 <__fixdfsi+0x30>
 100a0e0:	00800104 	movi	r2,4
 100a0e4:	18800426 	beq	r3,r2,100a0f8 <__fixdfsi+0x64>
 100a0e8:	d8c00417 	ldw	r3,16(sp)
 100a0ec:	183ff516 	blt	r3,zero,100a0c4 <__fixdfsi+0x30>
 100a0f0:	00800784 	movi	r2,30
 100a0f4:	10c0080e 	bge	r2,r3,100a118 <__fixdfsi+0x84>
 100a0f8:	d8800317 	ldw	r2,12(sp)
 100a0fc:	1000121e 	bne	r2,zero,100a148 <__fixdfsi+0xb4>
 100a100:	00e00034 	movhi	r3,32768
 100a104:	18ffffc4 	addi	r3,r3,-1
 100a108:	1805883a 	mov	r2,r3
 100a10c:	dfc00717 	ldw	ra,28(sp)
 100a110:	dec00804 	addi	sp,sp,32
 100a114:	f800283a 	ret
 100a118:	00800f04 	movi	r2,60
 100a11c:	10d1c83a 	sub	r8,r2,r3
 100a120:	40bff804 	addi	r2,r8,-32
 100a124:	d9800517 	ldw	r6,20(sp)
 100a128:	d9c00617 	ldw	r7,24(sp)
 100a12c:	10000816 	blt	r2,zero,100a150 <__fixdfsi+0xbc>
 100a130:	3888d83a 	srl	r4,r7,r2
 100a134:	d8800317 	ldw	r2,12(sp)
 100a138:	2007883a 	mov	r3,r4
 100a13c:	103fe226 	beq	r2,zero,100a0c8 <__fixdfsi+0x34>
 100a140:	0107c83a 	sub	r3,zero,r4
 100a144:	003fe006 	br	100a0c8 <__fixdfsi+0x34>
 100a148:	00e00034 	movhi	r3,32768
 100a14c:	003fde06 	br	100a0c8 <__fixdfsi+0x34>
 100a150:	39c7883a 	add	r3,r7,r7
 100a154:	008007c4 	movi	r2,31
 100a158:	1205c83a 	sub	r2,r2,r8
 100a15c:	1886983a 	sll	r3,r3,r2
 100a160:	3208d83a 	srl	r4,r6,r8
 100a164:	1908b03a 	or	r4,r3,r4
 100a168:	003ff206 	br	100a134 <__fixdfsi+0xa0>

0100a16c <__floatunsidf>:
 100a16c:	defff204 	addi	sp,sp,-56
 100a170:	dfc00d15 	stw	ra,52(sp)
 100a174:	ddc00c15 	stw	r23,48(sp)
 100a178:	dd800b15 	stw	r22,44(sp)
 100a17c:	dd400a15 	stw	r21,40(sp)
 100a180:	dd000915 	stw	r20,36(sp)
 100a184:	dcc00815 	stw	r19,32(sp)
 100a188:	dc800715 	stw	r18,28(sp)
 100a18c:	dc400615 	stw	r17,24(sp)
 100a190:	dc000515 	stw	r16,20(sp)
 100a194:	d8000115 	stw	zero,4(sp)
 100a198:	20000f1e 	bne	r4,zero,100a1d8 <__floatunsidf+0x6c>
 100a19c:	00800084 	movi	r2,2
 100a1a0:	d8800015 	stw	r2,0(sp)
 100a1a4:	d809883a 	mov	r4,sp
 100a1a8:	1000dbc0 	call	1000dbc <__pack_d>
 100a1ac:	dfc00d17 	ldw	ra,52(sp)
 100a1b0:	ddc00c17 	ldw	r23,48(sp)
 100a1b4:	dd800b17 	ldw	r22,44(sp)
 100a1b8:	dd400a17 	ldw	r21,40(sp)
 100a1bc:	dd000917 	ldw	r20,36(sp)
 100a1c0:	dcc00817 	ldw	r19,32(sp)
 100a1c4:	dc800717 	ldw	r18,28(sp)
 100a1c8:	dc400617 	ldw	r17,24(sp)
 100a1cc:	dc000517 	ldw	r16,20(sp)
 100a1d0:	dec00e04 	addi	sp,sp,56
 100a1d4:	f800283a 	ret
 100a1d8:	008000c4 	movi	r2,3
 100a1dc:	00c00f04 	movi	r3,60
 100a1e0:	002f883a 	mov	r23,zero
 100a1e4:	202d883a 	mov	r22,r4
 100a1e8:	d8800015 	stw	r2,0(sp)
 100a1ec:	d8c00215 	stw	r3,8(sp)
 100a1f0:	d9000315 	stw	r4,12(sp)
 100a1f4:	ddc00415 	stw	r23,16(sp)
 100a1f8:	1000b140 	call	1000b14 <__clzsi2>
 100a1fc:	12400744 	addi	r9,r2,29
 100a200:	48000b16 	blt	r9,zero,100a230 <__floatunsidf+0xc4>
 100a204:	483fe726 	beq	r9,zero,100a1a4 <__floatunsidf+0x38>
 100a208:	10bfff44 	addi	r2,r2,-3
 100a20c:	10002e16 	blt	r2,zero,100a2c8 <__floatunsidf+0x15c>
 100a210:	b0a2983a 	sll	r17,r22,r2
 100a214:	0021883a 	mov	r16,zero
 100a218:	d8800217 	ldw	r2,8(sp)
 100a21c:	dc400415 	stw	r17,16(sp)
 100a220:	dc000315 	stw	r16,12(sp)
 100a224:	1245c83a 	sub	r2,r2,r9
 100a228:	d8800215 	stw	r2,8(sp)
 100a22c:	003fdd06 	br	100a1a4 <__floatunsidf+0x38>
 100a230:	0255c83a 	sub	r10,zero,r9
 100a234:	51bff804 	addi	r6,r10,-32
 100a238:	30001b16 	blt	r6,zero,100a2a8 <__floatunsidf+0x13c>
 100a23c:	b9a8d83a 	srl	r20,r23,r6
 100a240:	002b883a 	mov	r21,zero
 100a244:	000f883a 	mov	r7,zero
 100a248:	01000044 	movi	r4,1
 100a24c:	0011883a 	mov	r8,zero
 100a250:	30002516 	blt	r6,zero,100a2e8 <__floatunsidf+0x17c>
 100a254:	21a6983a 	sll	r19,r4,r6
 100a258:	0025883a 	mov	r18,zero
 100a25c:	00bfffc4 	movi	r2,-1
 100a260:	9089883a 	add	r4,r18,r2
 100a264:	988b883a 	add	r5,r19,r2
 100a268:	248d803a 	cmpltu	r6,r4,r18
 100a26c:	314b883a 	add	r5,r6,r5
 100a270:	b104703a 	and	r2,r22,r4
 100a274:	b946703a 	and	r3,r23,r5
 100a278:	10c4b03a 	or	r2,r2,r3
 100a27c:	10000226 	beq	r2,zero,100a288 <__floatunsidf+0x11c>
 100a280:	01c00044 	movi	r7,1
 100a284:	0011883a 	mov	r8,zero
 100a288:	d9000217 	ldw	r4,8(sp)
 100a28c:	a1c4b03a 	or	r2,r20,r7
 100a290:	aa06b03a 	or	r3,r21,r8
 100a294:	2249c83a 	sub	r4,r4,r9
 100a298:	d8c00415 	stw	r3,16(sp)
 100a29c:	d9000215 	stw	r4,8(sp)
 100a2a0:	d8800315 	stw	r2,12(sp)
 100a2a4:	003fbf06 	br	100a1a4 <__floatunsidf+0x38>
 100a2a8:	bdc7883a 	add	r3,r23,r23
 100a2ac:	008007c4 	movi	r2,31
 100a2b0:	1285c83a 	sub	r2,r2,r10
 100a2b4:	1886983a 	sll	r3,r3,r2
 100a2b8:	b2a8d83a 	srl	r20,r22,r10
 100a2bc:	baaad83a 	srl	r21,r23,r10
 100a2c0:	1d28b03a 	or	r20,r3,r20
 100a2c4:	003fdf06 	br	100a244 <__floatunsidf+0xd8>
 100a2c8:	b006d07a 	srli	r3,r22,1
 100a2cc:	008007c4 	movi	r2,31
 100a2d0:	1245c83a 	sub	r2,r2,r9
 100a2d4:	1886d83a 	srl	r3,r3,r2
 100a2d8:	ba62983a 	sll	r17,r23,r9
 100a2dc:	b260983a 	sll	r16,r22,r9
 100a2e0:	1c62b03a 	or	r17,r3,r17
 100a2e4:	003fcc06 	br	100a218 <__floatunsidf+0xac>
 100a2e8:	2006d07a 	srli	r3,r4,1
 100a2ec:	008007c4 	movi	r2,31
 100a2f0:	1285c83a 	sub	r2,r2,r10
 100a2f4:	18a6d83a 	srl	r19,r3,r2
 100a2f8:	22a4983a 	sll	r18,r4,r10
 100a2fc:	003fd706 	br	100a25c <__floatunsidf+0xf0>

0100a300 <udivmodsi4>:
 100a300:	29001b2e 	bgeu	r5,r4,100a370 <udivmodsi4+0x70>
 100a304:	28001a16 	blt	r5,zero,100a370 <udivmodsi4+0x70>
 100a308:	00800044 	movi	r2,1
 100a30c:	0007883a 	mov	r3,zero
 100a310:	01c007c4 	movi	r7,31
 100a314:	00000306 	br	100a324 <udivmodsi4+0x24>
 100a318:	19c01326 	beq	r3,r7,100a368 <udivmodsi4+0x68>
 100a31c:	18c00044 	addi	r3,r3,1
 100a320:	28000416 	blt	r5,zero,100a334 <udivmodsi4+0x34>
 100a324:	294b883a 	add	r5,r5,r5
 100a328:	1085883a 	add	r2,r2,r2
 100a32c:	293ffa36 	bltu	r5,r4,100a318 <udivmodsi4+0x18>
 100a330:	10000d26 	beq	r2,zero,100a368 <udivmodsi4+0x68>
 100a334:	0007883a 	mov	r3,zero
 100a338:	21400236 	bltu	r4,r5,100a344 <udivmodsi4+0x44>
 100a33c:	2149c83a 	sub	r4,r4,r5
 100a340:	1886b03a 	or	r3,r3,r2
 100a344:	1004d07a 	srli	r2,r2,1
 100a348:	280ad07a 	srli	r5,r5,1
 100a34c:	103ffa1e 	bne	r2,zero,100a338 <udivmodsi4+0x38>
 100a350:	30000226 	beq	r6,zero,100a35c <udivmodsi4+0x5c>
 100a354:	2005883a 	mov	r2,r4
 100a358:	f800283a 	ret
 100a35c:	1809883a 	mov	r4,r3
 100a360:	2005883a 	mov	r2,r4
 100a364:	f800283a 	ret
 100a368:	0007883a 	mov	r3,zero
 100a36c:	003ff806 	br	100a350 <udivmodsi4+0x50>
 100a370:	00800044 	movi	r2,1
 100a374:	0007883a 	mov	r3,zero
 100a378:	003fef06 	br	100a338 <udivmodsi4+0x38>

0100a37c <__divsi3>:
 100a37c:	defffe04 	addi	sp,sp,-8
 100a380:	dc000015 	stw	r16,0(sp)
 100a384:	dfc00115 	stw	ra,4(sp)
 100a388:	0021883a 	mov	r16,zero
 100a38c:	20000c16 	blt	r4,zero,100a3c0 <__divsi3+0x44>
 100a390:	000d883a 	mov	r6,zero
 100a394:	28000e16 	blt	r5,zero,100a3d0 <__divsi3+0x54>
 100a398:	100a3000 	call	100a300 <udivmodsi4>
 100a39c:	1007883a 	mov	r3,r2
 100a3a0:	8005003a 	cmpeq	r2,r16,zero
 100a3a4:	1000011e 	bne	r2,zero,100a3ac <__divsi3+0x30>
 100a3a8:	00c7c83a 	sub	r3,zero,r3
 100a3ac:	1805883a 	mov	r2,r3
 100a3b0:	dfc00117 	ldw	ra,4(sp)
 100a3b4:	dc000017 	ldw	r16,0(sp)
 100a3b8:	dec00204 	addi	sp,sp,8
 100a3bc:	f800283a 	ret
 100a3c0:	0109c83a 	sub	r4,zero,r4
 100a3c4:	04000044 	movi	r16,1
 100a3c8:	000d883a 	mov	r6,zero
 100a3cc:	283ff20e 	bge	r5,zero,100a398 <__divsi3+0x1c>
 100a3d0:	014bc83a 	sub	r5,zero,r5
 100a3d4:	8021003a 	cmpeq	r16,r16,zero
 100a3d8:	003fef06 	br	100a398 <__divsi3+0x1c>

0100a3dc <__modsi3>:
 100a3dc:	deffff04 	addi	sp,sp,-4
 100a3e0:	dfc00015 	stw	ra,0(sp)
 100a3e4:	01800044 	movi	r6,1
 100a3e8:	2807883a 	mov	r3,r5
 100a3ec:	20000416 	blt	r4,zero,100a400 <__modsi3+0x24>
 100a3f0:	28000c16 	blt	r5,zero,100a424 <__modsi3+0x48>
 100a3f4:	dfc00017 	ldw	ra,0(sp)
 100a3f8:	dec00104 	addi	sp,sp,4
 100a3fc:	100a3001 	jmpi	100a300 <udivmodsi4>
 100a400:	0109c83a 	sub	r4,zero,r4
 100a404:	28000b16 	blt	r5,zero,100a434 <__modsi3+0x58>
 100a408:	180b883a 	mov	r5,r3
 100a40c:	01800044 	movi	r6,1
 100a410:	100a3000 	call	100a300 <udivmodsi4>
 100a414:	0085c83a 	sub	r2,zero,r2
 100a418:	dfc00017 	ldw	ra,0(sp)
 100a41c:	dec00104 	addi	sp,sp,4
 100a420:	f800283a 	ret
 100a424:	014bc83a 	sub	r5,zero,r5
 100a428:	dfc00017 	ldw	ra,0(sp)
 100a42c:	dec00104 	addi	sp,sp,4
 100a430:	100a3001 	jmpi	100a300 <udivmodsi4>
 100a434:	0147c83a 	sub	r3,zero,r5
 100a438:	003ff306 	br	100a408 <__modsi3+0x2c>

0100a43c <__udivsi3>:
 100a43c:	000d883a 	mov	r6,zero
 100a440:	100a3001 	jmpi	100a300 <udivmodsi4>

0100a444 <__umodsi3>:
 100a444:	01800044 	movi	r6,1
 100a448:	100a3001 	jmpi	100a300 <udivmodsi4>

0100a44c <__muldi3>:
 100a44c:	defff204 	addi	sp,sp,-56
 100a450:	df000c15 	stw	fp,48(sp)
 100a454:	3038d43a 	srli	fp,r6,16
 100a458:	dd000815 	stw	r20,32(sp)
 100a45c:	dc400515 	stw	r17,20(sp)
 100a460:	2028d43a 	srli	r20,r4,16
 100a464:	247fffcc 	andi	r17,r4,65535
 100a468:	dc000415 	stw	r16,16(sp)
 100a46c:	343fffcc 	andi	r16,r6,65535
 100a470:	dcc00715 	stw	r19,28(sp)
 100a474:	d9000015 	stw	r4,0(sp)
 100a478:	2827883a 	mov	r19,r5
 100a47c:	8809883a 	mov	r4,r17
 100a480:	d9400115 	stw	r5,4(sp)
 100a484:	800b883a 	mov	r5,r16
 100a488:	d9800215 	stw	r6,8(sp)
 100a48c:	dfc00d15 	stw	ra,52(sp)
 100a490:	d9c00315 	stw	r7,12(sp)
 100a494:	dd800a15 	stw	r22,40(sp)
 100a498:	dd400915 	stw	r21,36(sp)
 100a49c:	302d883a 	mov	r22,r6
 100a4a0:	ddc00b15 	stw	r23,44(sp)
 100a4a4:	dc800615 	stw	r18,24(sp)
 100a4a8:	1000adc0 	call	1000adc <__mulsi3>
 100a4ac:	8809883a 	mov	r4,r17
 100a4b0:	e00b883a 	mov	r5,fp
 100a4b4:	102b883a 	mov	r21,r2
 100a4b8:	1000adc0 	call	1000adc <__mulsi3>
 100a4bc:	800b883a 	mov	r5,r16
 100a4c0:	a009883a 	mov	r4,r20
 100a4c4:	1023883a 	mov	r17,r2
 100a4c8:	1000adc0 	call	1000adc <__mulsi3>
 100a4cc:	a009883a 	mov	r4,r20
 100a4d0:	e00b883a 	mov	r5,fp
 100a4d4:	1021883a 	mov	r16,r2
 100a4d8:	1000adc0 	call	1000adc <__mulsi3>
 100a4dc:	a8ffffcc 	andi	r3,r21,65535
 100a4e0:	a82ad43a 	srli	r21,r21,16
 100a4e4:	8c23883a 	add	r17,r17,r16
 100a4e8:	1011883a 	mov	r8,r2
 100a4ec:	ac6b883a 	add	r21,r21,r17
 100a4f0:	a804943a 	slli	r2,r21,16
 100a4f4:	b009883a 	mov	r4,r22
 100a4f8:	980b883a 	mov	r5,r19
 100a4fc:	10c7883a 	add	r3,r2,r3
 100a500:	a812d43a 	srli	r9,r21,16
 100a504:	180d883a 	mov	r6,r3
 100a508:	ac00022e 	bgeu	r21,r16,100a514 <__muldi3+0xc8>
 100a50c:	00800074 	movhi	r2,1
 100a510:	4091883a 	add	r8,r8,r2
 100a514:	4267883a 	add	r19,r8,r9
 100a518:	302d883a 	mov	r22,r6
 100a51c:	1000adc0 	call	1000adc <__mulsi3>
 100a520:	d9400317 	ldw	r5,12(sp)
 100a524:	d9000017 	ldw	r4,0(sp)
 100a528:	1023883a 	mov	r17,r2
 100a52c:	1000adc0 	call	1000adc <__mulsi3>
 100a530:	14cb883a 	add	r5,r2,r19
 100a534:	894b883a 	add	r5,r17,r5
 100a538:	b005883a 	mov	r2,r22
 100a53c:	2807883a 	mov	r3,r5
 100a540:	dfc00d17 	ldw	ra,52(sp)
 100a544:	df000c17 	ldw	fp,48(sp)
 100a548:	ddc00b17 	ldw	r23,44(sp)
 100a54c:	dd800a17 	ldw	r22,40(sp)
 100a550:	dd400917 	ldw	r21,36(sp)
 100a554:	dd000817 	ldw	r20,32(sp)
 100a558:	dcc00717 	ldw	r19,28(sp)
 100a55c:	dc800617 	ldw	r18,24(sp)
 100a560:	dc400517 	ldw	r17,20(sp)
 100a564:	dc000417 	ldw	r16,16(sp)
 100a568:	dec00e04 	addi	sp,sp,56
 100a56c:	f800283a 	ret

0100a570 <__unpack_d>:
 100a570:	20c00117 	ldw	r3,4(r4)
 100a574:	22400017 	ldw	r9,0(r4)
 100a578:	00800434 	movhi	r2,16
 100a57c:	10bfffc4 	addi	r2,r2,-1
 100a580:	1808d53a 	srli	r4,r3,20
 100a584:	180cd7fa 	srli	r6,r3,31
 100a588:	1894703a 	and	r10,r3,r2
 100a58c:	2201ffcc 	andi	r8,r4,2047
 100a590:	281b883a 	mov	r13,r5
 100a594:	4817883a 	mov	r11,r9
 100a598:	29800115 	stw	r6,4(r5)
 100a59c:	5019883a 	mov	r12,r10
 100a5a0:	40001e1e 	bne	r8,zero,100a61c <__unpack_d+0xac>
 100a5a4:	4a84b03a 	or	r2,r9,r10
 100a5a8:	10001926 	beq	r2,zero,100a610 <__unpack_d+0xa0>
 100a5ac:	4804d63a 	srli	r2,r9,24
 100a5b0:	500c923a 	slli	r6,r10,8
 100a5b4:	013f0084 	movi	r4,-1022
 100a5b8:	00c40034 	movhi	r3,4096
 100a5bc:	18ffffc4 	addi	r3,r3,-1
 100a5c0:	118cb03a 	or	r6,r2,r6
 100a5c4:	008000c4 	movi	r2,3
 100a5c8:	480a923a 	slli	r5,r9,8
 100a5cc:	68800015 	stw	r2,0(r13)
 100a5d0:	69000215 	stw	r4,8(r13)
 100a5d4:	19800b36 	bltu	r3,r6,100a604 <__unpack_d+0x94>
 100a5d8:	200f883a 	mov	r7,r4
 100a5dc:	1811883a 	mov	r8,r3
 100a5e0:	2945883a 	add	r2,r5,r5
 100a5e4:	1149803a 	cmpltu	r4,r2,r5
 100a5e8:	3187883a 	add	r3,r6,r6
 100a5ec:	20c9883a 	add	r4,r4,r3
 100a5f0:	100b883a 	mov	r5,r2
 100a5f4:	200d883a 	mov	r6,r4
 100a5f8:	39ffffc4 	addi	r7,r7,-1
 100a5fc:	413ff82e 	bgeu	r8,r4,100a5e0 <__unpack_d+0x70>
 100a600:	69c00215 	stw	r7,8(r13)
 100a604:	69800415 	stw	r6,16(r13)
 100a608:	69400315 	stw	r5,12(r13)
 100a60c:	f800283a 	ret
 100a610:	00800084 	movi	r2,2
 100a614:	28800015 	stw	r2,0(r5)
 100a618:	f800283a 	ret
 100a61c:	0081ffc4 	movi	r2,2047
 100a620:	40800f26 	beq	r8,r2,100a660 <__unpack_d+0xf0>
 100a624:	480cd63a 	srli	r6,r9,24
 100a628:	5006923a 	slli	r3,r10,8
 100a62c:	4804923a 	slli	r2,r9,8
 100a630:	0009883a 	mov	r4,zero
 100a634:	30c6b03a 	or	r3,r6,r3
 100a638:	01440034 	movhi	r5,4096
 100a63c:	110cb03a 	or	r6,r2,r4
 100a640:	423f0044 	addi	r8,r8,-1023
 100a644:	194eb03a 	or	r7,r3,r5
 100a648:	008000c4 	movi	r2,3
 100a64c:	69c00415 	stw	r7,16(r13)
 100a650:	6a000215 	stw	r8,8(r13)
 100a654:	68800015 	stw	r2,0(r13)
 100a658:	69800315 	stw	r6,12(r13)
 100a65c:	f800283a 	ret
 100a660:	4a84b03a 	or	r2,r9,r10
 100a664:	1000031e 	bne	r2,zero,100a674 <__unpack_d+0x104>
 100a668:	00800104 	movi	r2,4
 100a66c:	28800015 	stw	r2,0(r5)
 100a670:	f800283a 	ret
 100a674:	0009883a 	mov	r4,zero
 100a678:	01400234 	movhi	r5,8
 100a67c:	4904703a 	and	r2,r9,r4
 100a680:	5146703a 	and	r3,r10,r5
 100a684:	10c4b03a 	or	r2,r2,r3
 100a688:	10000526 	beq	r2,zero,100a6a0 <__unpack_d+0x130>
 100a68c:	00800044 	movi	r2,1
 100a690:	68800015 	stw	r2,0(r13)
 100a694:	6b000415 	stw	r12,16(r13)
 100a698:	6ac00315 	stw	r11,12(r13)
 100a69c:	f800283a 	ret
 100a6a0:	68000015 	stw	zero,0(r13)
 100a6a4:	003ffb06 	br	100a694 <__unpack_d+0x124>

0100a6a8 <__fpcmp_parts_d>:
 100a6a8:	21800017 	ldw	r6,0(r4)
 100a6ac:	00c00044 	movi	r3,1
 100a6b0:	19800a2e 	bgeu	r3,r6,100a6dc <__fpcmp_parts_d+0x34>
 100a6b4:	28800017 	ldw	r2,0(r5)
 100a6b8:	1880082e 	bgeu	r3,r2,100a6dc <__fpcmp_parts_d+0x34>
 100a6bc:	00c00104 	movi	r3,4
 100a6c0:	30c02626 	beq	r6,r3,100a75c <__fpcmp_parts_d+0xb4>
 100a6c4:	10c02226 	beq	r2,r3,100a750 <__fpcmp_parts_d+0xa8>
 100a6c8:	00c00084 	movi	r3,2
 100a6cc:	30c00526 	beq	r6,r3,100a6e4 <__fpcmp_parts_d+0x3c>
 100a6d0:	10c0071e 	bne	r2,r3,100a6f0 <__fpcmp_parts_d+0x48>
 100a6d4:	20800117 	ldw	r2,4(r4)
 100a6d8:	1000091e 	bne	r2,zero,100a700 <__fpcmp_parts_d+0x58>
 100a6dc:	00800044 	movi	r2,1
 100a6e0:	f800283a 	ret
 100a6e4:	10c01a1e 	bne	r2,r3,100a750 <__fpcmp_parts_d+0xa8>
 100a6e8:	0005883a 	mov	r2,zero
 100a6ec:	f800283a 	ret
 100a6f0:	22000117 	ldw	r8,4(r4)
 100a6f4:	28800117 	ldw	r2,4(r5)
 100a6f8:	40800326 	beq	r8,r2,100a708 <__fpcmp_parts_d+0x60>
 100a6fc:	403ff726 	beq	r8,zero,100a6dc <__fpcmp_parts_d+0x34>
 100a700:	00bfffc4 	movi	r2,-1
 100a704:	f800283a 	ret
 100a708:	20c00217 	ldw	r3,8(r4)
 100a70c:	28800217 	ldw	r2,8(r5)
 100a710:	10fffa16 	blt	r2,r3,100a6fc <__fpcmp_parts_d+0x54>
 100a714:	18800916 	blt	r3,r2,100a73c <__fpcmp_parts_d+0x94>
 100a718:	21c00417 	ldw	r7,16(r4)
 100a71c:	28c00417 	ldw	r3,16(r5)
 100a720:	21800317 	ldw	r6,12(r4)
 100a724:	28800317 	ldw	r2,12(r5)
 100a728:	19fff436 	bltu	r3,r7,100a6fc <__fpcmp_parts_d+0x54>
 100a72c:	38c00526 	beq	r7,r3,100a744 <__fpcmp_parts_d+0x9c>
 100a730:	38c00236 	bltu	r7,r3,100a73c <__fpcmp_parts_d+0x94>
 100a734:	19ffec1e 	bne	r3,r7,100a6e8 <__fpcmp_parts_d+0x40>
 100a738:	30bfeb2e 	bgeu	r6,r2,100a6e8 <__fpcmp_parts_d+0x40>
 100a73c:	403fe71e 	bne	r8,zero,100a6dc <__fpcmp_parts_d+0x34>
 100a740:	003fef06 	br	100a700 <__fpcmp_parts_d+0x58>
 100a744:	11bffa2e 	bgeu	r2,r6,100a730 <__fpcmp_parts_d+0x88>
 100a748:	403fe426 	beq	r8,zero,100a6dc <__fpcmp_parts_d+0x34>
 100a74c:	003fec06 	br	100a700 <__fpcmp_parts_d+0x58>
 100a750:	28800117 	ldw	r2,4(r5)
 100a754:	103fe11e 	bne	r2,zero,100a6dc <__fpcmp_parts_d+0x34>
 100a758:	003fe906 	br	100a700 <__fpcmp_parts_d+0x58>
 100a75c:	11bfdd1e 	bne	r2,r6,100a6d4 <__fpcmp_parts_d+0x2c>
 100a760:	28c00117 	ldw	r3,4(r5)
 100a764:	20800117 	ldw	r2,4(r4)
 100a768:	1885c83a 	sub	r2,r3,r2
 100a76c:	f800283a 	ret

0100a770 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100a770:	defff804 	addi	sp,sp,-32
 100a774:	dfc00715 	stw	ra,28(sp)
 100a778:	df000615 	stw	fp,24(sp)
 100a77c:	df000604 	addi	fp,sp,24
 100a780:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100a784:	e0bffc17 	ldw	r2,-16(fp)
 100a788:	1004803a 	cmplt	r2,r2,zero
 100a78c:	1000091e 	bne	r2,zero,100a7b4 <close+0x44>
 100a790:	e13ffc17 	ldw	r4,-16(fp)
 100a794:	01400304 	movi	r5,12
 100a798:	1000adc0 	call	1000adc <__mulsi3>
 100a79c:	1007883a 	mov	r3,r2
 100a7a0:	00804074 	movhi	r2,257
 100a7a4:	108ca104 	addi	r2,r2,12932
 100a7a8:	1887883a 	add	r3,r3,r2
 100a7ac:	e0ffff15 	stw	r3,-4(fp)
 100a7b0:	00000106 	br	100a7b8 <close+0x48>
 100a7b4:	e03fff15 	stw	zero,-4(fp)
 100a7b8:	e0bfff17 	ldw	r2,-4(fp)
 100a7bc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100a7c0:	e0bffb17 	ldw	r2,-20(fp)
 100a7c4:	1005003a 	cmpeq	r2,r2,zero
 100a7c8:	10001d1e 	bne	r2,zero,100a840 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100a7cc:	e0bffb17 	ldw	r2,-20(fp)
 100a7d0:	10800017 	ldw	r2,0(r2)
 100a7d4:	10800417 	ldw	r2,16(r2)
 100a7d8:	1005003a 	cmpeq	r2,r2,zero
 100a7dc:	1000071e 	bne	r2,zero,100a7fc <close+0x8c>
 100a7e0:	e0bffb17 	ldw	r2,-20(fp)
 100a7e4:	10800017 	ldw	r2,0(r2)
 100a7e8:	10800417 	ldw	r2,16(r2)
 100a7ec:	e13ffb17 	ldw	r4,-20(fp)
 100a7f0:	103ee83a 	callr	r2
 100a7f4:	e0bffe15 	stw	r2,-8(fp)
 100a7f8:	00000106 	br	100a800 <close+0x90>
 100a7fc:	e03ffe15 	stw	zero,-8(fp)
 100a800:	e0bffe17 	ldw	r2,-8(fp)
 100a804:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100a808:	e13ffc17 	ldw	r4,-16(fp)
 100a80c:	100afc80 	call	100afc8 <alt_release_fd>
    if (rval < 0)
 100a810:	e0bffa17 	ldw	r2,-24(fp)
 100a814:	1004403a 	cmpge	r2,r2,zero
 100a818:	1000071e 	bne	r2,zero,100a838 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100a81c:	100a8700 	call	100a870 <alt_get_errno>
 100a820:	e0fffa17 	ldw	r3,-24(fp)
 100a824:	00c7c83a 	sub	r3,zero,r3
 100a828:	10c00015 	stw	r3,0(r2)
      return -1;
 100a82c:	00bfffc4 	movi	r2,-1
 100a830:	e0bffd15 	stw	r2,-12(fp)
 100a834:	00000806 	br	100a858 <close+0xe8>
    }
    return 0;
 100a838:	e03ffd15 	stw	zero,-12(fp)
 100a83c:	00000606 	br	100a858 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a840:	100a8700 	call	100a870 <alt_get_errno>
 100a844:	1007883a 	mov	r3,r2
 100a848:	00801444 	movi	r2,81
 100a84c:	18800015 	stw	r2,0(r3)
    return -1;
 100a850:	00bfffc4 	movi	r2,-1
 100a854:	e0bffd15 	stw	r2,-12(fp)
 100a858:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a85c:	e037883a 	mov	sp,fp
 100a860:	dfc00117 	ldw	ra,4(sp)
 100a864:	df000017 	ldw	fp,0(sp)
 100a868:	dec00204 	addi	sp,sp,8
 100a86c:	f800283a 	ret

0100a870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a870:	defffd04 	addi	sp,sp,-12
 100a874:	dfc00215 	stw	ra,8(sp)
 100a878:	df000115 	stw	fp,4(sp)
 100a87c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a880:	00804074 	movhi	r2,257
 100a884:	10916104 	addi	r2,r2,17796
 100a888:	10800017 	ldw	r2,0(r2)
 100a88c:	1005003a 	cmpeq	r2,r2,zero
 100a890:	1000061e 	bne	r2,zero,100a8ac <alt_get_errno+0x3c>
 100a894:	00804074 	movhi	r2,257
 100a898:	10916104 	addi	r2,r2,17796
 100a89c:	10800017 	ldw	r2,0(r2)
 100a8a0:	103ee83a 	callr	r2
 100a8a4:	e0bfff15 	stw	r2,-4(fp)
 100a8a8:	00000306 	br	100a8b8 <alt_get_errno+0x48>
 100a8ac:	00804074 	movhi	r2,257
 100a8b0:	10984004 	addi	r2,r2,24832
 100a8b4:	e0bfff15 	stw	r2,-4(fp)
 100a8b8:	e0bfff17 	ldw	r2,-4(fp)
}
 100a8bc:	e037883a 	mov	sp,fp
 100a8c0:	dfc00117 	ldw	ra,4(sp)
 100a8c4:	df000017 	ldw	fp,0(sp)
 100a8c8:	dec00204 	addi	sp,sp,8
 100a8cc:	f800283a 	ret

0100a8d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a8d0:	defffc04 	addi	sp,sp,-16
 100a8d4:	df000315 	stw	fp,12(sp)
 100a8d8:	df000304 	addi	fp,sp,12
 100a8dc:	e13ffd15 	stw	r4,-12(fp)
 100a8e0:	e17ffe15 	stw	r5,-8(fp)
 100a8e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a8e8:	e0bfff17 	ldw	r2,-4(fp)
}
 100a8ec:	e037883a 	mov	sp,fp
 100a8f0:	df000017 	ldw	fp,0(sp)
 100a8f4:	dec00104 	addi	sp,sp,4
 100a8f8:	f800283a 	ret

0100a8fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a8fc:	defff904 	addi	sp,sp,-28
 100a900:	dfc00615 	stw	ra,24(sp)
 100a904:	df000515 	stw	fp,20(sp)
 100a908:	df000504 	addi	fp,sp,20
 100a90c:	e13ffc15 	stw	r4,-16(fp)
 100a910:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a914:	e0bffc17 	ldw	r2,-16(fp)
 100a918:	1004803a 	cmplt	r2,r2,zero
 100a91c:	1000091e 	bne	r2,zero,100a944 <fstat+0x48>
 100a920:	e13ffc17 	ldw	r4,-16(fp)
 100a924:	01400304 	movi	r5,12
 100a928:	1000adc0 	call	1000adc <__mulsi3>
 100a92c:	1007883a 	mov	r3,r2
 100a930:	00804074 	movhi	r2,257
 100a934:	108ca104 	addi	r2,r2,12932
 100a938:	1887883a 	add	r3,r3,r2
 100a93c:	e0ffff15 	stw	r3,-4(fp)
 100a940:	00000106 	br	100a948 <fstat+0x4c>
 100a944:	e03fff15 	stw	zero,-4(fp)
 100a948:	e0bfff17 	ldw	r2,-4(fp)
 100a94c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a950:	e0bffb17 	ldw	r2,-20(fp)
 100a954:	1005003a 	cmpeq	r2,r2,zero
 100a958:	1000121e 	bne	r2,zero,100a9a4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a95c:	e0bffb17 	ldw	r2,-20(fp)
 100a960:	10800017 	ldw	r2,0(r2)
 100a964:	10800817 	ldw	r2,32(r2)
 100a968:	1005003a 	cmpeq	r2,r2,zero
 100a96c:	1000081e 	bne	r2,zero,100a990 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100a970:	e0bffb17 	ldw	r2,-20(fp)
 100a974:	10800017 	ldw	r2,0(r2)
 100a978:	10800817 	ldw	r2,32(r2)
 100a97c:	e13ffb17 	ldw	r4,-20(fp)
 100a980:	e17ffd17 	ldw	r5,-12(fp)
 100a984:	103ee83a 	callr	r2
 100a988:	e0bffe15 	stw	r2,-8(fp)
 100a98c:	00000b06 	br	100a9bc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a990:	e0fffd17 	ldw	r3,-12(fp)
 100a994:	00880004 	movi	r2,8192
 100a998:	18800115 	stw	r2,4(r3)
      return 0;
 100a99c:	e03ffe15 	stw	zero,-8(fp)
 100a9a0:	00000606 	br	100a9bc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a9a4:	100a9d40 	call	100a9d4 <alt_get_errno>
 100a9a8:	1007883a 	mov	r3,r2
 100a9ac:	00801444 	movi	r2,81
 100a9b0:	18800015 	stw	r2,0(r3)
    return -1;
 100a9b4:	00bfffc4 	movi	r2,-1
 100a9b8:	e0bffe15 	stw	r2,-8(fp)
 100a9bc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a9c0:	e037883a 	mov	sp,fp
 100a9c4:	dfc00117 	ldw	ra,4(sp)
 100a9c8:	df000017 	ldw	fp,0(sp)
 100a9cc:	dec00204 	addi	sp,sp,8
 100a9d0:	f800283a 	ret

0100a9d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a9d4:	defffd04 	addi	sp,sp,-12
 100a9d8:	dfc00215 	stw	ra,8(sp)
 100a9dc:	df000115 	stw	fp,4(sp)
 100a9e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a9e4:	00804074 	movhi	r2,257
 100a9e8:	10916104 	addi	r2,r2,17796
 100a9ec:	10800017 	ldw	r2,0(r2)
 100a9f0:	1005003a 	cmpeq	r2,r2,zero
 100a9f4:	1000061e 	bne	r2,zero,100aa10 <alt_get_errno+0x3c>
 100a9f8:	00804074 	movhi	r2,257
 100a9fc:	10916104 	addi	r2,r2,17796
 100aa00:	10800017 	ldw	r2,0(r2)
 100aa04:	103ee83a 	callr	r2
 100aa08:	e0bfff15 	stw	r2,-4(fp)
 100aa0c:	00000306 	br	100aa1c <alt_get_errno+0x48>
 100aa10:	00804074 	movhi	r2,257
 100aa14:	10984004 	addi	r2,r2,24832
 100aa18:	e0bfff15 	stw	r2,-4(fp)
 100aa1c:	e0bfff17 	ldw	r2,-4(fp)
}
 100aa20:	e037883a 	mov	sp,fp
 100aa24:	dfc00117 	ldw	ra,4(sp)
 100aa28:	df000017 	ldw	fp,0(sp)
 100aa2c:	dec00204 	addi	sp,sp,8
 100aa30:	f800283a 	ret

0100aa34 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100aa34:	deffeb04 	addi	sp,sp,-84
 100aa38:	dfc01415 	stw	ra,80(sp)
 100aa3c:	df001315 	stw	fp,76(sp)
 100aa40:	df001304 	addi	fp,sp,76
 100aa44:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100aa48:	e0bffd17 	ldw	r2,-12(fp)
 100aa4c:	1004803a 	cmplt	r2,r2,zero
 100aa50:	1000091e 	bne	r2,zero,100aa78 <isatty+0x44>
 100aa54:	e13ffd17 	ldw	r4,-12(fp)
 100aa58:	01400304 	movi	r5,12
 100aa5c:	1000adc0 	call	1000adc <__mulsi3>
 100aa60:	1007883a 	mov	r3,r2
 100aa64:	00804074 	movhi	r2,257
 100aa68:	108ca104 	addi	r2,r2,12932
 100aa6c:	1887883a 	add	r3,r3,r2
 100aa70:	e0ffff15 	stw	r3,-4(fp)
 100aa74:	00000106 	br	100aa7c <isatty+0x48>
 100aa78:	e03fff15 	stw	zero,-4(fp)
 100aa7c:	e0bfff17 	ldw	r2,-4(fp)
 100aa80:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100aa84:	e0bfed17 	ldw	r2,-76(fp)
 100aa88:	1005003a 	cmpeq	r2,r2,zero
 100aa8c:	10000f1e 	bne	r2,zero,100aacc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100aa90:	e0bfed17 	ldw	r2,-76(fp)
 100aa94:	10800017 	ldw	r2,0(r2)
 100aa98:	10800817 	ldw	r2,32(r2)
 100aa9c:	1004c03a 	cmpne	r2,r2,zero
 100aaa0:	1000031e 	bne	r2,zero,100aab0 <isatty+0x7c>
    {
      return 1;
 100aaa4:	00800044 	movi	r2,1
 100aaa8:	e0bffe15 	stw	r2,-8(fp)
 100aaac:	00000c06 	br	100aae0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100aab0:	e17fee04 	addi	r5,fp,-72
 100aab4:	e13ffd17 	ldw	r4,-12(fp)
 100aab8:	100a8fc0 	call	100a8fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100aabc:	e0bfef17 	ldw	r2,-68(fp)
 100aac0:	10880020 	cmpeqi	r2,r2,8192
 100aac4:	e0bffe15 	stw	r2,-8(fp)
 100aac8:	00000506 	br	100aae0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100aacc:	100aaf80 	call	100aaf8 <alt_get_errno>
 100aad0:	1007883a 	mov	r3,r2
 100aad4:	00801444 	movi	r2,81
 100aad8:	18800015 	stw	r2,0(r3)
    return 0;
 100aadc:	e03ffe15 	stw	zero,-8(fp)
 100aae0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100aae4:	e037883a 	mov	sp,fp
 100aae8:	dfc00117 	ldw	ra,4(sp)
 100aaec:	df000017 	ldw	fp,0(sp)
 100aaf0:	dec00204 	addi	sp,sp,8
 100aaf4:	f800283a 	ret

0100aaf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aaf8:	defffd04 	addi	sp,sp,-12
 100aafc:	dfc00215 	stw	ra,8(sp)
 100ab00:	df000115 	stw	fp,4(sp)
 100ab04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ab08:	00804074 	movhi	r2,257
 100ab0c:	10916104 	addi	r2,r2,17796
 100ab10:	10800017 	ldw	r2,0(r2)
 100ab14:	1005003a 	cmpeq	r2,r2,zero
 100ab18:	1000061e 	bne	r2,zero,100ab34 <alt_get_errno+0x3c>
 100ab1c:	00804074 	movhi	r2,257
 100ab20:	10916104 	addi	r2,r2,17796
 100ab24:	10800017 	ldw	r2,0(r2)
 100ab28:	103ee83a 	callr	r2
 100ab2c:	e0bfff15 	stw	r2,-4(fp)
 100ab30:	00000306 	br	100ab40 <alt_get_errno+0x48>
 100ab34:	00804074 	movhi	r2,257
 100ab38:	10984004 	addi	r2,r2,24832
 100ab3c:	e0bfff15 	stw	r2,-4(fp)
 100ab40:	e0bfff17 	ldw	r2,-4(fp)
}
 100ab44:	e037883a 	mov	sp,fp
 100ab48:	dfc00117 	ldw	ra,4(sp)
 100ab4c:	df000017 	ldw	fp,0(sp)
 100ab50:	dec00204 	addi	sp,sp,8
 100ab54:	f800283a 	ret

0100ab58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100ab58:	defffe04 	addi	sp,sp,-8
 100ab5c:	dfc00115 	stw	ra,4(sp)
 100ab60:	df000015 	stw	fp,0(sp)
 100ab64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100ab68:	01004074 	movhi	r4,257
 100ab6c:	21116604 	addi	r4,r4,17816
 100ab70:	01404074 	movhi	r5,257
 100ab74:	294a9204 	addi	r5,r5,10824
 100ab78:	01804074 	movhi	r6,257
 100ab7c:	31916604 	addi	r6,r6,17816
 100ab80:	100abd80 	call	100abd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100ab84:	01004034 	movhi	r4,256
 100ab88:	21000804 	addi	r4,r4,32
 100ab8c:	01404034 	movhi	r5,256
 100ab90:	29400804 	addi	r5,r5,32
 100ab94:	01804034 	movhi	r6,256
 100ab98:	31806d04 	addi	r6,r6,436
 100ab9c:	100abd80 	call	100abd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100aba0:	01004074 	movhi	r4,257
 100aba4:	21094b04 	addi	r4,r4,9516
 100aba8:	01404074 	movhi	r5,257
 100abac:	29494b04 	addi	r5,r5,9516
 100abb0:	01804074 	movhi	r6,257
 100abb4:	318a9204 	addi	r6,r6,10824
 100abb8:	100abd80 	call	100abd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100abbc:	10112b40 	call	10112b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100abc0:	10115400 	call	1011540 <alt_icache_flush_all>
}
 100abc4:	e037883a 	mov	sp,fp
 100abc8:	dfc00117 	ldw	ra,4(sp)
 100abcc:	df000017 	ldw	fp,0(sp)
 100abd0:	dec00204 	addi	sp,sp,8
 100abd4:	f800283a 	ret

0100abd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100abd8:	defffc04 	addi	sp,sp,-16
 100abdc:	df000315 	stw	fp,12(sp)
 100abe0:	df000304 	addi	fp,sp,12
 100abe4:	e13ffd15 	stw	r4,-12(fp)
 100abe8:	e17ffe15 	stw	r5,-8(fp)
 100abec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100abf0:	e0fffe17 	ldw	r3,-8(fp)
 100abf4:	e0bffd17 	ldw	r2,-12(fp)
 100abf8:	18800e26 	beq	r3,r2,100ac34 <alt_load_section+0x5c>
  {
    while( to != end )
 100abfc:	00000a06 	br	100ac28 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100ac00:	e0bffd17 	ldw	r2,-12(fp)
 100ac04:	10c00017 	ldw	r3,0(r2)
 100ac08:	e0bffe17 	ldw	r2,-8(fp)
 100ac0c:	10c00015 	stw	r3,0(r2)
 100ac10:	e0bffe17 	ldw	r2,-8(fp)
 100ac14:	10800104 	addi	r2,r2,4
 100ac18:	e0bffe15 	stw	r2,-8(fp)
 100ac1c:	e0bffd17 	ldw	r2,-12(fp)
 100ac20:	10800104 	addi	r2,r2,4
 100ac24:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100ac28:	e0fffe17 	ldw	r3,-8(fp)
 100ac2c:	e0bfff17 	ldw	r2,-4(fp)
 100ac30:	18bff31e 	bne	r3,r2,100ac00 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100ac34:	e037883a 	mov	sp,fp
 100ac38:	df000017 	ldw	fp,0(sp)
 100ac3c:	dec00104 	addi	sp,sp,4
 100ac40:	f800283a 	ret

0100ac44 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100ac44:	defff804 	addi	sp,sp,-32
 100ac48:	dfc00715 	stw	ra,28(sp)
 100ac4c:	df000615 	stw	fp,24(sp)
 100ac50:	df000604 	addi	fp,sp,24
 100ac54:	e13ffc15 	stw	r4,-16(fp)
 100ac58:	e17ffd15 	stw	r5,-12(fp)
 100ac5c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100ac60:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ac64:	e0bffc17 	ldw	r2,-16(fp)
 100ac68:	1004803a 	cmplt	r2,r2,zero
 100ac6c:	1000091e 	bne	r2,zero,100ac94 <lseek+0x50>
 100ac70:	e13ffc17 	ldw	r4,-16(fp)
 100ac74:	01400304 	movi	r5,12
 100ac78:	1000adc0 	call	1000adc <__mulsi3>
 100ac7c:	1007883a 	mov	r3,r2
 100ac80:	00804074 	movhi	r2,257
 100ac84:	108ca104 	addi	r2,r2,12932
 100ac88:	1887883a 	add	r3,r3,r2
 100ac8c:	e0ffff15 	stw	r3,-4(fp)
 100ac90:	00000106 	br	100ac98 <lseek+0x54>
 100ac94:	e03fff15 	stw	zero,-4(fp)
 100ac98:	e0bfff17 	ldw	r2,-4(fp)
 100ac9c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100aca0:	e0bffb17 	ldw	r2,-20(fp)
 100aca4:	1005003a 	cmpeq	r2,r2,zero
 100aca8:	1000111e 	bne	r2,zero,100acf0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100acac:	e0bffb17 	ldw	r2,-20(fp)
 100acb0:	10800017 	ldw	r2,0(r2)
 100acb4:	10800717 	ldw	r2,28(r2)
 100acb8:	1005003a 	cmpeq	r2,r2,zero
 100acbc:	1000091e 	bne	r2,zero,100ace4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100acc0:	e0bffb17 	ldw	r2,-20(fp)
 100acc4:	10800017 	ldw	r2,0(r2)
 100acc8:	10800717 	ldw	r2,28(r2)
 100accc:	e13ffb17 	ldw	r4,-20(fp)
 100acd0:	e17ffd17 	ldw	r5,-12(fp)
 100acd4:	e1bffe17 	ldw	r6,-8(fp)
 100acd8:	103ee83a 	callr	r2
 100acdc:	e0bffa15 	stw	r2,-24(fp)
 100ace0:	00000506 	br	100acf8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100ace4:	00bfde84 	movi	r2,-134
 100ace8:	e0bffa15 	stw	r2,-24(fp)
 100acec:	00000206 	br	100acf8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100acf0:	00bfebc4 	movi	r2,-81
 100acf4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100acf8:	e0bffa17 	ldw	r2,-24(fp)
 100acfc:	1004403a 	cmpge	r2,r2,zero
 100ad00:	1000071e 	bne	r2,zero,100ad20 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100ad04:	100ad380 	call	100ad38 <alt_get_errno>
 100ad08:	1007883a 	mov	r3,r2
 100ad0c:	e0bffa17 	ldw	r2,-24(fp)
 100ad10:	0085c83a 	sub	r2,zero,r2
 100ad14:	18800015 	stw	r2,0(r3)
    rc = -1;
 100ad18:	00bfffc4 	movi	r2,-1
 100ad1c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100ad20:	e0bffa17 	ldw	r2,-24(fp)
}
 100ad24:	e037883a 	mov	sp,fp
 100ad28:	dfc00117 	ldw	ra,4(sp)
 100ad2c:	df000017 	ldw	fp,0(sp)
 100ad30:	dec00204 	addi	sp,sp,8
 100ad34:	f800283a 	ret

0100ad38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ad38:	defffd04 	addi	sp,sp,-12
 100ad3c:	dfc00215 	stw	ra,8(sp)
 100ad40:	df000115 	stw	fp,4(sp)
 100ad44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ad48:	00804074 	movhi	r2,257
 100ad4c:	10916104 	addi	r2,r2,17796
 100ad50:	10800017 	ldw	r2,0(r2)
 100ad54:	1005003a 	cmpeq	r2,r2,zero
 100ad58:	1000061e 	bne	r2,zero,100ad74 <alt_get_errno+0x3c>
 100ad5c:	00804074 	movhi	r2,257
 100ad60:	10916104 	addi	r2,r2,17796
 100ad64:	10800017 	ldw	r2,0(r2)
 100ad68:	103ee83a 	callr	r2
 100ad6c:	e0bfff15 	stw	r2,-4(fp)
 100ad70:	00000306 	br	100ad80 <alt_get_errno+0x48>
 100ad74:	00804074 	movhi	r2,257
 100ad78:	10984004 	addi	r2,r2,24832
 100ad7c:	e0bfff15 	stw	r2,-4(fp)
 100ad80:	e0bfff17 	ldw	r2,-4(fp)
}
 100ad84:	e037883a 	mov	sp,fp
 100ad88:	dfc00117 	ldw	ra,4(sp)
 100ad8c:	df000017 	ldw	fp,0(sp)
 100ad90:	dec00204 	addi	sp,sp,8
 100ad94:	f800283a 	ret

0100ad98 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100ad98:	defffd04 	addi	sp,sp,-12
 100ad9c:	dfc00215 	stw	ra,8(sp)
 100ada0:	df000115 	stw	fp,4(sp)
 100ada4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100ada8:	0009883a 	mov	r4,zero
 100adac:	100b2800 	call	100b280 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100adb0:	100b2b40 	call	100b2b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100adb4:	01004074 	movhi	r4,257
 100adb8:	210a5f04 	addi	r4,r4,10620
 100adbc:	01404074 	movhi	r5,257
 100adc0:	294a5f04 	addi	r5,r5,10620
 100adc4:	01804074 	movhi	r6,257
 100adc8:	318a5f04 	addi	r6,r6,10620
 100adcc:	10119140 	call	1011914 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100add0:	10113e40 	call	10113e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100add4:	01004074 	movhi	r4,257
 100add8:	21051204 	addi	r4,r4,5192
 100addc:	10120b40 	call	10120b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ade0:	d126eb17 	ldw	r4,-25684(gp)
 100ade4:	d166ec17 	ldw	r5,-25680(gp)
 100ade8:	d1a6ed17 	ldw	r6,-25676(gp)
 100adec:	10001f00 	call	10001f0 <main>
 100adf0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100adf4:	01000044 	movi	r4,1
 100adf8:	100a7700 	call	100a770 <close>
  exit (result);
 100adfc:	e13fff17 	ldw	r4,-4(fp)
 100ae00:	10120c80 	call	10120c8 <exit>

0100ae04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100ae04:	defffe04 	addi	sp,sp,-8
 100ae08:	df000115 	stw	fp,4(sp)
 100ae0c:	df000104 	addi	fp,sp,4
 100ae10:	e13fff15 	stw	r4,-4(fp)
}
 100ae14:	e037883a 	mov	sp,fp
 100ae18:	df000017 	ldw	fp,0(sp)
 100ae1c:	dec00104 	addi	sp,sp,4
 100ae20:	f800283a 	ret

0100ae24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100ae24:	defffe04 	addi	sp,sp,-8
 100ae28:	df000115 	stw	fp,4(sp)
 100ae2c:	df000104 	addi	fp,sp,4
 100ae30:	e13fff15 	stw	r4,-4(fp)
}
 100ae34:	e037883a 	mov	sp,fp
 100ae38:	df000017 	ldw	fp,0(sp)
 100ae3c:	dec00104 	addi	sp,sp,4
 100ae40:	f800283a 	ret

0100ae44 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100ae44:	defff704 	addi	sp,sp,-36
 100ae48:	dfc00815 	stw	ra,32(sp)
 100ae4c:	df000715 	stw	fp,28(sp)
 100ae50:	df000704 	addi	fp,sp,28
 100ae54:	e13ffb15 	stw	r4,-20(fp)
 100ae58:	e17ffc15 	stw	r5,-16(fp)
 100ae5c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ae60:	e0bffb17 	ldw	r2,-20(fp)
 100ae64:	1004803a 	cmplt	r2,r2,zero
 100ae68:	1000091e 	bne	r2,zero,100ae90 <read+0x4c>
 100ae6c:	e13ffb17 	ldw	r4,-20(fp)
 100ae70:	01400304 	movi	r5,12
 100ae74:	1000adc0 	call	1000adc <__mulsi3>
 100ae78:	1007883a 	mov	r3,r2
 100ae7c:	00804074 	movhi	r2,257
 100ae80:	108ca104 	addi	r2,r2,12932
 100ae84:	1887883a 	add	r3,r3,r2
 100ae88:	e0ffff15 	stw	r3,-4(fp)
 100ae8c:	00000106 	br	100ae94 <read+0x50>
 100ae90:	e03fff15 	stw	zero,-4(fp)
 100ae94:	e0bfff17 	ldw	r2,-4(fp)
 100ae98:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100ae9c:	e0bffa17 	ldw	r2,-24(fp)
 100aea0:	1005003a 	cmpeq	r2,r2,zero
 100aea4:	1000241e 	bne	r2,zero,100af38 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100aea8:	e0bffa17 	ldw	r2,-24(fp)
 100aeac:	10800217 	ldw	r2,8(r2)
 100aeb0:	108000cc 	andi	r2,r2,3
 100aeb4:	10800060 	cmpeqi	r2,r2,1
 100aeb8:	10001a1e 	bne	r2,zero,100af24 <read+0xe0>
 100aebc:	e0bffa17 	ldw	r2,-24(fp)
 100aec0:	10800017 	ldw	r2,0(r2)
 100aec4:	10800517 	ldw	r2,20(r2)
 100aec8:	1005003a 	cmpeq	r2,r2,zero
 100aecc:	1000151e 	bne	r2,zero,100af24 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100aed0:	e0bffa17 	ldw	r2,-24(fp)
 100aed4:	10800017 	ldw	r2,0(r2)
 100aed8:	10800517 	ldw	r2,20(r2)
 100aedc:	e17ffc17 	ldw	r5,-16(fp)
 100aee0:	e1bffd17 	ldw	r6,-12(fp)
 100aee4:	e13ffa17 	ldw	r4,-24(fp)
 100aee8:	103ee83a 	callr	r2
 100aeec:	e0bff915 	stw	r2,-28(fp)
 100aef0:	e0bff917 	ldw	r2,-28(fp)
 100aef4:	1004403a 	cmpge	r2,r2,zero
 100aef8:	1000071e 	bne	r2,zero,100af18 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100aefc:	100af680 	call	100af68 <alt_get_errno>
 100af00:	e0fff917 	ldw	r3,-28(fp)
 100af04:	00c7c83a 	sub	r3,zero,r3
 100af08:	10c00015 	stw	r3,0(r2)
          return -1;
 100af0c:	00bfffc4 	movi	r2,-1
 100af10:	e0bffe15 	stw	r2,-8(fp)
 100af14:	00000e06 	br	100af50 <read+0x10c>
        }
        return rval;
 100af18:	e0bff917 	ldw	r2,-28(fp)
 100af1c:	e0bffe15 	stw	r2,-8(fp)
 100af20:	00000b06 	br	100af50 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100af24:	100af680 	call	100af68 <alt_get_errno>
 100af28:	1007883a 	mov	r3,r2
 100af2c:	00800344 	movi	r2,13
 100af30:	18800015 	stw	r2,0(r3)
 100af34:	00000406 	br	100af48 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100af38:	100af680 	call	100af68 <alt_get_errno>
 100af3c:	1007883a 	mov	r3,r2
 100af40:	00801444 	movi	r2,81
 100af44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100af48:	00bfffc4 	movi	r2,-1
 100af4c:	e0bffe15 	stw	r2,-8(fp)
 100af50:	e0bffe17 	ldw	r2,-8(fp)
}
 100af54:	e037883a 	mov	sp,fp
 100af58:	dfc00117 	ldw	ra,4(sp)
 100af5c:	df000017 	ldw	fp,0(sp)
 100af60:	dec00204 	addi	sp,sp,8
 100af64:	f800283a 	ret

0100af68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100af68:	defffd04 	addi	sp,sp,-12
 100af6c:	dfc00215 	stw	ra,8(sp)
 100af70:	df000115 	stw	fp,4(sp)
 100af74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100af78:	00804074 	movhi	r2,257
 100af7c:	10916104 	addi	r2,r2,17796
 100af80:	10800017 	ldw	r2,0(r2)
 100af84:	1005003a 	cmpeq	r2,r2,zero
 100af88:	1000061e 	bne	r2,zero,100afa4 <alt_get_errno+0x3c>
 100af8c:	00804074 	movhi	r2,257
 100af90:	10916104 	addi	r2,r2,17796
 100af94:	10800017 	ldw	r2,0(r2)
 100af98:	103ee83a 	callr	r2
 100af9c:	e0bfff15 	stw	r2,-4(fp)
 100afa0:	00000306 	br	100afb0 <alt_get_errno+0x48>
 100afa4:	00804074 	movhi	r2,257
 100afa8:	10984004 	addi	r2,r2,24832
 100afac:	e0bfff15 	stw	r2,-4(fp)
 100afb0:	e0bfff17 	ldw	r2,-4(fp)
}
 100afb4:	e037883a 	mov	sp,fp
 100afb8:	dfc00117 	ldw	ra,4(sp)
 100afbc:	df000017 	ldw	fp,0(sp)
 100afc0:	dec00204 	addi	sp,sp,8
 100afc4:	f800283a 	ret

0100afc8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100afc8:	defffc04 	addi	sp,sp,-16
 100afcc:	dfc00315 	stw	ra,12(sp)
 100afd0:	df000215 	stw	fp,8(sp)
 100afd4:	dc000115 	stw	r16,4(sp)
 100afd8:	df000104 	addi	fp,sp,4
 100afdc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100afe0:	e0bfff17 	ldw	r2,-4(fp)
 100afe4:	108000d0 	cmplti	r2,r2,3
 100afe8:	10000f1e 	bne	r2,zero,100b028 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100afec:	e13fff17 	ldw	r4,-4(fp)
 100aff0:	04004074 	movhi	r16,257
 100aff4:	840ca104 	addi	r16,r16,12932
 100aff8:	01400304 	movi	r5,12
 100affc:	1000adc0 	call	1000adc <__mulsi3>
 100b000:	1405883a 	add	r2,r2,r16
 100b004:	10800204 	addi	r2,r2,8
 100b008:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100b00c:	e13fff17 	ldw	r4,-4(fp)
 100b010:	04004074 	movhi	r16,257
 100b014:	840ca104 	addi	r16,r16,12932
 100b018:	01400304 	movi	r5,12
 100b01c:	1000adc0 	call	1000adc <__mulsi3>
 100b020:	1405883a 	add	r2,r2,r16
 100b024:	10000015 	stw	zero,0(r2)
  }
}
 100b028:	e037883a 	mov	sp,fp
 100b02c:	dfc00217 	ldw	ra,8(sp)
 100b030:	df000117 	ldw	fp,4(sp)
 100b034:	dc000017 	ldw	r16,0(sp)
 100b038:	dec00304 	addi	sp,sp,12
 100b03c:	f800283a 	ret

0100b040 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100b040:	defff804 	addi	sp,sp,-32
 100b044:	df000715 	stw	fp,28(sp)
 100b048:	df000704 	addi	fp,sp,28
 100b04c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b050:	0005303a 	rdctl	r2,status
 100b054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b058:	e0fffb17 	ldw	r3,-20(fp)
 100b05c:	00bfff84 	movi	r2,-2
 100b060:	1884703a 	and	r2,r3,r2
 100b064:	1001703a 	wrctl	status,r2
  
  return context;
 100b068:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100b06c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100b070:	d0a00c17 	ldw	r2,-32720(gp)
 100b074:	10c000c4 	addi	r3,r2,3
 100b078:	00bfff04 	movi	r2,-4
 100b07c:	1884703a 	and	r2,r3,r2
 100b080:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100b084:	d0e00c17 	ldw	r3,-32720(gp)
 100b088:	e0bffe17 	ldw	r2,-8(fp)
 100b08c:	1887883a 	add	r3,r3,r2
 100b090:	00806034 	movhi	r2,384
 100b094:	10800004 	addi	r2,r2,0
 100b098:	10c0072e 	bgeu	r2,r3,100b0b8 <sbrk+0x78>
 100b09c:	e0bffd17 	ldw	r2,-12(fp)
 100b0a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b0a4:	e0bffa17 	ldw	r2,-24(fp)
 100b0a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100b0ac:	00bfffc4 	movi	r2,-1
 100b0b0:	e0bfff15 	stw	r2,-4(fp)
 100b0b4:	00000c06 	br	100b0e8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100b0b8:	d0a00c17 	ldw	r2,-32720(gp)
 100b0bc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100b0c0:	d0e00c17 	ldw	r3,-32720(gp)
 100b0c4:	e0bffe17 	ldw	r2,-8(fp)
 100b0c8:	1885883a 	add	r2,r3,r2
 100b0cc:	d0a00c15 	stw	r2,-32720(gp)
 100b0d0:	e0bffd17 	ldw	r2,-12(fp)
 100b0d4:	e0bff915 	stw	r2,-28(fp)
 100b0d8:	e0bff917 	ldw	r2,-28(fp)
 100b0dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100b0e0:	e0bffc17 	ldw	r2,-16(fp)
 100b0e4:	e0bfff15 	stw	r2,-4(fp)
 100b0e8:	e0bfff17 	ldw	r2,-4(fp)
} 
 100b0ec:	e037883a 	mov	sp,fp
 100b0f0:	df000017 	ldw	fp,0(sp)
 100b0f4:	dec00104 	addi	sp,sp,4
 100b0f8:	f800283a 	ret

0100b0fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100b0fc:	defff704 	addi	sp,sp,-36
 100b100:	dfc00815 	stw	ra,32(sp)
 100b104:	df000715 	stw	fp,28(sp)
 100b108:	df000704 	addi	fp,sp,28
 100b10c:	e13ffb15 	stw	r4,-20(fp)
 100b110:	e17ffc15 	stw	r5,-16(fp)
 100b114:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b118:	e0bffb17 	ldw	r2,-20(fp)
 100b11c:	1004803a 	cmplt	r2,r2,zero
 100b120:	1000091e 	bne	r2,zero,100b148 <write+0x4c>
 100b124:	e13ffb17 	ldw	r4,-20(fp)
 100b128:	01400304 	movi	r5,12
 100b12c:	1000adc0 	call	1000adc <__mulsi3>
 100b130:	1007883a 	mov	r3,r2
 100b134:	00804074 	movhi	r2,257
 100b138:	108ca104 	addi	r2,r2,12932
 100b13c:	1887883a 	add	r3,r3,r2
 100b140:	e0ffff15 	stw	r3,-4(fp)
 100b144:	00000106 	br	100b14c <write+0x50>
 100b148:	e03fff15 	stw	zero,-4(fp)
 100b14c:	e0bfff17 	ldw	r2,-4(fp)
 100b150:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100b154:	e0bffa17 	ldw	r2,-24(fp)
 100b158:	1005003a 	cmpeq	r2,r2,zero
 100b15c:	1000241e 	bne	r2,zero,100b1f0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100b160:	e0bffa17 	ldw	r2,-24(fp)
 100b164:	10800217 	ldw	r2,8(r2)
 100b168:	108000cc 	andi	r2,r2,3
 100b16c:	1005003a 	cmpeq	r2,r2,zero
 100b170:	10001a1e 	bne	r2,zero,100b1dc <write+0xe0>
 100b174:	e0bffa17 	ldw	r2,-24(fp)
 100b178:	10800017 	ldw	r2,0(r2)
 100b17c:	10800617 	ldw	r2,24(r2)
 100b180:	1005003a 	cmpeq	r2,r2,zero
 100b184:	1000151e 	bne	r2,zero,100b1dc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100b188:	e0bffa17 	ldw	r2,-24(fp)
 100b18c:	10800017 	ldw	r2,0(r2)
 100b190:	10800617 	ldw	r2,24(r2)
 100b194:	e17ffc17 	ldw	r5,-16(fp)
 100b198:	e1bffd17 	ldw	r6,-12(fp)
 100b19c:	e13ffa17 	ldw	r4,-24(fp)
 100b1a0:	103ee83a 	callr	r2
 100b1a4:	e0bff915 	stw	r2,-28(fp)
 100b1a8:	e0bff917 	ldw	r2,-28(fp)
 100b1ac:	1004403a 	cmpge	r2,r2,zero
 100b1b0:	1000071e 	bne	r2,zero,100b1d0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100b1b4:	100b2200 	call	100b220 <alt_get_errno>
 100b1b8:	e0fff917 	ldw	r3,-28(fp)
 100b1bc:	00c7c83a 	sub	r3,zero,r3
 100b1c0:	10c00015 	stw	r3,0(r2)
        return -1;
 100b1c4:	00bfffc4 	movi	r2,-1
 100b1c8:	e0bffe15 	stw	r2,-8(fp)
 100b1cc:	00000e06 	br	100b208 <write+0x10c>
      }
      return rval;
 100b1d0:	e0bff917 	ldw	r2,-28(fp)
 100b1d4:	e0bffe15 	stw	r2,-8(fp)
 100b1d8:	00000b06 	br	100b208 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100b1dc:	100b2200 	call	100b220 <alt_get_errno>
 100b1e0:	1007883a 	mov	r3,r2
 100b1e4:	00800344 	movi	r2,13
 100b1e8:	18800015 	stw	r2,0(r3)
 100b1ec:	00000406 	br	100b200 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100b1f0:	100b2200 	call	100b220 <alt_get_errno>
 100b1f4:	1007883a 	mov	r3,r2
 100b1f8:	00801444 	movi	r2,81
 100b1fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100b200:	00bfffc4 	movi	r2,-1
 100b204:	e0bffe15 	stw	r2,-8(fp)
 100b208:	e0bffe17 	ldw	r2,-8(fp)
}
 100b20c:	e037883a 	mov	sp,fp
 100b210:	dfc00117 	ldw	ra,4(sp)
 100b214:	df000017 	ldw	fp,0(sp)
 100b218:	dec00204 	addi	sp,sp,8
 100b21c:	f800283a 	ret

0100b220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b220:	defffd04 	addi	sp,sp,-12
 100b224:	dfc00215 	stw	ra,8(sp)
 100b228:	df000115 	stw	fp,4(sp)
 100b22c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b230:	00804074 	movhi	r2,257
 100b234:	10916104 	addi	r2,r2,17796
 100b238:	10800017 	ldw	r2,0(r2)
 100b23c:	1005003a 	cmpeq	r2,r2,zero
 100b240:	1000061e 	bne	r2,zero,100b25c <alt_get_errno+0x3c>
 100b244:	00804074 	movhi	r2,257
 100b248:	10916104 	addi	r2,r2,17796
 100b24c:	10800017 	ldw	r2,0(r2)
 100b250:	103ee83a 	callr	r2
 100b254:	e0bfff15 	stw	r2,-4(fp)
 100b258:	00000306 	br	100b268 <alt_get_errno+0x48>
 100b25c:	00804074 	movhi	r2,257
 100b260:	10984004 	addi	r2,r2,24832
 100b264:	e0bfff15 	stw	r2,-4(fp)
 100b268:	e0bfff17 	ldw	r2,-4(fp)
}
 100b26c:	e037883a 	mov	sp,fp
 100b270:	dfc00117 	ldw	ra,4(sp)
 100b274:	df000017 	ldw	fp,0(sp)
 100b278:	dec00204 	addi	sp,sp,8
 100b27c:	f800283a 	ret

0100b280 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100b280:	defffd04 	addi	sp,sp,-12
 100b284:	dfc00215 	stw	ra,8(sp)
 100b288:	df000115 	stw	fp,4(sp)
 100b28c:	df000104 	addi	fp,sp,4
 100b290:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 100b294:	1011e140 	call	1011e14 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100b298:	00800044 	movi	r2,1
 100b29c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100b2a0:	e037883a 	mov	sp,fp
 100b2a4:	dfc00117 	ldw	ra,4(sp)
 100b2a8:	df000017 	ldw	fp,0(sp)
 100b2ac:	dec00204 	addi	sp,sp,8
 100b2b0:	f800283a 	ret

0100b2b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100b2b4:	defffd04 	addi	sp,sp,-12
 100b2b8:	dfc00215 	stw	ra,8(sp)
 100b2bc:	df000115 	stw	fp,4(sp)
 100b2c0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100b2c4:	01110004 	movi	r4,17408
 100b2c8:	000b883a 	mov	r5,zero
 100b2cc:	018000c4 	movi	r6,3
 100b2d0:	01c0fa04 	movi	r7,1000
 100b2d4:	100c15c0 	call	100c15c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 100b2d8:	00c04074 	movhi	r3,257
 100b2dc:	18d84404 	addi	r3,r3,24848
 100b2e0:	00910804 	movi	r2,17440
 100b2e4:	18800015 	stw	r2,0(r3)
 100b2e8:	00c04074 	movhi	r3,257
 100b2ec:	18d84504 	addi	r3,r3,24852
 100b2f0:	0080bef4 	movhi	r2,763
 100b2f4:	10bc2004 	addi	r2,r2,-3968
 100b2f8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100b2fc:	01004074 	movhi	r4,257
 100b300:	210d0b04 	addi	r4,r4,13356
 100b304:	000b883a 	mov	r5,zero
 100b308:	000d883a 	mov	r6,zero
 100b30c:	100b7880 	call	100b788 <altera_avalon_jtag_uart_init>
 100b310:	01004074 	movhi	r4,257
 100b314:	210d0104 	addi	r4,r4,13316
 100b318:	100b6080 	call	100b608 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100b31c:	01004074 	movhi	r4,257
 100b320:	21111904 	addi	r4,r4,17508
 100b324:	100c4040 	call	100c404 <alt_up_character_lcd_init>
 100b328:	01004074 	movhi	r4,257
 100b32c:	21111904 	addi	r4,r4,17508
 100b330:	100b6080 	call	100b608 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 100b334:	00804074 	movhi	r2,257
 100b338:	10912404 	addi	r2,r2,17552
 100b33c:	10800a17 	ldw	r2,40(r2)
 100b340:	10800104 	addi	r2,r2,4
 100b344:	10800017 	ldw	r2,0(r2)
 100b348:	10ffffcc 	andi	r3,r2,65535
 100b34c:	00804074 	movhi	r2,257
 100b350:	10912404 	addi	r2,r2,17552
 100b354:	10c00c15 	stw	r3,48(r2)
 100b358:	00804074 	movhi	r2,257
 100b35c:	10912404 	addi	r2,r2,17552
 100b360:	10800a17 	ldw	r2,40(r2)
 100b364:	10800104 	addi	r2,r2,4
 100b368:	10800017 	ldw	r2,0(r2)
 100b36c:	1005d43a 	srai	r2,r2,16
 100b370:	10ffffcc 	andi	r3,r2,65535
 100b374:	00804074 	movhi	r2,257
 100b378:	10912404 	addi	r2,r2,17552
 100b37c:	10c00d15 	stw	r3,52(r2)
 100b380:	00804074 	movhi	r2,257
 100b384:	10912404 	addi	r2,r2,17552
 100b388:	10800c17 	ldw	r2,48(r2)
 100b38c:	10801068 	cmpgeui	r2,r2,65
 100b390:	1000081e 	bne	r2,zero,100b3b4 <alt_sys_init+0x100>
 100b394:	00c04074 	movhi	r3,257
 100b398:	18d12404 	addi	r3,r3,17552
 100b39c:	00800fc4 	movi	r2,63
 100b3a0:	18800f15 	stw	r2,60(r3)
 100b3a4:	00c04074 	movhi	r3,257
 100b3a8:	18d12404 	addi	r3,r3,17552
 100b3ac:	00800184 	movi	r2,6
 100b3b0:	18801015 	stw	r2,64(r3)
 100b3b4:	00804074 	movhi	r2,257
 100b3b8:	10912404 	addi	r2,r2,17552
 100b3bc:	10800d17 	ldw	r2,52(r2)
 100b3c0:	10800868 	cmpgeui	r2,r2,33
 100b3c4:	1000041e 	bne	r2,zero,100b3d8 <alt_sys_init+0x124>
 100b3c8:	00c04074 	movhi	r3,257
 100b3cc:	18d12404 	addi	r3,r3,17552
 100b3d0:	008007c4 	movi	r2,31
 100b3d4:	18801115 	stw	r2,68(r3)
 100b3d8:	01004074 	movhi	r4,257
 100b3dc:	21112404 	addi	r4,r4,17552
 100b3e0:	100c8840 	call	100c884 <alt_up_char_buffer_init>
 100b3e4:	01004074 	movhi	r4,257
 100b3e8:	21112404 	addi	r4,r4,17552
 100b3ec:	100b6080 	call	100b608 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 100b3f0:	00804074 	movhi	r2,257
 100b3f4:	10913604 	addi	r2,r2,17624
 100b3f8:	10800a17 	ldw	r2,40(r2)
 100b3fc:	10800017 	ldw	r2,0(r2)
 100b400:	1007883a 	mov	r3,r2
 100b404:	00804074 	movhi	r2,257
 100b408:	10913604 	addi	r2,r2,17624
 100b40c:	10c00b15 	stw	r3,44(r2)
 100b410:	00804074 	movhi	r2,257
 100b414:	10913604 	addi	r2,r2,17624
 100b418:	10800a17 	ldw	r2,40(r2)
 100b41c:	10800104 	addi	r2,r2,4
 100b420:	10800017 	ldw	r2,0(r2)
 100b424:	1007883a 	mov	r3,r2
 100b428:	00804074 	movhi	r2,257
 100b42c:	10913604 	addi	r2,r2,17624
 100b430:	10c00c15 	stw	r3,48(r2)
 100b434:	00804074 	movhi	r2,257
 100b438:	10913604 	addi	r2,r2,17624
 100b43c:	10800a17 	ldw	r2,40(r2)
 100b440:	10800204 	addi	r2,r2,8
 100b444:	10800017 	ldw	r2,0(r2)
 100b448:	10ffffcc 	andi	r3,r2,65535
 100b44c:	00804074 	movhi	r2,257
 100b450:	10913604 	addi	r2,r2,17624
 100b454:	10c00f15 	stw	r3,60(r2)
 100b458:	00804074 	movhi	r2,257
 100b45c:	10913604 	addi	r2,r2,17624
 100b460:	10800a17 	ldw	r2,40(r2)
 100b464:	10800204 	addi	r2,r2,8
 100b468:	10800017 	ldw	r2,0(r2)
 100b46c:	1005d43a 	srai	r2,r2,16
 100b470:	10ffffcc 	andi	r3,r2,65535
 100b474:	00804074 	movhi	r2,257
 100b478:	10913604 	addi	r2,r2,17624
 100b47c:	10c01015 	stw	r3,64(r2)
 100b480:	00804074 	movhi	r2,257
 100b484:	10913604 	addi	r2,r2,17624
 100b488:	10800a17 	ldw	r2,40(r2)
 100b48c:	10800304 	addi	r2,r2,12
 100b490:	10800017 	ldw	r2,0(r2)
 100b494:	1005d07a 	srai	r2,r2,1
 100b498:	10c0004c 	andi	r3,r2,1
 100b49c:	00804074 	movhi	r2,257
 100b4a0:	10913604 	addi	r2,r2,17624
 100b4a4:	10c00d15 	stw	r3,52(r2)
 100b4a8:	00804074 	movhi	r2,257
 100b4ac:	10913604 	addi	r2,r2,17624
 100b4b0:	10800a17 	ldw	r2,40(r2)
 100b4b4:	10800304 	addi	r2,r2,12
 100b4b8:	10800017 	ldw	r2,0(r2)
 100b4bc:	1005d13a 	srai	r2,r2,4
 100b4c0:	10c003cc 	andi	r3,r2,15
 100b4c4:	00804074 	movhi	r2,257
 100b4c8:	10913604 	addi	r2,r2,17624
 100b4cc:	10c00e15 	stw	r3,56(r2)
 100b4d0:	00804074 	movhi	r2,257
 100b4d4:	10913604 	addi	r2,r2,17624
 100b4d8:	10800a17 	ldw	r2,40(r2)
 100b4dc:	10800304 	addi	r2,r2,12
 100b4e0:	10800017 	ldw	r2,0(r2)
 100b4e4:	1005d43a 	srai	r2,r2,16
 100b4e8:	1007883a 	mov	r3,r2
 100b4ec:	00bfffc4 	movi	r2,-1
 100b4f0:	1884703a 	and	r2,r3,r2
 100b4f4:	e0bfff45 	stb	r2,-3(fp)
 100b4f8:	00804074 	movhi	r2,257
 100b4fc:	10913604 	addi	r2,r2,17624
 100b500:	10800a17 	ldw	r2,40(r2)
 100b504:	10800304 	addi	r2,r2,12
 100b508:	10800017 	ldw	r2,0(r2)
 100b50c:	1005d63a 	srai	r2,r2,24
 100b510:	1007883a 	mov	r3,r2
 100b514:	00bfffc4 	movi	r2,-1
 100b518:	1884703a 	and	r2,r3,r2
 100b51c:	e0bfff05 	stb	r2,-4(fp)
 100b520:	00804074 	movhi	r2,257
 100b524:	10913604 	addi	r2,r2,17624
 100b528:	10800e17 	ldw	r2,56(r2)
 100b52c:	10800058 	cmpnei	r2,r2,1
 100b530:	1000041e 	bne	r2,zero,100b544 <alt_sys_init+0x290>
 100b534:	00804074 	movhi	r2,257
 100b538:	10913604 	addi	r2,r2,17624
 100b53c:	10001115 	stw	zero,68(r2)
 100b540:	00000e06 	br	100b57c <alt_sys_init+0x2c8>
 100b544:	00804074 	movhi	r2,257
 100b548:	10913604 	addi	r2,r2,17624
 100b54c:	10800e17 	ldw	r2,56(r2)
 100b550:	10800098 	cmpnei	r2,r2,2
 100b554:	1000051e 	bne	r2,zero,100b56c <alt_sys_init+0x2b8>
 100b558:	00c04074 	movhi	r3,257
 100b55c:	18d13604 	addi	r3,r3,17624
 100b560:	00800044 	movi	r2,1
 100b564:	18801115 	stw	r2,68(r3)
 100b568:	00000406 	br	100b57c <alt_sys_init+0x2c8>
 100b56c:	00c04074 	movhi	r3,257
 100b570:	18d13604 	addi	r3,r3,17624
 100b574:	00800084 	movi	r2,2
 100b578:	18801115 	stw	r2,68(r3)
 100b57c:	e0ffff43 	ldbu	r3,-3(fp)
 100b580:	00800804 	movi	r2,32
 100b584:	10c7c83a 	sub	r3,r2,r3
 100b588:	00bfffc4 	movi	r2,-1
 100b58c:	10c6d83a 	srl	r3,r2,r3
 100b590:	00804074 	movhi	r2,257
 100b594:	10913604 	addi	r2,r2,17624
 100b598:	10c01215 	stw	r3,72(r2)
 100b59c:	e0ffff43 	ldbu	r3,-3(fp)
 100b5a0:	00804074 	movhi	r2,257
 100b5a4:	10913604 	addi	r2,r2,17624
 100b5a8:	10801117 	ldw	r2,68(r2)
 100b5ac:	1887883a 	add	r3,r3,r2
 100b5b0:	00804074 	movhi	r2,257
 100b5b4:	10913604 	addi	r2,r2,17624
 100b5b8:	10c01315 	stw	r3,76(r2)
 100b5bc:	e0ffff03 	ldbu	r3,-4(fp)
 100b5c0:	00800804 	movi	r2,32
 100b5c4:	10c7c83a 	sub	r3,r2,r3
 100b5c8:	00bfffc4 	movi	r2,-1
 100b5cc:	10c6d83a 	srl	r3,r2,r3
 100b5d0:	00804074 	movhi	r2,257
 100b5d4:	10913604 	addi	r2,r2,17624
 100b5d8:	10c01415 	stw	r3,80(r2)
 100b5dc:	01004074 	movhi	r4,257
 100b5e0:	21113604 	addi	r4,r4,17624
 100b5e4:	100b6080 	call	100b608 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 100b5e8:	01004074 	movhi	r4,257
 100b5ec:	21114b04 	addi	r4,r4,17708
 100b5f0:	100b6080 	call	100b608 <alt_dev_reg>
}
 100b5f4:	e037883a 	mov	sp,fp
 100b5f8:	dfc00117 	ldw	ra,4(sp)
 100b5fc:	df000017 	ldw	fp,0(sp)
 100b600:	dec00204 	addi	sp,sp,8
 100b604:	f800283a 	ret

0100b608 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100b608:	defffd04 	addi	sp,sp,-12
 100b60c:	dfc00215 	stw	ra,8(sp)
 100b610:	df000115 	stw	fp,4(sp)
 100b614:	df000104 	addi	fp,sp,4
 100b618:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100b61c:	e13fff17 	ldw	r4,-4(fp)
 100b620:	01404074 	movhi	r5,257
 100b624:	29515e04 	addi	r5,r5,17784
 100b628:	10112d00 	call	10112d0 <alt_dev_llist_insert>
}
 100b62c:	e037883a 	mov	sp,fp
 100b630:	dfc00117 	ldw	ra,4(sp)
 100b634:	df000017 	ldw	fp,0(sp)
 100b638:	dec00204 	addi	sp,sp,8
 100b63c:	f800283a 	ret

0100b640 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100b640:	defffa04 	addi	sp,sp,-24
 100b644:	dfc00515 	stw	ra,20(sp)
 100b648:	df000415 	stw	fp,16(sp)
 100b64c:	df000404 	addi	fp,sp,16
 100b650:	e13ffd15 	stw	r4,-12(fp)
 100b654:	e17ffe15 	stw	r5,-8(fp)
 100b658:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b65c:	e0bffd17 	ldw	r2,-12(fp)
 100b660:	10800017 	ldw	r2,0(r2)
 100b664:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100b668:	e0bffc17 	ldw	r2,-16(fp)
 100b66c:	11000a04 	addi	r4,r2,40
 100b670:	e0bffd17 	ldw	r2,-12(fp)
 100b674:	11c00217 	ldw	r7,8(r2)
 100b678:	e17ffe17 	ldw	r5,-8(fp)
 100b67c:	e1bfff17 	ldw	r6,-4(fp)
 100b680:	100bc880 	call	100bc88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100b684:	e037883a 	mov	sp,fp
 100b688:	dfc00117 	ldw	ra,4(sp)
 100b68c:	df000017 	ldw	fp,0(sp)
 100b690:	dec00204 	addi	sp,sp,8
 100b694:	f800283a 	ret

0100b698 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100b698:	defffa04 	addi	sp,sp,-24
 100b69c:	dfc00515 	stw	ra,20(sp)
 100b6a0:	df000415 	stw	fp,16(sp)
 100b6a4:	df000404 	addi	fp,sp,16
 100b6a8:	e13ffd15 	stw	r4,-12(fp)
 100b6ac:	e17ffe15 	stw	r5,-8(fp)
 100b6b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b6b4:	e0bffd17 	ldw	r2,-12(fp)
 100b6b8:	10800017 	ldw	r2,0(r2)
 100b6bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100b6c0:	e0bffc17 	ldw	r2,-16(fp)
 100b6c4:	11000a04 	addi	r4,r2,40
 100b6c8:	e0bffd17 	ldw	r2,-12(fp)
 100b6cc:	11c00217 	ldw	r7,8(r2)
 100b6d0:	e17ffe17 	ldw	r5,-8(fp)
 100b6d4:	e1bfff17 	ldw	r6,-4(fp)
 100b6d8:	100beac0 	call	100beac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100b6dc:	e037883a 	mov	sp,fp
 100b6e0:	dfc00117 	ldw	ra,4(sp)
 100b6e4:	df000017 	ldw	fp,0(sp)
 100b6e8:	dec00204 	addi	sp,sp,8
 100b6ec:	f800283a 	ret

0100b6f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100b6f0:	defffc04 	addi	sp,sp,-16
 100b6f4:	dfc00315 	stw	ra,12(sp)
 100b6f8:	df000215 	stw	fp,8(sp)
 100b6fc:	df000204 	addi	fp,sp,8
 100b700:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b704:	e0bfff17 	ldw	r2,-4(fp)
 100b708:	10800017 	ldw	r2,0(r2)
 100b70c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100b710:	e0bffe17 	ldw	r2,-8(fp)
 100b714:	11000a04 	addi	r4,r2,40
 100b718:	e0bfff17 	ldw	r2,-4(fp)
 100b71c:	11400217 	ldw	r5,8(r2)
 100b720:	100bb200 	call	100bb20 <altera_avalon_jtag_uart_close>
}
 100b724:	e037883a 	mov	sp,fp
 100b728:	dfc00117 	ldw	ra,4(sp)
 100b72c:	df000017 	ldw	fp,0(sp)
 100b730:	dec00204 	addi	sp,sp,8
 100b734:	f800283a 	ret

0100b738 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100b738:	defffa04 	addi	sp,sp,-24
 100b73c:	dfc00515 	stw	ra,20(sp)
 100b740:	df000415 	stw	fp,16(sp)
 100b744:	df000404 	addi	fp,sp,16
 100b748:	e13ffd15 	stw	r4,-12(fp)
 100b74c:	e17ffe15 	stw	r5,-8(fp)
 100b750:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100b754:	e0bffd17 	ldw	r2,-12(fp)
 100b758:	10800017 	ldw	r2,0(r2)
 100b75c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100b760:	e0bffc17 	ldw	r2,-16(fp)
 100b764:	11000a04 	addi	r4,r2,40
 100b768:	e17ffe17 	ldw	r5,-8(fp)
 100b76c:	e1bfff17 	ldw	r6,-4(fp)
 100b770:	100bb940 	call	100bb94 <altera_avalon_jtag_uart_ioctl>
}
 100b774:	e037883a 	mov	sp,fp
 100b778:	dfc00117 	ldw	ra,4(sp)
 100b77c:	df000017 	ldw	fp,0(sp)
 100b780:	dec00204 	addi	sp,sp,8
 100b784:	f800283a 	ret

0100b788 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100b788:	defffa04 	addi	sp,sp,-24
 100b78c:	dfc00515 	stw	ra,20(sp)
 100b790:	df000415 	stw	fp,16(sp)
 100b794:	df000404 	addi	fp,sp,16
 100b798:	e13ffd15 	stw	r4,-12(fp)
 100b79c:	e17ffe15 	stw	r5,-8(fp)
 100b7a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b7a4:	e0fffd17 	ldw	r3,-12(fp)
 100b7a8:	00800044 	movi	r2,1
 100b7ac:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100b7b0:	e0bffd17 	ldw	r2,-12(fp)
 100b7b4:	10800017 	ldw	r2,0(r2)
 100b7b8:	11000104 	addi	r4,r2,4
 100b7bc:	e0bffd17 	ldw	r2,-12(fp)
 100b7c0:	10800817 	ldw	r2,32(r2)
 100b7c4:	1007883a 	mov	r3,r2
 100b7c8:	2005883a 	mov	r2,r4
 100b7cc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100b7d0:	e13ffe17 	ldw	r4,-8(fp)
 100b7d4:	e17fff17 	ldw	r5,-4(fp)
 100b7d8:	d8000015 	stw	zero,0(sp)
 100b7dc:	01804074 	movhi	r6,257
 100b7e0:	31ae1204 	addi	r6,r6,-18360
 100b7e4:	e1fffd17 	ldw	r7,-12(fp)
 100b7e8:	10115700 	call	1011570 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100b7ec:	e0bffd17 	ldw	r2,-12(fp)
 100b7f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100b7f4:	e0bffd17 	ldw	r2,-12(fp)
 100b7f8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100b7fc:	00804074 	movhi	r2,257
 100b800:	10985404 	addi	r2,r2,24912
 100b804:	10800017 	ldw	r2,0(r2)
 100b808:	100b883a 	mov	r5,r2
 100b80c:	01804074 	movhi	r6,257
 100b810:	31ae9c04 	addi	r6,r6,-17808
 100b814:	e1fffd17 	ldw	r7,-12(fp)
 100b818:	10111600 	call	1011160 <alt_alarm_start>
 100b81c:	1004403a 	cmpge	r2,r2,zero
 100b820:	1000041e 	bne	r2,zero,100b834 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100b824:	e0fffd17 	ldw	r3,-12(fp)
 100b828:	00a00034 	movhi	r2,32768
 100b82c:	10bfffc4 	addi	r2,r2,-1
 100b830:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100b834:	e037883a 	mov	sp,fp
 100b838:	dfc00117 	ldw	ra,4(sp)
 100b83c:	df000017 	ldw	fp,0(sp)
 100b840:	dec00204 	addi	sp,sp,8
 100b844:	f800283a 	ret

0100b848 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100b848:	defff804 	addi	sp,sp,-32
 100b84c:	df000715 	stw	fp,28(sp)
 100b850:	df000704 	addi	fp,sp,28
 100b854:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100b858:	e0bfff17 	ldw	r2,-4(fp)
 100b85c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100b860:	e0bffe17 	ldw	r2,-8(fp)
 100b864:	10800017 	ldw	r2,0(r2)
 100b868:	e0bffd15 	stw	r2,-12(fp)
 100b86c:	00000006 	br	100b870 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100b870:	e0bffd17 	ldw	r2,-12(fp)
 100b874:	10800104 	addi	r2,r2,4
 100b878:	10800037 	ldwio	r2,0(r2)
 100b87c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100b880:	e0bffc17 	ldw	r2,-16(fp)
 100b884:	1080c00c 	andi	r2,r2,768
 100b888:	1005003a 	cmpeq	r2,r2,zero
 100b88c:	1000741e 	bne	r2,zero,100ba60 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100b890:	e0bffc17 	ldw	r2,-16(fp)
 100b894:	1080400c 	andi	r2,r2,256
 100b898:	1005003a 	cmpeq	r2,r2,zero
 100b89c:	1000351e 	bne	r2,zero,100b974 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100b8a0:	00800074 	movhi	r2,1
 100b8a4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b8a8:	e0bffe17 	ldw	r2,-8(fp)
 100b8ac:	10800a17 	ldw	r2,40(r2)
 100b8b0:	10800044 	addi	r2,r2,1
 100b8b4:	1081ffcc 	andi	r2,r2,2047
 100b8b8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100b8bc:	e0bffe17 	ldw	r2,-8(fp)
 100b8c0:	10c00b17 	ldw	r3,44(r2)
 100b8c4:	e0bffa17 	ldw	r2,-24(fp)
 100b8c8:	18801626 	beq	r3,r2,100b924 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100b8cc:	e0bffd17 	ldw	r2,-12(fp)
 100b8d0:	10800037 	ldwio	r2,0(r2)
 100b8d4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100b8d8:	e0bffb17 	ldw	r2,-20(fp)
 100b8dc:	10a0000c 	andi	r2,r2,32768
 100b8e0:	1005003a 	cmpeq	r2,r2,zero
 100b8e4:	10000f1e 	bne	r2,zero,100b924 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100b8e8:	e0bffe17 	ldw	r2,-8(fp)
 100b8ec:	10c00a17 	ldw	r3,40(r2)
 100b8f0:	e0bffb17 	ldw	r2,-20(fp)
 100b8f4:	1009883a 	mov	r4,r2
 100b8f8:	e0bffe17 	ldw	r2,-8(fp)
 100b8fc:	1885883a 	add	r2,r3,r2
 100b900:	10800e04 	addi	r2,r2,56
 100b904:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b908:	e0bffe17 	ldw	r2,-8(fp)
 100b90c:	10800a17 	ldw	r2,40(r2)
 100b910:	10800044 	addi	r2,r2,1
 100b914:	10c1ffcc 	andi	r3,r2,2047
 100b918:	e0bffe17 	ldw	r2,-8(fp)
 100b91c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100b920:	003fe106 	br	100b8a8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100b924:	e0bffb17 	ldw	r2,-20(fp)
 100b928:	10bfffec 	andhi	r2,r2,65535
 100b92c:	1005003a 	cmpeq	r2,r2,zero
 100b930:	1000101e 	bne	r2,zero,100b974 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b934:	e0bffe17 	ldw	r2,-8(fp)
 100b938:	10c00817 	ldw	r3,32(r2)
 100b93c:	00bfff84 	movi	r2,-2
 100b940:	1886703a 	and	r3,r3,r2
 100b944:	e0bffe17 	ldw	r2,-8(fp)
 100b948:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100b94c:	e0bffd17 	ldw	r2,-12(fp)
 100b950:	11000104 	addi	r4,r2,4
 100b954:	e0bffe17 	ldw	r2,-8(fp)
 100b958:	10800817 	ldw	r2,32(r2)
 100b95c:	1007883a 	mov	r3,r2
 100b960:	2005883a 	mov	r2,r4
 100b964:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100b968:	e0bffd17 	ldw	r2,-12(fp)
 100b96c:	10800104 	addi	r2,r2,4
 100b970:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100b974:	e0bffc17 	ldw	r2,-16(fp)
 100b978:	1080800c 	andi	r2,r2,512
 100b97c:	1005003a 	cmpeq	r2,r2,zero
 100b980:	103fbb1e 	bne	r2,zero,100b870 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100b984:	e0bffc17 	ldw	r2,-16(fp)
 100b988:	10bfffec 	andhi	r2,r2,65535
 100b98c:	1004d43a 	srli	r2,r2,16
 100b990:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100b994:	00001506 	br	100b9ec <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100b998:	e13ffd17 	ldw	r4,-12(fp)
 100b99c:	e0bffe17 	ldw	r2,-8(fp)
 100b9a0:	10c00d17 	ldw	r3,52(r2)
 100b9a4:	e0bffe17 	ldw	r2,-8(fp)
 100b9a8:	1885883a 	add	r2,r3,r2
 100b9ac:	10820e04 	addi	r2,r2,2104
 100b9b0:	10800003 	ldbu	r2,0(r2)
 100b9b4:	10c03fcc 	andi	r3,r2,255
 100b9b8:	18c0201c 	xori	r3,r3,128
 100b9bc:	18ffe004 	addi	r3,r3,-128
 100b9c0:	2005883a 	mov	r2,r4
 100b9c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b9c8:	e0bffe17 	ldw	r2,-8(fp)
 100b9cc:	10800d17 	ldw	r2,52(r2)
 100b9d0:	10800044 	addi	r2,r2,1
 100b9d4:	10c1ffcc 	andi	r3,r2,2047
 100b9d8:	e0bffe17 	ldw	r2,-8(fp)
 100b9dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100b9e0:	e0bff917 	ldw	r2,-28(fp)
 100b9e4:	10bfffc4 	addi	r2,r2,-1
 100b9e8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100b9ec:	e0bff917 	ldw	r2,-28(fp)
 100b9f0:	1005003a 	cmpeq	r2,r2,zero
 100b9f4:	1000051e 	bne	r2,zero,100ba0c <altera_avalon_jtag_uart_irq+0x1c4>
 100b9f8:	e0bffe17 	ldw	r2,-8(fp)
 100b9fc:	10c00d17 	ldw	r3,52(r2)
 100ba00:	e0bffe17 	ldw	r2,-8(fp)
 100ba04:	10800c17 	ldw	r2,48(r2)
 100ba08:	18bfe31e 	bne	r3,r2,100b998 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100ba0c:	e0bff917 	ldw	r2,-28(fp)
 100ba10:	1005003a 	cmpeq	r2,r2,zero
 100ba14:	103f961e 	bne	r2,zero,100b870 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100ba18:	e0bffe17 	ldw	r2,-8(fp)
 100ba1c:	10c00817 	ldw	r3,32(r2)
 100ba20:	00bfff44 	movi	r2,-3
 100ba24:	1886703a 	and	r3,r3,r2
 100ba28:	e0bffe17 	ldw	r2,-8(fp)
 100ba2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100ba30:	e0bffe17 	ldw	r2,-8(fp)
 100ba34:	10800017 	ldw	r2,0(r2)
 100ba38:	11000104 	addi	r4,r2,4
 100ba3c:	e0bffe17 	ldw	r2,-8(fp)
 100ba40:	10800817 	ldw	r2,32(r2)
 100ba44:	1007883a 	mov	r3,r2
 100ba48:	2005883a 	mov	r2,r4
 100ba4c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ba50:	e0bffd17 	ldw	r2,-12(fp)
 100ba54:	10800104 	addi	r2,r2,4
 100ba58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100ba5c:	003f8406 	br	100b870 <altera_avalon_jtag_uart_irq+0x28>
}
 100ba60:	e037883a 	mov	sp,fp
 100ba64:	df000017 	ldw	fp,0(sp)
 100ba68:	dec00104 	addi	sp,sp,4
 100ba6c:	f800283a 	ret

0100ba70 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100ba70:	defffc04 	addi	sp,sp,-16
 100ba74:	df000315 	stw	fp,12(sp)
 100ba78:	df000304 	addi	fp,sp,12
 100ba7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100ba80:	e0bfff17 	ldw	r2,-4(fp)
 100ba84:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100ba88:	e0bffe17 	ldw	r2,-8(fp)
 100ba8c:	10800017 	ldw	r2,0(r2)
 100ba90:	10800104 	addi	r2,r2,4
 100ba94:	10800037 	ldwio	r2,0(r2)
 100ba98:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100ba9c:	e0bffd17 	ldw	r2,-12(fp)
 100baa0:	1081000c 	andi	r2,r2,1024
 100baa4:	1005003a 	cmpeq	r2,r2,zero
 100baa8:	10000c1e 	bne	r2,zero,100badc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100baac:	e0bffe17 	ldw	r2,-8(fp)
 100bab0:	10800017 	ldw	r2,0(r2)
 100bab4:	11000104 	addi	r4,r2,4
 100bab8:	e0bffe17 	ldw	r2,-8(fp)
 100babc:	10800817 	ldw	r2,32(r2)
 100bac0:	10810014 	ori	r2,r2,1024
 100bac4:	1007883a 	mov	r3,r2
 100bac8:	2005883a 	mov	r2,r4
 100bacc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100bad0:	e0bffe17 	ldw	r2,-8(fp)
 100bad4:	10000915 	stw	zero,36(r2)
 100bad8:	00000a06 	br	100bb04 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100badc:	e0bffe17 	ldw	r2,-8(fp)
 100bae0:	10c00917 	ldw	r3,36(r2)
 100bae4:	00a00034 	movhi	r2,32768
 100bae8:	10bfff04 	addi	r2,r2,-4
 100baec:	10c00536 	bltu	r2,r3,100bb04 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100baf0:	e0bffe17 	ldw	r2,-8(fp)
 100baf4:	10800917 	ldw	r2,36(r2)
 100baf8:	10c00044 	addi	r3,r2,1
 100bafc:	e0bffe17 	ldw	r2,-8(fp)
 100bb00:	10c00915 	stw	r3,36(r2)
 100bb04:	00804074 	movhi	r2,257
 100bb08:	10985404 	addi	r2,r2,24912
 100bb0c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100bb10:	e037883a 	mov	sp,fp
 100bb14:	df000017 	ldw	fp,0(sp)
 100bb18:	dec00104 	addi	sp,sp,4
 100bb1c:	f800283a 	ret

0100bb20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100bb20:	defffc04 	addi	sp,sp,-16
 100bb24:	df000315 	stw	fp,12(sp)
 100bb28:	df000304 	addi	fp,sp,12
 100bb2c:	e13ffd15 	stw	r4,-12(fp)
 100bb30:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100bb34:	00000706 	br	100bb54 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100bb38:	e0bffe17 	ldw	r2,-8(fp)
 100bb3c:	1090000c 	andi	r2,r2,16384
 100bb40:	1005003a 	cmpeq	r2,r2,zero
 100bb44:	1000031e 	bne	r2,zero,100bb54 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100bb48:	00bffd44 	movi	r2,-11
 100bb4c:	e0bfff15 	stw	r2,-4(fp)
 100bb50:	00000b06 	br	100bb80 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100bb54:	e0bffd17 	ldw	r2,-12(fp)
 100bb58:	10c00d17 	ldw	r3,52(r2)
 100bb5c:	e0bffd17 	ldw	r2,-12(fp)
 100bb60:	10800c17 	ldw	r2,48(r2)
 100bb64:	18800526 	beq	r3,r2,100bb7c <altera_avalon_jtag_uart_close+0x5c>
 100bb68:	e0bffd17 	ldw	r2,-12(fp)
 100bb6c:	10c00917 	ldw	r3,36(r2)
 100bb70:	e0bffd17 	ldw	r2,-12(fp)
 100bb74:	10800117 	ldw	r2,4(r2)
 100bb78:	18bfef36 	bltu	r3,r2,100bb38 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100bb7c:	e03fff15 	stw	zero,-4(fp)
 100bb80:	e0bfff17 	ldw	r2,-4(fp)
}
 100bb84:	e037883a 	mov	sp,fp
 100bb88:	df000017 	ldw	fp,0(sp)
 100bb8c:	dec00104 	addi	sp,sp,4
 100bb90:	f800283a 	ret

0100bb94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100bb94:	defff804 	addi	sp,sp,-32
 100bb98:	df000715 	stw	fp,28(sp)
 100bb9c:	df000704 	addi	fp,sp,28
 100bba0:	e13ffb15 	stw	r4,-20(fp)
 100bba4:	e17ffc15 	stw	r5,-16(fp)
 100bba8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100bbac:	00bff9c4 	movi	r2,-25
 100bbb0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100bbb4:	e0bffc17 	ldw	r2,-16(fp)
 100bbb8:	e0bfff15 	stw	r2,-4(fp)
 100bbbc:	e0ffff17 	ldw	r3,-4(fp)
 100bbc0:	189a8060 	cmpeqi	r2,r3,27137
 100bbc4:	1000041e 	bne	r2,zero,100bbd8 <altera_avalon_jtag_uart_ioctl+0x44>
 100bbc8:	e0ffff17 	ldw	r3,-4(fp)
 100bbcc:	189a80a0 	cmpeqi	r2,r3,27138
 100bbd0:	10001b1e 	bne	r2,zero,100bc40 <altera_avalon_jtag_uart_ioctl+0xac>
 100bbd4:	00002706 	br	100bc74 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100bbd8:	e0bffb17 	ldw	r2,-20(fp)
 100bbdc:	10c00117 	ldw	r3,4(r2)
 100bbe0:	00a00034 	movhi	r2,32768
 100bbe4:	10bfffc4 	addi	r2,r2,-1
 100bbe8:	18802226 	beq	r3,r2,100bc74 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100bbec:	e0bffd17 	ldw	r2,-12(fp)
 100bbf0:	10800017 	ldw	r2,0(r2)
 100bbf4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100bbf8:	e0bff917 	ldw	r2,-28(fp)
 100bbfc:	10800090 	cmplti	r2,r2,2
 100bc00:	1000071e 	bne	r2,zero,100bc20 <altera_avalon_jtag_uart_ioctl+0x8c>
 100bc04:	e0fff917 	ldw	r3,-28(fp)
 100bc08:	00a00034 	movhi	r2,32768
 100bc0c:	10bfffc4 	addi	r2,r2,-1
 100bc10:	18800326 	beq	r3,r2,100bc20 <altera_avalon_jtag_uart_ioctl+0x8c>
 100bc14:	e0bff917 	ldw	r2,-28(fp)
 100bc18:	e0bffe15 	stw	r2,-8(fp)
 100bc1c:	00000306 	br	100bc2c <altera_avalon_jtag_uart_ioctl+0x98>
 100bc20:	00e00034 	movhi	r3,32768
 100bc24:	18ffff84 	addi	r3,r3,-2
 100bc28:	e0fffe15 	stw	r3,-8(fp)
 100bc2c:	e0bffb17 	ldw	r2,-20(fp)
 100bc30:	e0fffe17 	ldw	r3,-8(fp)
 100bc34:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100bc38:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100bc3c:	00000d06 	br	100bc74 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100bc40:	e0bffb17 	ldw	r2,-20(fp)
 100bc44:	10c00117 	ldw	r3,4(r2)
 100bc48:	00a00034 	movhi	r2,32768
 100bc4c:	10bfffc4 	addi	r2,r2,-1
 100bc50:	18800826 	beq	r3,r2,100bc74 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100bc54:	e13ffd17 	ldw	r4,-12(fp)
 100bc58:	e0bffb17 	ldw	r2,-20(fp)
 100bc5c:	10c00917 	ldw	r3,36(r2)
 100bc60:	e0bffb17 	ldw	r2,-20(fp)
 100bc64:	10800117 	ldw	r2,4(r2)
 100bc68:	1885803a 	cmpltu	r2,r3,r2
 100bc6c:	20800015 	stw	r2,0(r4)
      rc = 0;
 100bc70:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100bc74:	e0bffa17 	ldw	r2,-24(fp)
}
 100bc78:	e037883a 	mov	sp,fp
 100bc7c:	df000017 	ldw	fp,0(sp)
 100bc80:	dec00104 	addi	sp,sp,4
 100bc84:	f800283a 	ret

0100bc88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100bc88:	defff204 	addi	sp,sp,-56
 100bc8c:	dfc00d15 	stw	ra,52(sp)
 100bc90:	df000c15 	stw	fp,48(sp)
 100bc94:	df000c04 	addi	fp,sp,48
 100bc98:	e13ffb15 	stw	r4,-20(fp)
 100bc9c:	e17ffc15 	stw	r5,-16(fp)
 100bca0:	e1bffd15 	stw	r6,-12(fp)
 100bca4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100bca8:	e0bffc17 	ldw	r2,-16(fp)
 100bcac:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100bcb0:	00004806 	br	100bdd4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100bcb4:	e0bffb17 	ldw	r2,-20(fp)
 100bcb8:	10800a17 	ldw	r2,40(r2)
 100bcbc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100bcc0:	e0bffb17 	ldw	r2,-20(fp)
 100bcc4:	10800b17 	ldw	r2,44(r2)
 100bcc8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100bccc:	e0fff717 	ldw	r3,-36(fp)
 100bcd0:	e0bff617 	ldw	r2,-40(fp)
 100bcd4:	18800536 	bltu	r3,r2,100bcec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100bcd8:	e0bff717 	ldw	r2,-36(fp)
 100bcdc:	e0fff617 	ldw	r3,-40(fp)
 100bce0:	10c5c83a 	sub	r2,r2,r3
 100bce4:	e0bff815 	stw	r2,-32(fp)
 100bce8:	00000406 	br	100bcfc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100bcec:	00820004 	movi	r2,2048
 100bcf0:	e0fff617 	ldw	r3,-40(fp)
 100bcf4:	10c5c83a 	sub	r2,r2,r3
 100bcf8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100bcfc:	e0bff817 	ldw	r2,-32(fp)
 100bd00:	1005003a 	cmpeq	r2,r2,zero
 100bd04:	10001f1e 	bne	r2,zero,100bd84 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100bd08:	e0fffd17 	ldw	r3,-12(fp)
 100bd0c:	e0bff817 	ldw	r2,-32(fp)
 100bd10:	1880022e 	bgeu	r3,r2,100bd1c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100bd14:	e0bffd17 	ldw	r2,-12(fp)
 100bd18:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100bd1c:	e0bffb17 	ldw	r2,-20(fp)
 100bd20:	10c00e04 	addi	r3,r2,56
 100bd24:	e0bff617 	ldw	r2,-40(fp)
 100bd28:	1887883a 	add	r3,r3,r2
 100bd2c:	e0bffa17 	ldw	r2,-24(fp)
 100bd30:	1009883a 	mov	r4,r2
 100bd34:	180b883a 	mov	r5,r3
 100bd38:	e1bff817 	ldw	r6,-32(fp)
 100bd3c:	10064e00 	call	10064e0 <memcpy>
      ptr   += n;
 100bd40:	e0fff817 	ldw	r3,-32(fp)
 100bd44:	e0bffa17 	ldw	r2,-24(fp)
 100bd48:	10c5883a 	add	r2,r2,r3
 100bd4c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100bd50:	e0fffd17 	ldw	r3,-12(fp)
 100bd54:	e0bff817 	ldw	r2,-32(fp)
 100bd58:	1885c83a 	sub	r2,r3,r2
 100bd5c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bd60:	e0fff617 	ldw	r3,-40(fp)
 100bd64:	e0bff817 	ldw	r2,-32(fp)
 100bd68:	1885883a 	add	r2,r3,r2
 100bd6c:	10c1ffcc 	andi	r3,r2,2047
 100bd70:	e0bffb17 	ldw	r2,-20(fp)
 100bd74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100bd78:	e0bffd17 	ldw	r2,-12(fp)
 100bd7c:	10800048 	cmpgei	r2,r2,1
 100bd80:	103fcc1e 	bne	r2,zero,100bcb4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100bd84:	e0fffa17 	ldw	r3,-24(fp)
 100bd88:	e0bffc17 	ldw	r2,-16(fp)
 100bd8c:	1880141e 	bne	r3,r2,100bde0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100bd90:	e0bffe17 	ldw	r2,-8(fp)
 100bd94:	1090000c 	andi	r2,r2,16384
 100bd98:	1004c03a 	cmpne	r2,r2,zero
 100bd9c:	1000101e 	bne	r2,zero,100bde0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100bda0:	e0bffb17 	ldw	r2,-20(fp)
 100bda4:	10c00a17 	ldw	r3,40(r2)
 100bda8:	e0bff717 	ldw	r2,-36(fp)
 100bdac:	1880051e 	bne	r3,r2,100bdc4 <altera_avalon_jtag_uart_read+0x13c>
 100bdb0:	e0bffb17 	ldw	r2,-20(fp)
 100bdb4:	10c00917 	ldw	r3,36(r2)
 100bdb8:	e0bffb17 	ldw	r2,-20(fp)
 100bdbc:	10800117 	ldw	r2,4(r2)
 100bdc0:	18bff736 	bltu	r3,r2,100bda0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100bdc4:	e0bffb17 	ldw	r2,-20(fp)
 100bdc8:	10c00a17 	ldw	r3,40(r2)
 100bdcc:	e0bff717 	ldw	r2,-36(fp)
 100bdd0:	18800326 	beq	r3,r2,100bde0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100bdd4:	e0bffd17 	ldw	r2,-12(fp)
 100bdd8:	10800048 	cmpgei	r2,r2,1
 100bddc:	103fb51e 	bne	r2,zero,100bcb4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100bde0:	e0fffa17 	ldw	r3,-24(fp)
 100bde4:	e0bffc17 	ldw	r2,-16(fp)
 100bde8:	18801926 	beq	r3,r2,100be50 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bdec:	0005303a 	rdctl	r2,status
 100bdf0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bdf4:	e0fff517 	ldw	r3,-44(fp)
 100bdf8:	00bfff84 	movi	r2,-2
 100bdfc:	1884703a 	and	r2,r3,r2
 100be00:	1001703a 	wrctl	status,r2
  
  return context;
 100be04:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100be08:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100be0c:	e0bffb17 	ldw	r2,-20(fp)
 100be10:	10800817 	ldw	r2,32(r2)
 100be14:	10c00054 	ori	r3,r2,1
 100be18:	e0bffb17 	ldw	r2,-20(fp)
 100be1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100be20:	e0bffb17 	ldw	r2,-20(fp)
 100be24:	10800017 	ldw	r2,0(r2)
 100be28:	11000104 	addi	r4,r2,4
 100be2c:	e0bffb17 	ldw	r2,-20(fp)
 100be30:	10800817 	ldw	r2,32(r2)
 100be34:	1007883a 	mov	r3,r2
 100be38:	2005883a 	mov	r2,r4
 100be3c:	10c00035 	stwio	r3,0(r2)
 100be40:	e0bff917 	ldw	r2,-28(fp)
 100be44:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100be48:	e0bff417 	ldw	r2,-48(fp)
 100be4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100be50:	e0fffa17 	ldw	r3,-24(fp)
 100be54:	e0bffc17 	ldw	r2,-16(fp)
 100be58:	18800526 	beq	r3,r2,100be70 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100be5c:	e0fffa17 	ldw	r3,-24(fp)
 100be60:	e0bffc17 	ldw	r2,-16(fp)
 100be64:	1887c83a 	sub	r3,r3,r2
 100be68:	e0ffff15 	stw	r3,-4(fp)
 100be6c:	00000906 	br	100be94 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100be70:	e0bffe17 	ldw	r2,-8(fp)
 100be74:	1090000c 	andi	r2,r2,16384
 100be78:	1005003a 	cmpeq	r2,r2,zero
 100be7c:	1000031e 	bne	r2,zero,100be8c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100be80:	00bffd44 	movi	r2,-11
 100be84:	e0bfff15 	stw	r2,-4(fp)
 100be88:	00000206 	br	100be94 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100be8c:	00bffec4 	movi	r2,-5
 100be90:	e0bfff15 	stw	r2,-4(fp)
 100be94:	e0bfff17 	ldw	r2,-4(fp)
}
 100be98:	e037883a 	mov	sp,fp
 100be9c:	dfc00117 	ldw	ra,4(sp)
 100bea0:	df000017 	ldw	fp,0(sp)
 100bea4:	dec00204 	addi	sp,sp,8
 100bea8:	f800283a 	ret

0100beac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100beac:	defff204 	addi	sp,sp,-56
 100beb0:	dfc00d15 	stw	ra,52(sp)
 100beb4:	df000c15 	stw	fp,48(sp)
 100beb8:	df000c04 	addi	fp,sp,48
 100bebc:	e13ffb15 	stw	r4,-20(fp)
 100bec0:	e17ffc15 	stw	r5,-16(fp)
 100bec4:	e1bffd15 	stw	r6,-12(fp)
 100bec8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100becc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100bed0:	e0bffc17 	ldw	r2,-16(fp)
 100bed4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100bed8:	00003a06 	br	100bfc4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100bedc:	e0bffb17 	ldw	r2,-20(fp)
 100bee0:	10800c17 	ldw	r2,48(r2)
 100bee4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100bee8:	e0bffb17 	ldw	r2,-20(fp)
 100beec:	10800d17 	ldw	r2,52(r2)
 100bef0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100bef4:	e0fffa17 	ldw	r3,-24(fp)
 100bef8:	e0bff917 	ldw	r2,-28(fp)
 100befc:	1880062e 	bgeu	r3,r2,100bf18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100bf00:	e0fff917 	ldw	r3,-28(fp)
 100bf04:	e0bffa17 	ldw	r2,-24(fp)
 100bf08:	1885c83a 	sub	r2,r3,r2
 100bf0c:	10bfffc4 	addi	r2,r2,-1
 100bf10:	e0bff815 	stw	r2,-32(fp)
 100bf14:	00000c06 	br	100bf48 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100bf18:	e0bff917 	ldw	r2,-28(fp)
 100bf1c:	1005003a 	cmpeq	r2,r2,zero
 100bf20:	1000051e 	bne	r2,zero,100bf38 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100bf24:	00820004 	movi	r2,2048
 100bf28:	e0fffa17 	ldw	r3,-24(fp)
 100bf2c:	10c5c83a 	sub	r2,r2,r3
 100bf30:	e0bff815 	stw	r2,-32(fp)
 100bf34:	00000406 	br	100bf48 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100bf38:	0081ffc4 	movi	r2,2047
 100bf3c:	e0fffa17 	ldw	r3,-24(fp)
 100bf40:	10c5c83a 	sub	r2,r2,r3
 100bf44:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100bf48:	e0bff817 	ldw	r2,-32(fp)
 100bf4c:	1005003a 	cmpeq	r2,r2,zero
 100bf50:	10001f1e 	bne	r2,zero,100bfd0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100bf54:	e0fffd17 	ldw	r3,-12(fp)
 100bf58:	e0bff817 	ldw	r2,-32(fp)
 100bf5c:	1880022e 	bgeu	r3,r2,100bf68 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100bf60:	e0bffd17 	ldw	r2,-12(fp)
 100bf64:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100bf68:	e0bffb17 	ldw	r2,-20(fp)
 100bf6c:	10c20e04 	addi	r3,r2,2104
 100bf70:	e0bffa17 	ldw	r2,-24(fp)
 100bf74:	1885883a 	add	r2,r3,r2
 100bf78:	e0fffc17 	ldw	r3,-16(fp)
 100bf7c:	1009883a 	mov	r4,r2
 100bf80:	180b883a 	mov	r5,r3
 100bf84:	e1bff817 	ldw	r6,-32(fp)
 100bf88:	10064e00 	call	10064e0 <memcpy>
      ptr   += n;
 100bf8c:	e0fff817 	ldw	r3,-32(fp)
 100bf90:	e0bffc17 	ldw	r2,-16(fp)
 100bf94:	10c5883a 	add	r2,r2,r3
 100bf98:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100bf9c:	e0fffd17 	ldw	r3,-12(fp)
 100bfa0:	e0bff817 	ldw	r2,-32(fp)
 100bfa4:	1885c83a 	sub	r2,r3,r2
 100bfa8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bfac:	e0fffa17 	ldw	r3,-24(fp)
 100bfb0:	e0bff817 	ldw	r2,-32(fp)
 100bfb4:	1885883a 	add	r2,r3,r2
 100bfb8:	10c1ffcc 	andi	r3,r2,2047
 100bfbc:	e0bffb17 	ldw	r2,-20(fp)
 100bfc0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100bfc4:	e0bffd17 	ldw	r2,-12(fp)
 100bfc8:	10800048 	cmpgei	r2,r2,1
 100bfcc:	103fc31e 	bne	r2,zero,100bedc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bfd0:	0005303a 	rdctl	r2,status
 100bfd4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bfd8:	e0fff517 	ldw	r3,-44(fp)
 100bfdc:	00bfff84 	movi	r2,-2
 100bfe0:	1884703a 	and	r2,r3,r2
 100bfe4:	1001703a 	wrctl	status,r2
  
  return context;
 100bfe8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100bfec:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100bff0:	e0bffb17 	ldw	r2,-20(fp)
 100bff4:	10800817 	ldw	r2,32(r2)
 100bff8:	10c00094 	ori	r3,r2,2
 100bffc:	e0bffb17 	ldw	r2,-20(fp)
 100c000:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100c004:	e0bffb17 	ldw	r2,-20(fp)
 100c008:	10800017 	ldw	r2,0(r2)
 100c00c:	11000104 	addi	r4,r2,4
 100c010:	e0bffb17 	ldw	r2,-20(fp)
 100c014:	10800817 	ldw	r2,32(r2)
 100c018:	1007883a 	mov	r3,r2
 100c01c:	2005883a 	mov	r2,r4
 100c020:	10c00035 	stwio	r3,0(r2)
 100c024:	e0bff717 	ldw	r2,-36(fp)
 100c028:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c02c:	e0bff417 	ldw	r2,-48(fp)
 100c030:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100c034:	e0bffd17 	ldw	r2,-12(fp)
 100c038:	10800050 	cmplti	r2,r2,1
 100c03c:	1000111e 	bne	r2,zero,100c084 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100c040:	e0bffe17 	ldw	r2,-8(fp)
 100c044:	1090000c 	andi	r2,r2,16384
 100c048:	1004c03a 	cmpne	r2,r2,zero
 100c04c:	1000101e 	bne	r2,zero,100c090 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100c050:	e0bffb17 	ldw	r2,-20(fp)
 100c054:	10c00d17 	ldw	r3,52(r2)
 100c058:	e0bff917 	ldw	r2,-28(fp)
 100c05c:	1880051e 	bne	r3,r2,100c074 <altera_avalon_jtag_uart_write+0x1c8>
 100c060:	e0bffb17 	ldw	r2,-20(fp)
 100c064:	10c00917 	ldw	r3,36(r2)
 100c068:	e0bffb17 	ldw	r2,-20(fp)
 100c06c:	10800117 	ldw	r2,4(r2)
 100c070:	18bff736 	bltu	r3,r2,100c050 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100c074:	e0bffb17 	ldw	r2,-20(fp)
 100c078:	10c00d17 	ldw	r3,52(r2)
 100c07c:	e0bff917 	ldw	r2,-28(fp)
 100c080:	18800326 	beq	r3,r2,100c090 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100c084:	e0bffd17 	ldw	r2,-12(fp)
 100c088:	10800048 	cmpgei	r2,r2,1
 100c08c:	103fcd1e 	bne	r2,zero,100bfc4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100c090:	e0fffc17 	ldw	r3,-16(fp)
 100c094:	e0bff617 	ldw	r2,-40(fp)
 100c098:	18800526 	beq	r3,r2,100c0b0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100c09c:	e0fffc17 	ldw	r3,-16(fp)
 100c0a0:	e0bff617 	ldw	r2,-40(fp)
 100c0a4:	1887c83a 	sub	r3,r3,r2
 100c0a8:	e0ffff15 	stw	r3,-4(fp)
 100c0ac:	00000906 	br	100c0d4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100c0b0:	e0bffe17 	ldw	r2,-8(fp)
 100c0b4:	1090000c 	andi	r2,r2,16384
 100c0b8:	1005003a 	cmpeq	r2,r2,zero
 100c0bc:	1000031e 	bne	r2,zero,100c0cc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100c0c0:	00bffd44 	movi	r2,-11
 100c0c4:	e0bfff15 	stw	r2,-4(fp)
 100c0c8:	00000206 	br	100c0d4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 100c0cc:	00bffec4 	movi	r2,-5
 100c0d0:	e0bfff15 	stw	r2,-4(fp)
 100c0d4:	e0bfff17 	ldw	r2,-4(fp)
}
 100c0d8:	e037883a 	mov	sp,fp
 100c0dc:	dfc00117 	ldw	ra,4(sp)
 100c0e0:	df000017 	ldw	fp,0(sp)
 100c0e4:	dec00204 	addi	sp,sp,8
 100c0e8:	f800283a 	ret

0100c0ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100c0ec:	defffa04 	addi	sp,sp,-24
 100c0f0:	dfc00515 	stw	ra,20(sp)
 100c0f4:	df000415 	stw	fp,16(sp)
 100c0f8:	df000404 	addi	fp,sp,16
 100c0fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100c100:	e0bfff17 	ldw	r2,-4(fp)
 100c104:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100c108:	e0bfff17 	ldw	r2,-4(fp)
 100c10c:	10800104 	addi	r2,r2,4
 100c110:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c114:	0005303a 	rdctl	r2,status
 100c118:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c11c:	e0fffd17 	ldw	r3,-12(fp)
 100c120:	00bfff84 	movi	r2,-2
 100c124:	1884703a 	and	r2,r3,r2
 100c128:	1001703a 	wrctl	status,r2
  
  return context;
 100c12c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100c130:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 100c134:	1011d080 	call	1011d08 <alt_tick>
 100c138:	e0bffe17 	ldw	r2,-8(fp)
 100c13c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c140:	e0bffc17 	ldw	r2,-16(fp)
 100c144:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100c148:	e037883a 	mov	sp,fp
 100c14c:	dfc00117 	ldw	ra,4(sp)
 100c150:	df000017 	ldw	fp,0(sp)
 100c154:	dec00204 	addi	sp,sp,8
 100c158:	f800283a 	ret

0100c15c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100c15c:	defff804 	addi	sp,sp,-32
 100c160:	dfc00715 	stw	ra,28(sp)
 100c164:	df000615 	stw	fp,24(sp)
 100c168:	df000604 	addi	fp,sp,24
 100c16c:	e13ffc15 	stw	r4,-16(fp)
 100c170:	e17ffd15 	stw	r5,-12(fp)
 100c174:	e1bffe15 	stw	r6,-8(fp)
 100c178:	e1ffff15 	stw	r7,-4(fp)
 100c17c:	e0bfff17 	ldw	r2,-4(fp)
 100c180:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100c184:	00804074 	movhi	r2,257
 100c188:	10985404 	addi	r2,r2,24912
 100c18c:	10800017 	ldw	r2,0(r2)
 100c190:	1004c03a 	cmpne	r2,r2,zero
 100c194:	1000041e 	bne	r2,zero,100c1a8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100c198:	00c04074 	movhi	r3,257
 100c19c:	18d85404 	addi	r3,r3,24912
 100c1a0:	e0bffb17 	ldw	r2,-20(fp)
 100c1a4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100c1a8:	e0bffc17 	ldw	r2,-16(fp)
 100c1ac:	10800104 	addi	r2,r2,4
 100c1b0:	1007883a 	mov	r3,r2
 100c1b4:	008001c4 	movi	r2,7
 100c1b8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100c1bc:	d8000015 	stw	zero,0(sp)
 100c1c0:	e13ffd17 	ldw	r4,-12(fp)
 100c1c4:	e17ffe17 	ldw	r5,-8(fp)
 100c1c8:	01804074 	movhi	r6,257
 100c1cc:	31b03b04 	addi	r6,r6,-16148
 100c1d0:	e1fffc17 	ldw	r7,-16(fp)
 100c1d4:	10115700 	call	1011570 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 100c1d8:	e037883a 	mov	sp,fp
 100c1dc:	dfc00117 	ldw	ra,4(sp)
 100c1e0:	df000017 	ldw	fp,0(sp)
 100c1e4:	dec00204 	addi	sp,sp,8
 100c1e8:	f800283a 	ret

0100c1ec <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 100c1ec:	defffd04 	addi	sp,sp,-12
 100c1f0:	df000215 	stw	fp,8(sp)
 100c1f4:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 100c1f8:	00804074 	movhi	r2,257
 100c1fc:	10984404 	addi	r2,r2,24848
 100c200:	10800017 	ldw	r2,0(r2)
 100c204:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 100c208:	00804074 	movhi	r2,257
 100c20c:	10984504 	addi	r2,r2,24852
 100c210:	10800017 	ldw	r2,0(r2)
 100c214:	1004c03a 	cmpne	r2,r2,zero
 100c218:	1000031e 	bne	r2,zero,100c228 <alt_timestamp_start+0x3c>
  {
    return -1;
 100c21c:	00bfffc4 	movi	r2,-1
 100c220:	e0bfff15 	stw	r2,-4(fp)
 100c224:	00001506 	br	100c27c <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 100c228:	e0bffe17 	ldw	r2,-8(fp)
 100c22c:	10800104 	addi	r2,r2,4
 100c230:	1007883a 	mov	r3,r2
 100c234:	00800204 	movi	r2,8
 100c238:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 100c23c:	e0bffe17 	ldw	r2,-8(fp)
 100c240:	10800204 	addi	r2,r2,8
 100c244:	1007883a 	mov	r3,r2
 100c248:	00bfffd4 	movui	r2,65535
 100c24c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 100c250:	e0bffe17 	ldw	r2,-8(fp)
 100c254:	10800304 	addi	r2,r2,12
 100c258:	1007883a 	mov	r3,r2
 100c25c:	00bfffd4 	movui	r2,65535
 100c260:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 100c264:	e0bffe17 	ldw	r2,-8(fp)
 100c268:	10800104 	addi	r2,r2,4
 100c26c:	1007883a 	mov	r3,r2
 100c270:	00800104 	movi	r2,4
 100c274:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 100c278:	e03fff15 	stw	zero,-4(fp)
 100c27c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c280:	e037883a 	mov	sp,fp
 100c284:	df000017 	ldw	fp,0(sp)
 100c288:	dec00104 	addi	sp,sp,4
 100c28c:	f800283a 	ret

0100c290 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 100c290:	defffb04 	addi	sp,sp,-20
 100c294:	df000415 	stw	fp,16(sp)
 100c298:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 100c29c:	00804074 	movhi	r2,257
 100c2a0:	10984404 	addi	r2,r2,24848
 100c2a4:	10800017 	ldw	r2,0(r2)
 100c2a8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 100c2ac:	00804074 	movhi	r2,257
 100c2b0:	10984504 	addi	r2,r2,24852
 100c2b4:	10800017 	ldw	r2,0(r2)
 100c2b8:	1004c03a 	cmpne	r2,r2,zero
 100c2bc:	1000031e 	bne	r2,zero,100c2cc <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 100c2c0:	00bfffc4 	movi	r2,-1
 100c2c4:	e0bfff15 	stw	r2,-4(fp)
 100c2c8:	00001306 	br	100c318 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 100c2cc:	e0bffe17 	ldw	r2,-8(fp)
 100c2d0:	10800404 	addi	r2,r2,16
 100c2d4:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 100c2d8:	e0bffe17 	ldw	r2,-8(fp)
 100c2dc:	10800404 	addi	r2,r2,16
 100c2e0:	10800037 	ldwio	r2,0(r2)
 100c2e4:	10bfffcc 	andi	r2,r2,65535
 100c2e8:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 100c2ec:	e0bffe17 	ldw	r2,-8(fp)
 100c2f0:	10800504 	addi	r2,r2,20
 100c2f4:	10800037 	ldwio	r2,0(r2)
 100c2f8:	10bfffcc 	andi	r2,r2,65535
 100c2fc:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 100c300:	e0bffc17 	ldw	r2,-16(fp)
 100c304:	1006943a 	slli	r3,r2,16
 100c308:	e0bffd17 	ldw	r2,-12(fp)
 100c30c:	1884b03a 	or	r2,r3,r2
 100c310:	0084303a 	nor	r2,zero,r2
 100c314:	e0bfff15 	stw	r2,-4(fp)
 100c318:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 100c31c:	e037883a 	mov	sp,fp
 100c320:	df000017 	ldw	fp,0(sp)
 100c324:	dec00104 	addi	sp,sp,4
 100c328:	f800283a 	ret

0100c32c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 100c32c:	deffff04 	addi	sp,sp,-4
 100c330:	df000015 	stw	fp,0(sp)
 100c334:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 100c338:	00804074 	movhi	r2,257
 100c33c:	10984504 	addi	r2,r2,24852
 100c340:	10800017 	ldw	r2,0(r2)
}
 100c344:	e037883a 	mov	sp,fp
 100c348:	df000017 	ldw	fp,0(sp)
 100c34c:	dec00104 	addi	sp,sp,4
 100c350:	f800283a 	ret

0100c354 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100c354:	defffc04 	addi	sp,sp,-16
 100c358:	df000315 	stw	fp,12(sp)
 100c35c:	df000304 	addi	fp,sp,12
 100c360:	e13ffe15 	stw	r4,-8(fp)
 100c364:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100c368:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100c36c:	e0bfff17 	ldw	r2,-4(fp)
 100c370:	1004c03a 	cmpne	r2,r2,zero
 100c374:	1000061e 	bne	r2,zero,100c390 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100c378:	e0bffe17 	ldw	r2,-8(fp)
 100c37c:	1007883a 	mov	r3,r2
 100c380:	e0bffd03 	ldbu	r2,-12(fp)
 100c384:	10c4b03a 	or	r2,r2,r3
 100c388:	e0bffd05 	stb	r2,-12(fp)
 100c38c:	00000806 	br	100c3b0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100c390:	e0bffe17 	ldw	r2,-8(fp)
 100c394:	1007883a 	mov	r3,r2
 100c398:	e0bffd03 	ldbu	r2,-12(fp)
 100c39c:	10c4b03a 	or	r2,r2,r3
 100c3a0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100c3a4:	e0bffd03 	ldbu	r2,-12(fp)
 100c3a8:	10801014 	ori	r2,r2,64
 100c3ac:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100c3b0:	e0fffd03 	ldbu	r3,-12(fp)
 100c3b4:	00bfe004 	movi	r2,-128
 100c3b8:	1884b03a 	or	r2,r3,r2
 100c3bc:	10803fcc 	andi	r2,r2,255
}
 100c3c0:	e037883a 	mov	sp,fp
 100c3c4:	df000017 	ldw	fp,0(sp)
 100c3c8:	dec00104 	addi	sp,sp,4
 100c3cc:	f800283a 	ret

0100c3d0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100c3d0:	defffd04 	addi	sp,sp,-12
 100c3d4:	df000215 	stw	fp,8(sp)
 100c3d8:	df000204 	addi	fp,sp,8
 100c3dc:	e13ffe15 	stw	r4,-8(fp)
 100c3e0:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100c3e4:	e0bffe17 	ldw	r2,-8(fp)
 100c3e8:	10800a17 	ldw	r2,40(r2)
 100c3ec:	e0ffff03 	ldbu	r3,-4(fp)
 100c3f0:	10c00025 	stbio	r3,0(r2)
}
 100c3f4:	e037883a 	mov	sp,fp
 100c3f8:	df000017 	ldw	fp,0(sp)
 100c3fc:	dec00104 	addi	sp,sp,4
 100c400:	f800283a 	ret

0100c404 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100c404:	defffe04 	addi	sp,sp,-8
 100c408:	df000115 	stw	fp,4(sp)
 100c40c:	df000104 	addi	fp,sp,4
 100c410:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100c414:	e0bfff17 	ldw	r2,-4(fp)
 100c418:	10800a17 	ldw	r2,40(r2)
 100c41c:	1007883a 	mov	r3,r2
 100c420:	00800044 	movi	r2,1
 100c424:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100c428:	e037883a 	mov	sp,fp
 100c42c:	df000017 	ldw	fp,0(sp)
 100c430:	dec00104 	addi	sp,sp,4
 100c434:	f800283a 	ret

0100c438 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100c438:	defffc04 	addi	sp,sp,-16
 100c43c:	dfc00315 	stw	ra,12(sp)
 100c440:	df000215 	stw	fp,8(sp)
 100c444:	df000204 	addi	fp,sp,8
 100c448:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100c44c:	e13fff17 	ldw	r4,-4(fp)
 100c450:	01404074 	movhi	r5,257
 100c454:	29515e04 	addi	r5,r5,17784
 100c458:	10114ac0 	call	10114ac <alt_find_dev>
 100c45c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100c460:	e0bffe17 	ldw	r2,-8(fp)
}
 100c464:	e037883a 	mov	sp,fp
 100c468:	dfc00117 	ldw	ra,4(sp)
 100c46c:	df000017 	ldw	fp,0(sp)
 100c470:	dec00204 	addi	sp,sp,8
 100c474:	f800283a 	ret

0100c478 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100c478:	defffb04 	addi	sp,sp,-20
 100c47c:	df000415 	stw	fp,16(sp)
 100c480:	df000404 	addi	fp,sp,16
 100c484:	e13ffd15 	stw	r4,-12(fp)
 100c488:	e17ffe15 	stw	r5,-8(fp)
 100c48c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100c490:	e03ffc15 	stw	zero,-16(fp)
 100c494:	00000f06 	br	100c4d4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100c498:	e0bffd17 	ldw	r2,-12(fp)
 100c49c:	10800a17 	ldw	r2,40(r2)
 100c4a0:	11000044 	addi	r4,r2,1
 100c4a4:	e0fffc17 	ldw	r3,-16(fp)
 100c4a8:	e0bffe17 	ldw	r2,-8(fp)
 100c4ac:	1885883a 	add	r2,r3,r2
 100c4b0:	10800003 	ldbu	r2,0(r2)
 100c4b4:	10c03fcc 	andi	r3,r2,255
 100c4b8:	18c0201c 	xori	r3,r3,128
 100c4bc:	18ffe004 	addi	r3,r3,-128
 100c4c0:	2005883a 	mov	r2,r4
 100c4c4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100c4c8:	e0bffc17 	ldw	r2,-16(fp)
 100c4cc:	10800044 	addi	r2,r2,1
 100c4d0:	e0bffc15 	stw	r2,-16(fp)
 100c4d4:	e0fffc17 	ldw	r3,-16(fp)
 100c4d8:	e0bfff17 	ldw	r2,-4(fp)
 100c4dc:	18bfee36 	bltu	r3,r2,100c498 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100c4e0:	e037883a 	mov	sp,fp
 100c4e4:	df000017 	ldw	fp,0(sp)
 100c4e8:	dec00104 	addi	sp,sp,4
 100c4ec:	f800283a 	ret

0100c4f0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100c4f0:	defffd04 	addi	sp,sp,-12
 100c4f4:	df000215 	stw	fp,8(sp)
 100c4f8:	df000204 	addi	fp,sp,8
 100c4fc:	e13ffe15 	stw	r4,-8(fp)
 100c500:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100c504:	00000d06 	br	100c53c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100c508:	e0bffe17 	ldw	r2,-8(fp)
 100c50c:	10800a17 	ldw	r2,40(r2)
 100c510:	11000044 	addi	r4,r2,1
 100c514:	e0bfff17 	ldw	r2,-4(fp)
 100c518:	10800003 	ldbu	r2,0(r2)
 100c51c:	10c03fcc 	andi	r3,r2,255
 100c520:	18c0201c 	xori	r3,r3,128
 100c524:	18ffe004 	addi	r3,r3,-128
 100c528:	2005883a 	mov	r2,r4
 100c52c:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100c530:	e0bfff17 	ldw	r2,-4(fp)
 100c534:	10800044 	addi	r2,r2,1
 100c538:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100c53c:	e0bfff17 	ldw	r2,-4(fp)
 100c540:	10800003 	ldbu	r2,0(r2)
 100c544:	10803fcc 	andi	r2,r2,255
 100c548:	1080201c 	xori	r2,r2,128
 100c54c:	10bfe004 	addi	r2,r2,-128
 100c550:	1004c03a 	cmpne	r2,r2,zero
 100c554:	103fec1e 	bne	r2,zero,100c508 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100c558:	e037883a 	mov	sp,fp
 100c55c:	df000017 	ldw	fp,0(sp)
 100c560:	dec00104 	addi	sp,sp,4
 100c564:	f800283a 	ret

0100c568 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100c568:	defffb04 	addi	sp,sp,-20
 100c56c:	dfc00415 	stw	ra,16(sp)
 100c570:	df000315 	stw	fp,12(sp)
 100c574:	df000304 	addi	fp,sp,12
 100c578:	e13ffd15 	stw	r4,-12(fp)
 100c57c:	e17ffe15 	stw	r5,-8(fp)
 100c580:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100c584:	e0bffd17 	ldw	r2,-12(fp)
 100c588:	10800017 	ldw	r2,0(r2)
 100c58c:	1009883a 	mov	r4,r2
 100c590:	e1bfff17 	ldw	r6,-4(fp)
 100c594:	e17ffe17 	ldw	r5,-8(fp)
 100c598:	100c4780 	call	100c478 <alt_up_character_lcd_write>
	return 0;
 100c59c:	0005883a 	mov	r2,zero
}
 100c5a0:	e037883a 	mov	sp,fp
 100c5a4:	dfc00117 	ldw	ra,4(sp)
 100c5a8:	df000017 	ldw	fp,0(sp)
 100c5ac:	dec00204 	addi	sp,sp,8
 100c5b0:	f800283a 	ret

0100c5b4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100c5b4:	defff904 	addi	sp,sp,-28
 100c5b8:	dfc00615 	stw	ra,24(sp)
 100c5bc:	df000515 	stw	fp,20(sp)
 100c5c0:	df000504 	addi	fp,sp,20
 100c5c4:	e13ffc15 	stw	r4,-16(fp)
 100c5c8:	e17ffd15 	stw	r5,-12(fp)
 100c5cc:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100c5d0:	e0bffd17 	ldw	r2,-12(fp)
 100c5d4:	10800a28 	cmpgeui	r2,r2,40
 100c5d8:	1000031e 	bne	r2,zero,100c5e8 <alt_up_character_lcd_set_cursor_pos+0x34>
 100c5dc:	e0bffe17 	ldw	r2,-8(fp)
 100c5e0:	108000b0 	cmpltui	r2,r2,2
 100c5e4:	1000031e 	bne	r2,zero,100c5f4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100c5e8:	00bfffc4 	movi	r2,-1
 100c5ec:	e0bfff15 	stw	r2,-4(fp)
 100c5f0:	00000806 	br	100c614 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100c5f4:	e13ffd17 	ldw	r4,-12(fp)
 100c5f8:	e17ffe17 	ldw	r5,-8(fp)
 100c5fc:	100c3540 	call	100c354 <get_DDRAM_addr>
 100c600:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100c604:	e17ffb03 	ldbu	r5,-20(fp)
 100c608:	e13ffc17 	ldw	r4,-16(fp)
 100c60c:	100c3d00 	call	100c3d0 <alt_up_character_lcd_send_cmd>
	return 0;
 100c610:	e03fff15 	stw	zero,-4(fp)
 100c614:	e0bfff17 	ldw	r2,-4(fp)
}
 100c618:	e037883a 	mov	sp,fp
 100c61c:	dfc00117 	ldw	ra,4(sp)
 100c620:	df000017 	ldw	fp,0(sp)
 100c624:	dec00204 	addi	sp,sp,8
 100c628:	f800283a 	ret

0100c62c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100c62c:	defff904 	addi	sp,sp,-28
 100c630:	dfc00615 	stw	ra,24(sp)
 100c634:	df000515 	stw	fp,20(sp)
 100c638:	df000504 	addi	fp,sp,20
 100c63c:	e13ffc15 	stw	r4,-16(fp)
 100c640:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100c644:	e0bffd17 	ldw	r2,-12(fp)
 100c648:	1005003a 	cmpeq	r2,r2,zero
 100c64c:	10001e1e 	bne	r2,zero,100c6c8 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100c650:	e0bffd17 	ldw	r2,-12(fp)
 100c654:	10800050 	cmplti	r2,r2,1
 100c658:	1000031e 	bne	r2,zero,100c668 <alt_up_character_lcd_shift_cursor+0x3c>
 100c65c:	00800504 	movi	r2,20
 100c660:	e0bfff05 	stb	r2,-4(fp)
 100c664:	00000206 	br	100c670 <alt_up_character_lcd_shift_cursor+0x44>
 100c668:	00c00404 	movi	r3,16
 100c66c:	e0ffff05 	stb	r3,-4(fp)
 100c670:	e0bfff03 	ldbu	r2,-4(fp)
 100c674:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100c678:	e0fffd17 	ldw	r3,-12(fp)
 100c67c:	e0fffe15 	stw	r3,-8(fp)
 100c680:	e0fffe17 	ldw	r3,-8(fp)
 100c684:	1804403a 	cmpge	r2,r3,zero
 100c688:	1000031e 	bne	r2,zero,100c698 <alt_up_character_lcd_shift_cursor+0x6c>
 100c68c:	e0bffe17 	ldw	r2,-8(fp)
 100c690:	0085c83a 	sub	r2,zero,r2
 100c694:	e0bffe15 	stw	r2,-8(fp)
 100c698:	e0fffe17 	ldw	r3,-8(fp)
 100c69c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100c6a0:	00000306 	br	100c6b0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100c6a4:	e17ffb43 	ldbu	r5,-19(fp)
 100c6a8:	e13ffc17 	ldw	r4,-16(fp)
 100c6ac:	100c3d00 	call	100c3d0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100c6b0:	e0bffb03 	ldbu	r2,-20(fp)
 100c6b4:	10bfffc4 	addi	r2,r2,-1
 100c6b8:	e0bffb05 	stb	r2,-20(fp)
 100c6bc:	e0bffb03 	ldbu	r2,-20(fp)
 100c6c0:	10803fd8 	cmpnei	r2,r2,255
 100c6c4:	103ff71e 	bne	r2,zero,100c6a4 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100c6c8:	e037883a 	mov	sp,fp
 100c6cc:	dfc00117 	ldw	ra,4(sp)
 100c6d0:	df000017 	ldw	fp,0(sp)
 100c6d4:	dec00204 	addi	sp,sp,8
 100c6d8:	f800283a 	ret

0100c6dc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100c6dc:	defff904 	addi	sp,sp,-28
 100c6e0:	dfc00615 	stw	ra,24(sp)
 100c6e4:	df000515 	stw	fp,20(sp)
 100c6e8:	df000504 	addi	fp,sp,20
 100c6ec:	e13ffc15 	stw	r4,-16(fp)
 100c6f0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100c6f4:	e0bffd17 	ldw	r2,-12(fp)
 100c6f8:	1005003a 	cmpeq	r2,r2,zero
 100c6fc:	10001e1e 	bne	r2,zero,100c778 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100c700:	e0bffd17 	ldw	r2,-12(fp)
 100c704:	10800050 	cmplti	r2,r2,1
 100c708:	1000031e 	bne	r2,zero,100c718 <alt_up_character_lcd_shift_display+0x3c>
 100c70c:	00800704 	movi	r2,28
 100c710:	e0bfff05 	stb	r2,-4(fp)
 100c714:	00000206 	br	100c720 <alt_up_character_lcd_shift_display+0x44>
 100c718:	00c00604 	movi	r3,24
 100c71c:	e0ffff05 	stb	r3,-4(fp)
 100c720:	e0bfff03 	ldbu	r2,-4(fp)
 100c724:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100c728:	e0fffd17 	ldw	r3,-12(fp)
 100c72c:	e0fffe15 	stw	r3,-8(fp)
 100c730:	e0fffe17 	ldw	r3,-8(fp)
 100c734:	1804403a 	cmpge	r2,r3,zero
 100c738:	1000031e 	bne	r2,zero,100c748 <alt_up_character_lcd_shift_display+0x6c>
 100c73c:	e0bffe17 	ldw	r2,-8(fp)
 100c740:	0085c83a 	sub	r2,zero,r2
 100c744:	e0bffe15 	stw	r2,-8(fp)
 100c748:	e0fffe17 	ldw	r3,-8(fp)
 100c74c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100c750:	00000306 	br	100c760 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100c754:	e17ffb43 	ldbu	r5,-19(fp)
 100c758:	e13ffc17 	ldw	r4,-16(fp)
 100c75c:	100c3d00 	call	100c3d0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100c760:	e0bffb03 	ldbu	r2,-20(fp)
 100c764:	10bfffc4 	addi	r2,r2,-1
 100c768:	e0bffb05 	stb	r2,-20(fp)
 100c76c:	e0bffb03 	ldbu	r2,-20(fp)
 100c770:	10803fd8 	cmpnei	r2,r2,255
 100c774:	103ff71e 	bne	r2,zero,100c754 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100c778:	e037883a 	mov	sp,fp
 100c77c:	dfc00117 	ldw	ra,4(sp)
 100c780:	df000017 	ldw	fp,0(sp)
 100c784:	dec00204 	addi	sp,sp,8
 100c788:	f800283a 	ret

0100c78c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100c78c:	defff904 	addi	sp,sp,-28
 100c790:	dfc00615 	stw	ra,24(sp)
 100c794:	df000515 	stw	fp,20(sp)
 100c798:	df000504 	addi	fp,sp,20
 100c79c:	e13ffc15 	stw	r4,-16(fp)
 100c7a0:	e17ffd15 	stw	r5,-12(fp)
 100c7a4:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100c7a8:	e0bffd17 	ldw	r2,-12(fp)
 100c7ac:	10800a28 	cmpgeui	r2,r2,40
 100c7b0:	1000031e 	bne	r2,zero,100c7c0 <alt_up_character_lcd_erase_pos+0x34>
 100c7b4:	e0bffe17 	ldw	r2,-8(fp)
 100c7b8:	108000b0 	cmpltui	r2,r2,2
 100c7bc:	1000031e 	bne	r2,zero,100c7cc <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100c7c0:	00bfffc4 	movi	r2,-1
 100c7c4:	e0bfff15 	stw	r2,-4(fp)
 100c7c8:	00000e06 	br	100c804 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100c7cc:	e13ffd17 	ldw	r4,-12(fp)
 100c7d0:	e17ffe17 	ldw	r5,-8(fp)
 100c7d4:	100c3540 	call	100c354 <get_DDRAM_addr>
 100c7d8:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100c7dc:	e17ffb03 	ldbu	r5,-20(fp)
 100c7e0:	e13ffc17 	ldw	r4,-16(fp)
 100c7e4:	100c3d00 	call	100c3d0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100c7e8:	e0bffc17 	ldw	r2,-16(fp)
 100c7ec:	10800a17 	ldw	r2,40(r2)
 100c7f0:	10800044 	addi	r2,r2,1
 100c7f4:	1007883a 	mov	r3,r2
 100c7f8:	00800084 	movi	r2,2
 100c7fc:	18800025 	stbio	r2,0(r3)
	return 0;
 100c800:	e03fff15 	stw	zero,-4(fp)
 100c804:	e0bfff17 	ldw	r2,-4(fp)
}
 100c808:	e037883a 	mov	sp,fp
 100c80c:	dfc00117 	ldw	ra,4(sp)
 100c810:	df000017 	ldw	fp,0(sp)
 100c814:	dec00204 	addi	sp,sp,8
 100c818:	f800283a 	ret

0100c81c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100c81c:	defffd04 	addi	sp,sp,-12
 100c820:	dfc00215 	stw	ra,8(sp)
 100c824:	df000115 	stw	fp,4(sp)
 100c828:	df000104 	addi	fp,sp,4
 100c82c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100c830:	e13fff17 	ldw	r4,-4(fp)
 100c834:	01400304 	movi	r5,12
 100c838:	100c3d00 	call	100c3d0 <alt_up_character_lcd_send_cmd>
}
 100c83c:	e037883a 	mov	sp,fp
 100c840:	dfc00117 	ldw	ra,4(sp)
 100c844:	df000017 	ldw	fp,0(sp)
 100c848:	dec00204 	addi	sp,sp,8
 100c84c:	f800283a 	ret

0100c850 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100c850:	defffd04 	addi	sp,sp,-12
 100c854:	dfc00215 	stw	ra,8(sp)
 100c858:	df000115 	stw	fp,4(sp)
 100c85c:	df000104 	addi	fp,sp,4
 100c860:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100c864:	e13fff17 	ldw	r4,-4(fp)
 100c868:	014003c4 	movi	r5,15
 100c86c:	100c3d00 	call	100c3d0 <alt_up_character_lcd_send_cmd>
}
 100c870:	e037883a 	mov	sp,fp
 100c874:	dfc00117 	ldw	ra,4(sp)
 100c878:	df000017 	ldw	fp,0(sp)
 100c87c:	dec00204 	addi	sp,sp,8
 100c880:	f800283a 	ret

0100c884 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 100c884:	defffc04 	addi	sp,sp,-16
 100c888:	dfc00315 	stw	ra,12(sp)
 100c88c:	df000215 	stw	fp,8(sp)
 100c890:	df000204 	addi	fp,sp,8
 100c894:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 100c898:	e0bfff17 	ldw	r2,-4(fp)
 100c89c:	10800217 	ldw	r2,8(r2)
 100c8a0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 100c8a4:	00000c06 	br	100c8d8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 100c8a8:	e13ffe17 	ldw	r4,-8(fp)
 100c8ac:	01404074 	movhi	r5,257
 100c8b0:	294a8b04 	addi	r5,r5,10796
 100c8b4:	1007fa40 	call	1007fa4 <strcmp>
 100c8b8:	1004c03a 	cmpne	r2,r2,zero
 100c8bc:	1000031e 	bne	r2,zero,100c8cc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 100c8c0:	e0bffe17 	ldw	r2,-8(fp)
 100c8c4:	10000005 	stb	zero,0(r2)
			break;
 100c8c8:	00000a06 	br	100c8f4 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 100c8cc:	e0bffe17 	ldw	r2,-8(fp)
 100c8d0:	10800044 	addi	r2,r2,1
 100c8d4:	e0bffe15 	stw	r2,-8(fp)
 100c8d8:	e0bffe17 	ldw	r2,-8(fp)
 100c8dc:	10800003 	ldbu	r2,0(r2)
 100c8e0:	10803fcc 	andi	r2,r2,255
 100c8e4:	1080201c 	xori	r2,r2,128
 100c8e8:	10bfe004 	addi	r2,r2,-128
 100c8ec:	1004c03a 	cmpne	r2,r2,zero
 100c8f0:	103fed1e 	bne	r2,zero,100c8a8 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 100c8f4:	e037883a 	mov	sp,fp
 100c8f8:	dfc00117 	ldw	ra,4(sp)
 100c8fc:	df000017 	ldw	fp,0(sp)
 100c900:	dec00204 	addi	sp,sp,8
 100c904:	f800283a 	ret

0100c908 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 100c908:	defffc04 	addi	sp,sp,-16
 100c90c:	dfc00315 	stw	ra,12(sp)
 100c910:	df000215 	stw	fp,8(sp)
 100c914:	df000204 	addi	fp,sp,8
 100c918:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 100c91c:	e13fff17 	ldw	r4,-4(fp)
 100c920:	01404074 	movhi	r5,257
 100c924:	29515e04 	addi	r5,r5,17784
 100c928:	10114ac0 	call	10114ac <alt_find_dev>
 100c92c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100c930:	e0bffe17 	ldw	r2,-8(fp)
}
 100c934:	e037883a 	mov	sp,fp
 100c938:	dfc00117 	ldw	ra,4(sp)
 100c93c:	df000017 	ldw	fp,0(sp)
 100c940:	dec00204 	addi	sp,sp,8
 100c944:	f800283a 	ret

0100c948 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 100c948:	defff904 	addi	sp,sp,-28
 100c94c:	df000615 	stw	fp,24(sp)
 100c950:	df000604 	addi	fp,sp,24
 100c954:	e13ffb15 	stw	r4,-20(fp)
 100c958:	e1bffd15 	stw	r6,-12(fp)
 100c95c:	e1fffe15 	stw	r7,-8(fp)
 100c960:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100c964:	e0bffb17 	ldw	r2,-20(fp)
 100c968:	10c00c17 	ldw	r3,48(r2)
 100c96c:	e0bffd17 	ldw	r2,-12(fp)
 100c970:	10c0042e 	bgeu	r2,r3,100c984 <alt_up_char_buffer_draw+0x3c>
 100c974:	e0bffb17 	ldw	r2,-20(fp)
 100c978:	10c00d17 	ldw	r3,52(r2)
 100c97c:	e0bffe17 	ldw	r2,-8(fp)
 100c980:	10c00336 	bltu	r2,r3,100c990 <alt_up_char_buffer_draw+0x48>
		return -1;
 100c984:	00bfffc4 	movi	r2,-1
 100c988:	e0bfff15 	stw	r2,-4(fp)
 100c98c:	00001d06 	br	100ca04 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 100c990:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 100c994:	e0bffb17 	ldw	r2,-20(fp)
 100c998:	10c00f17 	ldw	r3,60(r2)
 100c99c:	e0bffd17 	ldw	r2,-12(fp)
 100c9a0:	1886703a 	and	r3,r3,r2
 100c9a4:	e0bffb17 	ldw	r2,-20(fp)
 100c9a8:	10800e17 	ldw	r2,56(r2)
 100c9ac:	1886983a 	sll	r3,r3,r2
 100c9b0:	e0bffa17 	ldw	r2,-24(fp)
 100c9b4:	10c4b03a 	or	r2,r2,r3
 100c9b8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 100c9bc:	e0bffb17 	ldw	r2,-20(fp)
 100c9c0:	10c01117 	ldw	r3,68(r2)
 100c9c4:	e0bffe17 	ldw	r2,-8(fp)
 100c9c8:	1886703a 	and	r3,r3,r2
 100c9cc:	e0bffb17 	ldw	r2,-20(fp)
 100c9d0:	10801017 	ldw	r2,64(r2)
 100c9d4:	1886983a 	sll	r3,r3,r2
 100c9d8:	e0bffa17 	ldw	r2,-24(fp)
 100c9dc:	10c4b03a 	or	r2,r2,r3
 100c9e0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 100c9e4:	e0bffb17 	ldw	r2,-20(fp)
 100c9e8:	10800b17 	ldw	r2,44(r2)
 100c9ec:	1007883a 	mov	r3,r2
 100c9f0:	e0bffa17 	ldw	r2,-24(fp)
 100c9f4:	1885883a 	add	r2,r3,r2
 100c9f8:	e0fffc03 	ldbu	r3,-16(fp)
 100c9fc:	10c00025 	stbio	r3,0(r2)

	return 0;
 100ca00:	e03fff15 	stw	zero,-4(fp)
 100ca04:	e0bfff17 	ldw	r2,-4(fp)
}
 100ca08:	e037883a 	mov	sp,fp
 100ca0c:	df000017 	ldw	fp,0(sp)
 100ca10:	dec00104 	addi	sp,sp,4
 100ca14:	f800283a 	ret

0100ca18 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 100ca18:	defff904 	addi	sp,sp,-28
 100ca1c:	df000615 	stw	fp,24(sp)
 100ca20:	df000604 	addi	fp,sp,24
 100ca24:	e13ffb15 	stw	r4,-20(fp)
 100ca28:	e17ffc15 	stw	r5,-16(fp)
 100ca2c:	e1bffd15 	stw	r6,-12(fp)
 100ca30:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100ca34:	e0bffb17 	ldw	r2,-20(fp)
 100ca38:	10c00c17 	ldw	r3,48(r2)
 100ca3c:	e0bffd17 	ldw	r2,-12(fp)
 100ca40:	10c0042e 	bgeu	r2,r3,100ca54 <alt_up_char_buffer_string+0x3c>
 100ca44:	e0bffb17 	ldw	r2,-20(fp)
 100ca48:	10c00d17 	ldw	r3,52(r2)
 100ca4c:	e0bffe17 	ldw	r2,-8(fp)
 100ca50:	10c00336 	bltu	r2,r3,100ca60 <alt_up_char_buffer_string+0x48>
		return -1;
 100ca54:	00bfffc4 	movi	r2,-1
 100ca58:	e0bfff15 	stw	r2,-4(fp)
 100ca5c:	00002e06 	br	100cb18 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 100ca60:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 100ca64:	e0bffb17 	ldw	r2,-20(fp)
 100ca68:	10801017 	ldw	r2,64(r2)
 100ca6c:	1007883a 	mov	r3,r2
 100ca70:	e0bffe17 	ldw	r2,-8(fp)
 100ca74:	10c6983a 	sll	r3,r2,r3
 100ca78:	e0bffd17 	ldw	r2,-12(fp)
 100ca7c:	1885883a 	add	r2,r3,r2
 100ca80:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 100ca84:	00001c06 	br	100caf8 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 100ca88:	e0bffb17 	ldw	r2,-20(fp)
 100ca8c:	10800b17 	ldw	r2,44(r2)
 100ca90:	1007883a 	mov	r3,r2
 100ca94:	e0bffa17 	ldw	r2,-24(fp)
 100ca98:	1889883a 	add	r4,r3,r2
 100ca9c:	e0bffc17 	ldw	r2,-16(fp)
 100caa0:	10800003 	ldbu	r2,0(r2)
 100caa4:	10c03fcc 	andi	r3,r2,255
 100caa8:	18c0201c 	xori	r3,r3,128
 100caac:	18ffe004 	addi	r3,r3,-128
 100cab0:	2005883a 	mov	r2,r4
 100cab4:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100cab8:	e0bffc17 	ldw	r2,-16(fp)
 100cabc:	10800044 	addi	r2,r2,1
 100cac0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 100cac4:	e0bffd17 	ldw	r2,-12(fp)
 100cac8:	10800044 	addi	r2,r2,1
 100cacc:	e0bffd15 	stw	r2,-12(fp)
 100cad0:	e0bffb17 	ldw	r2,-20(fp)
 100cad4:	10c00c17 	ldw	r3,48(r2)
 100cad8:	e0bffd17 	ldw	r2,-12(fp)
 100cadc:	10c00336 	bltu	r2,r3,100caec <alt_up_char_buffer_string+0xd4>
			return -1;
 100cae0:	00bfffc4 	movi	r2,-1
 100cae4:	e0bfff15 	stw	r2,-4(fp)
 100cae8:	00000b06 	br	100cb18 <alt_up_char_buffer_string+0x100>
		++offset;
 100caec:	e0bffa17 	ldw	r2,-24(fp)
 100caf0:	10800044 	addi	r2,r2,1
 100caf4:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 100caf8:	e0bffc17 	ldw	r2,-16(fp)
 100cafc:	10800003 	ldbu	r2,0(r2)
 100cb00:	10803fcc 	andi	r2,r2,255
 100cb04:	1080201c 	xori	r2,r2,128
 100cb08:	10bfe004 	addi	r2,r2,-128
 100cb0c:	1004c03a 	cmpne	r2,r2,zero
 100cb10:	103fdd1e 	bne	r2,zero,100ca88 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 100cb14:	e03fff15 	stw	zero,-4(fp)
 100cb18:	e0bfff17 	ldw	r2,-4(fp)
}
 100cb1c:	e037883a 	mov	sp,fp
 100cb20:	df000017 	ldw	fp,0(sp)
 100cb24:	dec00104 	addi	sp,sp,4
 100cb28:	f800283a 	ret

0100cb2c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 100cb2c:	defffe04 	addi	sp,sp,-8
 100cb30:	df000115 	stw	fp,4(sp)
 100cb34:	df000104 	addi	fp,sp,4
 100cb38:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 100cb3c:	e0bfff17 	ldw	r2,-4(fp)
 100cb40:	10800a17 	ldw	r2,40(r2)
 100cb44:	10800084 	addi	r2,r2,2
 100cb48:	1007883a 	mov	r3,r2
 100cb4c:	00800044 	movi	r2,1
 100cb50:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 100cb54:	e0bfff17 	ldw	r2,-4(fp)
 100cb58:	10800a17 	ldw	r2,40(r2)
 100cb5c:	10800084 	addi	r2,r2,2
 100cb60:	10800023 	ldbuio	r2,0(r2)
 100cb64:	1080004c 	andi	r2,r2,1
 100cb68:	10803fcc 	andi	r2,r2,255
 100cb6c:	1004c03a 	cmpne	r2,r2,zero
 100cb70:	103ff81e 	bne	r2,zero,100cb54 <alt_up_char_buffer_clear+0x28>
	return 0;
 100cb74:	0005883a 	mov	r2,zero
}
 100cb78:	e037883a 	mov	sp,fp
 100cb7c:	df000017 	ldw	fp,0(sp)
 100cb80:	dec00104 	addi	sp,sp,4
 100cb84:	f800283a 	ret

0100cb88 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 100cb88:	defffa04 	addi	sp,sp,-24
 100cb8c:	dfc00515 	stw	ra,20(sp)
 100cb90:	df000415 	stw	fp,16(sp)
 100cb94:	df000404 	addi	fp,sp,16
 100cb98:	e13ffe15 	stw	r4,-8(fp)
 100cb9c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100cba0:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 100cba4:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100cba8:	1005003a 	cmpeq	r2,r2,zero
 100cbac:	1000221e 	bne	r2,zero,100cc38 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 100cbb0:	00803fc4 	movi	r2,255
 100cbb4:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 100cbb8:	d0a6f617 	ldw	r2,-25640(gp)
 100cbbc:	1009883a 	mov	r4,r2
 100cbc0:	e0fffe17 	ldw	r3,-8(fp)
 100cbc4:	e0bfff17 	ldw	r2,-4(fp)
 100cbc8:	1885883a 	add	r2,r3,r2
 100cbcc:	1006927a 	slli	r3,r2,9
 100cbd0:	2005883a 	mov	r2,r4
 100cbd4:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 100cbd8:	d0a6f517 	ldw	r2,-25644(gp)
 100cbdc:	1007883a 	mov	r3,r2
 100cbe0:	00800604 	movi	r2,24
 100cbe4:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100cbe8:	d0a6f217 	ldw	r2,-25656(gp)
 100cbec:	1080002b 	ldhuio	r2,0(r2)
 100cbf0:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 100cbf4:	e0bffc0b 	ldhu	r2,-16(fp)
 100cbf8:	10bfffcc 	andi	r2,r2,65535
 100cbfc:	1080010c 	andi	r2,r2,4
 100cc00:	1004c03a 	cmpne	r2,r2,zero
 100cc04:	103ff81e 	bne	r2,zero,100cbe8 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100cc08:	e0bffc0b 	ldhu	r2,-16(fp)
 100cc0c:	10bfffcc 	andi	r2,r2,65535
 100cc10:	1080040c 	andi	r2,r2,16
 100cc14:	1004c03a 	cmpne	r2,r2,zero
 100cc18:	1000071e 	bne	r2,zero,100cc38 <Write_Sector_Data+0xb0>
			result = true;
 100cc1c:	00800044 	movi	r2,1
 100cc20:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 100cc24:	d026fb15 	stw	zero,-25620(gp)
			current_sector_index = sector_index + partition_offset;
 100cc28:	e0fffe17 	ldw	r3,-8(fp)
 100cc2c:	e0bfff17 	ldw	r2,-4(fp)
 100cc30:	1885883a 	add	r2,r3,r2
 100cc34:	d0a6fc15 	stw	r2,-25616(gp)
		}
	}
	return result;
 100cc38:	e0bffd17 	ldw	r2,-12(fp)
}
 100cc3c:	e037883a 	mov	sp,fp
 100cc40:	dfc00117 	ldw	ra,4(sp)
 100cc44:	df000017 	ldw	fp,0(sp)
 100cc48:	dec00204 	addi	sp,sp,8
 100cc4c:	f800283a 	ret

0100cc50 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 100cc50:	defffd04 	addi	sp,sp,-12
 100cc54:	dfc00215 	stw	ra,8(sp)
 100cc58:	df000115 	stw	fp,4(sp)
 100cc5c:	df000104 	addi	fp,sp,4
	bool result = true;
 100cc60:	00800044 	movi	r2,1
 100cc64:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 100cc68:	d0a6fb17 	ldw	r2,-25620(gp)
 100cc6c:	1005003a 	cmpeq	r2,r2,zero
 100cc70:	1000051e 	bne	r2,zero,100cc88 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 100cc74:	d0a6fc17 	ldw	r2,-25616(gp)
 100cc78:	1009883a 	mov	r4,r2
 100cc7c:	000b883a 	mov	r5,zero
 100cc80:	100cb880 	call	100cb88 <Write_Sector_Data>
 100cc84:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 100cc88:	e0bfff17 	ldw	r2,-4(fp)
}
 100cc8c:	e037883a 	mov	sp,fp
 100cc90:	dfc00117 	ldw	ra,4(sp)
 100cc94:	df000017 	ldw	fp,0(sp)
 100cc98:	dec00204 	addi	sp,sp,8
 100cc9c:	f800283a 	ret

0100cca0 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100cca0:	defff904 	addi	sp,sp,-28
 100cca4:	dfc00615 	stw	ra,24(sp)
 100cca8:	df000515 	stw	fp,20(sp)
 100ccac:	df000504 	addi	fp,sp,20
 100ccb0:	e13ffd15 	stw	r4,-12(fp)
 100ccb4:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 100ccb8:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 100ccbc:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100ccc0:	1005003a 	cmpeq	r2,r2,zero
 100ccc4:	10002d1e 	bne	r2,zero,100cd7c <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 100ccc8:	00803fc4 	movi	r2,255
 100cccc:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 100ccd0:	d0a6fb17 	ldw	r2,-25620(gp)
 100ccd4:	1005003a 	cmpeq	r2,r2,zero
 100ccd8:	1000081e 	bne	r2,zero,100ccfc <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 100ccdc:	d0a6fc17 	ldw	r2,-25616(gp)
 100cce0:	1009883a 	mov	r4,r2
 100cce4:	000b883a 	mov	r5,zero
 100cce8:	100cb880 	call	100cb88 <Write_Sector_Data>
 100ccec:	1004c03a 	cmpne	r2,r2,zero
 100ccf0:	1000021e 	bne	r2,zero,100ccfc <Read_Sector_Data+0x5c>
				return false;
 100ccf4:	e03fff15 	stw	zero,-4(fp)
 100ccf8:	00002206 	br	100cd84 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 100ccfc:	d0a6f617 	ldw	r2,-25640(gp)
 100cd00:	1009883a 	mov	r4,r2
 100cd04:	e0fffd17 	ldw	r3,-12(fp)
 100cd08:	e0bffe17 	ldw	r2,-8(fp)
 100cd0c:	1885883a 	add	r2,r3,r2
 100cd10:	1006927a 	slli	r3,r2,9
 100cd14:	2005883a 	mov	r2,r4
 100cd18:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 100cd1c:	d0a6f517 	ldw	r2,-25644(gp)
 100cd20:	1007883a 	mov	r3,r2
 100cd24:	00800444 	movi	r2,17
 100cd28:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100cd2c:	d0a6f217 	ldw	r2,-25656(gp)
 100cd30:	1080002b 	ldhuio	r2,0(r2)
 100cd34:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 100cd38:	e0bffb0b 	ldhu	r2,-20(fp)
 100cd3c:	10bfffcc 	andi	r2,r2,65535
 100cd40:	1080010c 	andi	r2,r2,4
 100cd44:	1004c03a 	cmpne	r2,r2,zero
 100cd48:	103ff81e 	bne	r2,zero,100cd2c <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100cd4c:	e0bffb0b 	ldhu	r2,-20(fp)
 100cd50:	10bfffcc 	andi	r2,r2,65535
 100cd54:	1080040c 	andi	r2,r2,16
 100cd58:	1004c03a 	cmpne	r2,r2,zero
 100cd5c:	1000071e 	bne	r2,zero,100cd7c <Read_Sector_Data+0xdc>
			result = true;
 100cd60:	00800044 	movi	r2,1
 100cd64:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 100cd68:	d026fb15 	stw	zero,-25620(gp)
			current_sector_index = sector_index + partition_offset;
 100cd6c:	e0fffd17 	ldw	r3,-12(fp)
 100cd70:	e0bffe17 	ldw	r2,-8(fp)
 100cd74:	1885883a 	add	r2,r3,r2
 100cd78:	d0a6fc15 	stw	r2,-25616(gp)
		}
	}
	return result;
 100cd7c:	e0bffc17 	ldw	r2,-16(fp)
 100cd80:	e0bfff15 	stw	r2,-4(fp)
 100cd84:	e0bfff17 	ldw	r2,-4(fp)
}
 100cd88:	e037883a 	mov	sp,fp
 100cd8c:	dfc00117 	ldw	ra,4(sp)
 100cd90:	df000017 	ldw	fp,0(sp)
 100cd94:	dec00204 	addi	sp,sp,8
 100cd98:	f800283a 	ret

0100cd9c <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 100cd9c:	defffa04 	addi	sp,sp,-24
 100cda0:	dfc00515 	stw	ra,20(sp)
 100cda4:	df000415 	stw	fp,16(sp)
 100cda8:	df000404 	addi	fp,sp,16
 100cdac:	e13ffd15 	stw	r4,-12(fp)
 100cdb0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100cdb4:	e0bffd17 	ldw	r2,-12(fp)
 100cdb8:	1006d23a 	srli	r3,r2,8
 100cdbc:	d0a6f817 	ldw	r2,-25632(gp)
 100cdc0:	1885883a 	add	r2,r3,r2
 100cdc4:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100cdc8:	00804074 	movhi	r2,257
 100cdcc:	10986504 	addi	r2,r2,24980
 100cdd0:	10c01117 	ldw	r3,68(r2)
 100cdd4:	e0bffc17 	ldw	r2,-16(fp)
 100cdd8:	10c5883a 	add	r2,r2,r3
 100cddc:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 100cde0:	d0e6fc17 	ldw	r3,-25616(gp)
 100cde4:	e0bffc17 	ldw	r2,-16(fp)
 100cde8:	10c00726 	beq	r2,r3,100ce08 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100cdec:	e13ffc17 	ldw	r4,-16(fp)
 100cdf0:	000b883a 	mov	r5,zero
 100cdf4:	100cca00 	call	100cca0 <Read_Sector_Data>
 100cdf8:	1004c03a 	cmpne	r2,r2,zero
 100cdfc:	1000021e 	bne	r2,zero,100ce08 <get_cluster_flag+0x6c>
			return false;
 100ce00:	e03fff15 	stw	zero,-4(fp)
 100ce04:	00000d06 	br	100ce3c <get_cluster_flag+0xa0>
		}
	}
	*flag
 100ce08:	d0a6fa17 	ldw	r2,-25624(gp)
 100ce0c:	10800a17 	ldw	r2,40(r2)
 100ce10:	1007883a 	mov	r3,r2
 100ce14:	e0bffd17 	ldw	r2,-12(fp)
 100ce18:	10803fcc 	andi	r2,r2,255
 100ce1c:	1085883a 	add	r2,r2,r2
 100ce20:	1885883a 	add	r2,r3,r2
 100ce24:	1080002b 	ldhuio	r2,0(r2)
 100ce28:	1007883a 	mov	r3,r2
 100ce2c:	e0bffe17 	ldw	r2,-8(fp)
 100ce30:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 100ce34:	00800044 	movi	r2,1
 100ce38:	e0bfff15 	stw	r2,-4(fp)
 100ce3c:	e0bfff17 	ldw	r2,-4(fp)
}
 100ce40:	e037883a 	mov	sp,fp
 100ce44:	dfc00117 	ldw	ra,4(sp)
 100ce48:	df000017 	ldw	fp,0(sp)
 100ce4c:	dec00204 	addi	sp,sp,8
 100ce50:	f800283a 	ret

0100ce54 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 100ce54:	defff904 	addi	sp,sp,-28
 100ce58:	dfc00615 	stw	ra,24(sp)
 100ce5c:	df000515 	stw	fp,20(sp)
 100ce60:	df000504 	addi	fp,sp,20
 100ce64:	e13ffc15 	stw	r4,-16(fp)
 100ce68:	e1bffe15 	stw	r6,-8(fp)
 100ce6c:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100ce70:	e0bffc17 	ldw	r2,-16(fp)
 100ce74:	1006d23a 	srli	r3,r2,8
 100ce78:	d0a6f817 	ldw	r2,-25632(gp)
 100ce7c:	1885883a 	add	r2,r3,r2
 100ce80:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 100ce84:	e0bffe17 	ldw	r2,-8(fp)
 100ce88:	1005003a 	cmpeq	r2,r2,zero
 100ce8c:	1000071e 	bne	r2,zero,100ceac <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100ce90:	00804074 	movhi	r2,257
 100ce94:	10986504 	addi	r2,r2,24980
 100ce98:	10c01117 	ldw	r3,68(r2)
 100ce9c:	e0bffb17 	ldw	r2,-20(fp)
 100cea0:	10c5883a 	add	r2,r2,r3
 100cea4:	e0bffb15 	stw	r2,-20(fp)
 100cea8:	00000606 	br	100cec4 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 100ceac:	00804074 	movhi	r2,257
 100ceb0:	10986504 	addi	r2,r2,24980
 100ceb4:	10c01217 	ldw	r3,72(r2)
 100ceb8:	e0bffb17 	ldw	r2,-20(fp)
 100cebc:	10c5883a 	add	r2,r2,r3
 100cec0:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 100cec4:	d0e6fc17 	ldw	r3,-25616(gp)
 100cec8:	e0bffb17 	ldw	r2,-20(fp)
 100cecc:	10c00726 	beq	r2,r3,100ceec <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100ced0:	e13ffb17 	ldw	r4,-20(fp)
 100ced4:	000b883a 	mov	r5,zero
 100ced8:	100cca00 	call	100cca0 <Read_Sector_Data>
 100cedc:	1004c03a 	cmpne	r2,r2,zero
 100cee0:	1000021e 	bne	r2,zero,100ceec <mark_cluster+0x98>
			return false;
 100cee4:	e03fff15 	stw	zero,-4(fp)
 100cee8:	00000d06 	br	100cf20 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 100ceec:	d0a6fa17 	ldw	r2,-25624(gp)
 100cef0:	10800a17 	ldw	r2,40(r2)
 100cef4:	1007883a 	mov	r3,r2
 100cef8:	e0bffc17 	ldw	r2,-16(fp)
 100cefc:	10803fcc 	andi	r2,r2,255
 100cf00:	1085883a 	add	r2,r2,r2
 100cf04:	1885883a 	add	r2,r3,r2
 100cf08:	e0fffd0f 	ldh	r3,-12(fp)
 100cf0c:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 100cf10:	00800044 	movi	r2,1
 100cf14:	d0a6fb15 	stw	r2,-25620(gp)
	return true;
 100cf18:	00800044 	movi	r2,1
 100cf1c:	e0bfff15 	stw	r2,-4(fp)
 100cf20:	e0bfff17 	ldw	r2,-4(fp)
}
 100cf24:	e037883a 	mov	sp,fp
 100cf28:	dfc00117 	ldw	ra,4(sp)
 100cf2c:	df000017 	ldw	fp,0(sp)
 100cf30:	dec00204 	addi	sp,sp,8
 100cf34:	f800283a 	ret

0100cf38 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 100cf38:	defff704 	addi	sp,sp,-36
 100cf3c:	dfc00815 	stw	ra,32(sp)
 100cf40:	df000715 	stw	fp,28(sp)
 100cf44:	df000704 	addi	fp,sp,28
	bool result = false;
 100cf48:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 100cf4c:	0009883a 	mov	r4,zero
 100cf50:	000b883a 	mov	r5,zero
 100cf54:	10110d00 	call	10110d0 <Read_Sector_Data_Attempt_CRC>
 100cf58:	1005003a 	cmpeq	r2,r2,zero
 100cf5c:	10005c1e 	bne	r2,zero,100d0d0 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 100cf60:	d0a6fa17 	ldw	r2,-25624(gp)
 100cf64:	10800a17 	ldw	r2,40(r2)
 100cf68:	10807f84 	addi	r2,r2,510
 100cf6c:	1080002b 	ldhuio	r2,0(r2)
 100cf70:	10bfffcc 	andi	r2,r2,65535
 100cf74:	10a0001c 	xori	r2,r2,32768
 100cf78:	10a00004 	addi	r2,r2,-32768
 100cf7c:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 100cf80:	e0bffd17 	ldw	r2,-12(fp)
 100cf84:	10ffffcc 	andi	r3,r2,65535
 100cf88:	00aa9554 	movui	r2,43605
 100cf8c:	1880501e 	bne	r3,r2,100d0d0 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 100cf90:	e03ffe15 	stw	zero,-8(fp)
 100cf94:	00004b06 	br	100d0c4 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 100cf98:	e0bffe17 	ldw	r2,-8(fp)
 100cf9c:	1004913a 	slli	r2,r2,4
 100cfa0:	10806f84 	addi	r2,r2,446
 100cfa4:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
 100cfa8:	d0a6fa17 	ldw	r2,-25624(gp)
 100cfac:	10800a17 	ldw	r2,40(r2)
 100cfb0:	1007883a 	mov	r3,r2
 100cfb4:	e0bffa17 	ldw	r2,-24(fp)
 100cfb8:	1885883a 	add	r2,r3,r2
 100cfbc:	10800104 	addi	r2,r2,4
 100cfc0:	10800023 	ldbuio	r2,0(r2)
 100cfc4:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 100cfc8:	e0bff907 	ldb	r2,-28(fp)
 100cfcc:	10800060 	cmpeqi	r2,r2,1
 100cfd0:	1000091e 	bne	r2,zero,100cff8 <Check_for_Master_Boot_Record+0xc0>
 100cfd4:	e0bff907 	ldb	r2,-28(fp)
 100cfd8:	10800120 	cmpeqi	r2,r2,4
 100cfdc:	1000061e 	bne	r2,zero,100cff8 <Check_for_Master_Boot_Record+0xc0>
 100cfe0:	e0bff907 	ldb	r2,-28(fp)
 100cfe4:	108001a0 	cmpeqi	r2,r2,6
 100cfe8:	1000031e 	bne	r2,zero,100cff8 <Check_for_Master_Boot_Record+0xc0>
 100cfec:	e0bff907 	ldb	r2,-28(fp)
 100cff0:	10800398 	cmpnei	r2,r2,14
 100cff4:	1000301e 	bne	r2,zero,100d0b8 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
 100cff8:	d0a6fa17 	ldw	r2,-25624(gp)
 100cffc:	10800a17 	ldw	r2,40(r2)
 100d000:	1007883a 	mov	r3,r2
 100d004:	e0bffa17 	ldw	r2,-24(fp)
 100d008:	1885883a 	add	r2,r3,r2
 100d00c:	10800284 	addi	r2,r2,10
 100d010:	1080002b 	ldhuio	r2,0(r2)
 100d014:	10bfffcc 	andi	r2,r2,65535
 100d018:	1008943a 	slli	r4,r2,16
 100d01c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d020:	10800a17 	ldw	r2,40(r2)
 100d024:	1007883a 	mov	r3,r2
 100d028:	e0bffa17 	ldw	r2,-24(fp)
 100d02c:	1885883a 	add	r2,r3,r2
 100d030:	10800204 	addi	r2,r2,8
 100d034:	1080002b 	ldhuio	r2,0(r2)
 100d038:	10bfffcc 	andi	r2,r2,65535
 100d03c:	2084b03a 	or	r2,r4,r2
 100d040:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
 100d044:	d0a6fa17 	ldw	r2,-25624(gp)
 100d048:	10800a17 	ldw	r2,40(r2)
 100d04c:	1007883a 	mov	r3,r2
 100d050:	e0bffa17 	ldw	r2,-24(fp)
 100d054:	1885883a 	add	r2,r3,r2
 100d058:	10800384 	addi	r2,r2,14
 100d05c:	1080002b 	ldhuio	r2,0(r2)
 100d060:	10bfffcc 	andi	r2,r2,65535
 100d064:	1008943a 	slli	r4,r2,16
 100d068:	d0a6fa17 	ldw	r2,-25624(gp)
 100d06c:	10800a17 	ldw	r2,40(r2)
 100d070:	1007883a 	mov	r3,r2
 100d074:	e0bffa17 	ldw	r2,-24(fp)
 100d078:	1885883a 	add	r2,r3,r2
 100d07c:	10800304 	addi	r2,r2,12
 100d080:	1080002b 	ldhuio	r2,0(r2)
 100d084:	10bfffcc 	andi	r2,r2,65535
 100d088:	2084b03a 	or	r2,r4,r2
 100d08c:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 100d090:	e0bffb17 	ldw	r2,-20(fp)
 100d094:	10800050 	cmplti	r2,r2,1
 100d098:	1000071e 	bne	r2,zero,100d0b8 <Check_for_Master_Boot_Record+0x180>
						result = true;
 100d09c:	00800044 	movi	r2,1
 100d0a0:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 100d0a4:	e0bffb17 	ldw	r2,-20(fp)
 100d0a8:	d0a6f915 	stw	r2,-25628(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 100d0ac:	e0bffc17 	ldw	r2,-16(fp)
 100d0b0:	d0a6f815 	stw	r2,-25632(gp)
						break;
 100d0b4:	00000606 	br	100d0d0 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 100d0b8:	e0bffe17 	ldw	r2,-8(fp)
 100d0bc:	10800044 	addi	r2,r2,1
 100d0c0:	e0bffe15 	stw	r2,-8(fp)
 100d0c4:	e0bffe17 	ldw	r2,-8(fp)
 100d0c8:	10800110 	cmplti	r2,r2,4
 100d0cc:	103fb21e 	bne	r2,zero,100cf98 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 100d0d0:	e0bfff17 	ldw	r2,-4(fp)
}
 100d0d4:	e037883a 	mov	sp,fp
 100d0d8:	dfc00117 	ldw	ra,4(sp)
 100d0dc:	df000017 	ldw	fp,0(sp)
 100d0e0:	dec00204 	addi	sp,sp,8
 100d0e4:	f800283a 	ret

0100d0e8 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 100d0e8:	defff804 	addi	sp,sp,-32
 100d0ec:	dfc00715 	stw	ra,28(sp)
 100d0f0:	df000615 	stw	fp,24(sp)
 100d0f4:	df000604 	addi	fp,sp,24
 100d0f8:	e13ffc15 	stw	r4,-16(fp)
 100d0fc:	e17ffd15 	stw	r5,-12(fp)
 100d100:	e1bffe15 	stw	r6,-8(fp)
 100d104:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 100d108:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 100d10c:	e0bffc17 	ldw	r2,-16(fp)
 100d110:	108007cc 	andi	r2,r2,31
 100d114:	1004c03a 	cmpne	r2,r2,zero
 100d118:	10008e1e 	bne	r2,zero,100d354 <Read_File_Record_At_Offset+0x26c>
 100d11c:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100d120:	1005003a 	cmpeq	r2,r2,zero
 100d124:	10008b1e 	bne	r2,zero,100d354 <Read_File_Record_At_Offset+0x26c>
 100d128:	d0a6f117 	ldw	r2,-25660(gp)
 100d12c:	1005003a 	cmpeq	r2,r2,zero
 100d130:	1000881e 	bne	r2,zero,100d354 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 100d134:	e03ffa15 	stw	zero,-24(fp)
 100d138:	00001006 	br	100d17c <Read_File_Record_At_Offset+0x94>
			record->name[counter]
 100d13c:	e17ffa17 	ldw	r5,-24(fp)
 100d140:	d0a6fa17 	ldw	r2,-25624(gp)
 100d144:	10800a17 	ldw	r2,40(r2)
 100d148:	1009883a 	mov	r4,r2
 100d14c:	e0fffc17 	ldw	r3,-16(fp)
 100d150:	e0bffa17 	ldw	r2,-24(fp)
 100d154:	1885883a 	add	r2,r3,r2
 100d158:	2085883a 	add	r2,r4,r2
 100d15c:	10800023 	ldbuio	r2,0(r2)
 100d160:	1007883a 	mov	r3,r2
 100d164:	e0bffd17 	ldw	r2,-12(fp)
 100d168:	1145883a 	add	r2,r2,r5
 100d16c:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 100d170:	e0bffa17 	ldw	r2,-24(fp)
 100d174:	10800044 	addi	r2,r2,1
 100d178:	e0bffa15 	stw	r2,-24(fp)
 100d17c:	e0bffa17 	ldw	r2,-24(fp)
 100d180:	10800210 	cmplti	r2,r2,8
 100d184:	103fed1e 	bne	r2,zero,100d13c <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100d188:	e03ffa15 	stw	zero,-24(fp)
 100d18c:	00001206 	br	100d1d8 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
 100d190:	e17ffa17 	ldw	r5,-24(fp)
 100d194:	d0a6fa17 	ldw	r2,-25624(gp)
 100d198:	10800a17 	ldw	r2,40(r2)
 100d19c:	1009883a 	mov	r4,r2
 100d1a0:	e0fffc17 	ldw	r3,-16(fp)
 100d1a4:	e0bffa17 	ldw	r2,-24(fp)
 100d1a8:	1885883a 	add	r2,r3,r2
 100d1ac:	2085883a 	add	r2,r4,r2
 100d1b0:	10800204 	addi	r2,r2,8
 100d1b4:	10800023 	ldbuio	r2,0(r2)
 100d1b8:	1007883a 	mov	r3,r2
 100d1bc:	e0bffd17 	ldw	r2,-12(fp)
 100d1c0:	2885883a 	add	r2,r5,r2
 100d1c4:	10800204 	addi	r2,r2,8
 100d1c8:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100d1cc:	e0bffa17 	ldw	r2,-24(fp)
 100d1d0:	10800044 	addi	r2,r2,1
 100d1d4:	e0bffa15 	stw	r2,-24(fp)
 100d1d8:	e0bffa17 	ldw	r2,-24(fp)
 100d1dc:	108000d0 	cmplti	r2,r2,3
 100d1e0:	103feb1e 	bne	r2,zero,100d190 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
 100d1e4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d1e8:	10800a17 	ldw	r2,40(r2)
 100d1ec:	1007883a 	mov	r3,r2
 100d1f0:	e0bffc17 	ldw	r2,-16(fp)
 100d1f4:	1885883a 	add	r2,r3,r2
 100d1f8:	108002c4 	addi	r2,r2,11
 100d1fc:	10800023 	ldbuio	r2,0(r2)
 100d200:	1007883a 	mov	r3,r2
 100d204:	e0bffd17 	ldw	r2,-12(fp)
 100d208:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
 100d20c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d210:	10800a17 	ldw	r2,40(r2)
 100d214:	1007883a 	mov	r3,r2
 100d218:	e0bffc17 	ldw	r2,-16(fp)
 100d21c:	1885883a 	add	r2,r3,r2
 100d220:	10800384 	addi	r2,r2,14
 100d224:	1080002b 	ldhuio	r2,0(r2)
 100d228:	1007883a 	mov	r3,r2
 100d22c:	e0bffd17 	ldw	r2,-12(fp)
 100d230:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
 100d234:	d0a6fa17 	ldw	r2,-25624(gp)
 100d238:	10800a17 	ldw	r2,40(r2)
 100d23c:	1007883a 	mov	r3,r2
 100d240:	e0bffc17 	ldw	r2,-16(fp)
 100d244:	1885883a 	add	r2,r3,r2
 100d248:	10800404 	addi	r2,r2,16
 100d24c:	1080002b 	ldhuio	r2,0(r2)
 100d250:	1007883a 	mov	r3,r2
 100d254:	e0bffd17 	ldw	r2,-12(fp)
 100d258:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
 100d25c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d260:	10800a17 	ldw	r2,40(r2)
 100d264:	1007883a 	mov	r3,r2
 100d268:	e0bffc17 	ldw	r2,-16(fp)
 100d26c:	1885883a 	add	r2,r3,r2
 100d270:	10800484 	addi	r2,r2,18
 100d274:	1080002b 	ldhuio	r2,0(r2)
 100d278:	1007883a 	mov	r3,r2
 100d27c:	e0bffd17 	ldw	r2,-12(fp)
 100d280:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
 100d284:	d0a6fa17 	ldw	r2,-25624(gp)
 100d288:	10800a17 	ldw	r2,40(r2)
 100d28c:	1007883a 	mov	r3,r2
 100d290:	e0bffc17 	ldw	r2,-16(fp)
 100d294:	1885883a 	add	r2,r3,r2
 100d298:	10800584 	addi	r2,r2,22
 100d29c:	1080002b 	ldhuio	r2,0(r2)
 100d2a0:	1007883a 	mov	r3,r2
 100d2a4:	e0bffd17 	ldw	r2,-12(fp)
 100d2a8:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
 100d2ac:	d0a6fa17 	ldw	r2,-25624(gp)
 100d2b0:	10800a17 	ldw	r2,40(r2)
 100d2b4:	1007883a 	mov	r3,r2
 100d2b8:	e0bffc17 	ldw	r2,-16(fp)
 100d2bc:	1885883a 	add	r2,r3,r2
 100d2c0:	10800604 	addi	r2,r2,24
 100d2c4:	1080002b 	ldhuio	r2,0(r2)
 100d2c8:	1007883a 	mov	r3,r2
 100d2cc:	e0bffd17 	ldw	r2,-12(fp)
 100d2d0:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
 100d2d4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d2d8:	10800a17 	ldw	r2,40(r2)
 100d2dc:	1007883a 	mov	r3,r2
 100d2e0:	e0bffc17 	ldw	r2,-16(fp)
 100d2e4:	1885883a 	add	r2,r3,r2
 100d2e8:	10800684 	addi	r2,r2,26
 100d2ec:	1080002b 	ldhuio	r2,0(r2)
 100d2f0:	1007883a 	mov	r3,r2
 100d2f4:	e0bffd17 	ldw	r2,-12(fp)
 100d2f8:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
 100d2fc:	d0a6fa17 	ldw	r2,-25624(gp)
 100d300:	10800a17 	ldw	r2,40(r2)
 100d304:	1007883a 	mov	r3,r2
 100d308:	e0bffc17 	ldw	r2,-16(fp)
 100d30c:	1885883a 	add	r2,r3,r2
 100d310:	10800704 	addi	r2,r2,28
 100d314:	10800037 	ldwio	r2,0(r2)
 100d318:	1007883a 	mov	r3,r2
 100d31c:	e0bffd17 	ldw	r2,-12(fp)
 100d320:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 100d324:	e0fffd17 	ldw	r3,-12(fp)
 100d328:	e0bffe17 	ldw	r2,-8(fp)
 100d32c:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 100d330:	e0fffd17 	ldw	r3,-12(fp)
 100d334:	e0bfff17 	ldw	r2,-4(fp)
 100d338:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 100d33c:	e0bffc17 	ldw	r2,-16(fp)
 100d340:	1007883a 	mov	r3,r2
 100d344:	e0bffd17 	ldw	r2,-12(fp)
 100d348:	10c00c0d 	sth	r3,48(r2)
		result = true;
 100d34c:	00800044 	movi	r2,1
 100d350:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 100d354:	e0bffb17 	ldw	r2,-20(fp)
}
 100d358:	e037883a 	mov	sp,fp
 100d35c:	dfc00117 	ldw	ra,4(sp)
 100d360:	df000017 	ldw	fp,0(sp)
 100d364:	dec00204 	addi	sp,sp,8
 100d368:	f800283a 	ret

0100d36c <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 100d36c:	defff904 	addi	sp,sp,-28
 100d370:	dfc00615 	stw	ra,24(sp)
 100d374:	df000515 	stw	fp,20(sp)
 100d378:	df000504 	addi	fp,sp,20
 100d37c:	e13ffe15 	stw	r4,-8(fp)
 100d380:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100d384:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 100d388:	e0bffe17 	ldw	r2,-8(fp)
 100d38c:	108007cc 	andi	r2,r2,31
 100d390:	1004c03a 	cmpne	r2,r2,zero
 100d394:	10009d1e 	bne	r2,zero,100d60c <Write_File_Record_At_Offset+0x2a0>
 100d398:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100d39c:	1005003a 	cmpeq	r2,r2,zero
 100d3a0:	10009a1e 	bne	r2,zero,100d60c <Write_File_Record_At_Offset+0x2a0>
 100d3a4:	d0a6f117 	ldw	r2,-25660(gp)
 100d3a8:	1005003a 	cmpeq	r2,r2,zero
 100d3ac:	1000971e 	bne	r2,zero,100d60c <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 100d3b0:	e03ffc15 	stw	zero,-16(fp)
 100d3b4:	00001e06 	br	100d430 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 100d3b8:	e0bffc17 	ldw	r2,-16(fp)
 100d3bc:	10c00044 	addi	r3,r2,1
 100d3c0:	e0bfff17 	ldw	r2,-4(fp)
 100d3c4:	10c5883a 	add	r2,r2,r3
 100d3c8:	10800003 	ldbu	r2,0(r2)
 100d3cc:	10803fcc 	andi	r2,r2,255
 100d3d0:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 100d3d4:	e0bffb0f 	ldh	r2,-20(fp)
 100d3d8:	1004923a 	slli	r2,r2,8
 100d3dc:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 100d3e0:	e0fffc17 	ldw	r3,-16(fp)
 100d3e4:	e0bfff17 	ldw	r2,-4(fp)
 100d3e8:	10c5883a 	add	r2,r2,r3
 100d3ec:	10800003 	ldbu	r2,0(r2)
 100d3f0:	10c03fcc 	andi	r3,r2,255
 100d3f4:	e0bffb0b 	ldhu	r2,-20(fp)
 100d3f8:	10c4b03a 	or	r2,r2,r3
 100d3fc:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 100d400:	d0a6fa17 	ldw	r2,-25624(gp)
 100d404:	10800a17 	ldw	r2,40(r2)
 100d408:	1009883a 	mov	r4,r2
 100d40c:	e0fffe17 	ldw	r3,-8(fp)
 100d410:	e0bffc17 	ldw	r2,-16(fp)
 100d414:	1885883a 	add	r2,r3,r2
 100d418:	2085883a 	add	r2,r4,r2
 100d41c:	e0fffb0f 	ldh	r3,-20(fp)
 100d420:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 100d424:	e0bffc17 	ldw	r2,-16(fp)
 100d428:	10800084 	addi	r2,r2,2
 100d42c:	e0bffc15 	stw	r2,-16(fp)
 100d430:	e0bffc17 	ldw	r2,-16(fp)
 100d434:	10800210 	cmplti	r2,r2,8
 100d438:	103fdf1e 	bne	r2,zero,100d3b8 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 100d43c:	e03ffc15 	stw	zero,-16(fp)
 100d440:	00001306 	br	100d490 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 100d444:	d0a6fa17 	ldw	r2,-25624(gp)
 100d448:	10800a17 	ldw	r2,40(r2)
 100d44c:	1009883a 	mov	r4,r2
 100d450:	e0fffe17 	ldw	r3,-8(fp)
 100d454:	e0bffc17 	ldw	r2,-16(fp)
 100d458:	1885883a 	add	r2,r3,r2
 100d45c:	2085883a 	add	r2,r4,r2
 100d460:	11000204 	addi	r4,r2,8
 100d464:	e0fffc17 	ldw	r3,-16(fp)
 100d468:	e0bfff17 	ldw	r2,-4(fp)
 100d46c:	1885883a 	add	r2,r3,r2
 100d470:	10800204 	addi	r2,r2,8
 100d474:	10800003 	ldbu	r2,0(r2)
 100d478:	10c03fcc 	andi	r3,r2,255
 100d47c:	2005883a 	mov	r2,r4
 100d480:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 100d484:	e0bffc17 	ldw	r2,-16(fp)
 100d488:	10800044 	addi	r2,r2,1
 100d48c:	e0bffc15 	stw	r2,-16(fp)
 100d490:	e0bffc17 	ldw	r2,-16(fp)
 100d494:	108000d0 	cmplti	r2,r2,3
 100d498:	103fea1e 	bne	r2,zero,100d444 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 100d49c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d4a0:	10800a17 	ldw	r2,40(r2)
 100d4a4:	1007883a 	mov	r3,r2
 100d4a8:	e0bffe17 	ldw	r2,-8(fp)
 100d4ac:	1885883a 	add	r2,r3,r2
 100d4b0:	110002c4 	addi	r4,r2,11
 100d4b4:	e0bfff17 	ldw	r2,-4(fp)
 100d4b8:	108002c3 	ldbu	r2,11(r2)
 100d4bc:	10c03fcc 	andi	r3,r2,255
 100d4c0:	2005883a 	mov	r2,r4
 100d4c4:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 100d4c8:	d0a6fa17 	ldw	r2,-25624(gp)
 100d4cc:	10800a17 	ldw	r2,40(r2)
 100d4d0:	1007883a 	mov	r3,r2
 100d4d4:	e0bffe17 	ldw	r2,-8(fp)
 100d4d8:	1885883a 	add	r2,r3,r2
 100d4dc:	11000384 	addi	r4,r2,14
 100d4e0:	e0bfff17 	ldw	r2,-4(fp)
 100d4e4:	1080030b 	ldhu	r2,12(r2)
 100d4e8:	10ffffcc 	andi	r3,r2,65535
 100d4ec:	2005883a 	mov	r2,r4
 100d4f0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 100d4f4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d4f8:	10800a17 	ldw	r2,40(r2)
 100d4fc:	1007883a 	mov	r3,r2
 100d500:	e0bffe17 	ldw	r2,-8(fp)
 100d504:	1885883a 	add	r2,r3,r2
 100d508:	11000404 	addi	r4,r2,16
 100d50c:	e0bfff17 	ldw	r2,-4(fp)
 100d510:	1080038b 	ldhu	r2,14(r2)
 100d514:	10ffffcc 	andi	r3,r2,65535
 100d518:	2005883a 	mov	r2,r4
 100d51c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 100d520:	d0a6fa17 	ldw	r2,-25624(gp)
 100d524:	10800a17 	ldw	r2,40(r2)
 100d528:	1007883a 	mov	r3,r2
 100d52c:	e0bffe17 	ldw	r2,-8(fp)
 100d530:	1885883a 	add	r2,r3,r2
 100d534:	11000484 	addi	r4,r2,18
 100d538:	e0bfff17 	ldw	r2,-4(fp)
 100d53c:	1080040b 	ldhu	r2,16(r2)
 100d540:	10ffffcc 	andi	r3,r2,65535
 100d544:	2005883a 	mov	r2,r4
 100d548:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 100d54c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d550:	10800a17 	ldw	r2,40(r2)
 100d554:	1007883a 	mov	r3,r2
 100d558:	e0bffe17 	ldw	r2,-8(fp)
 100d55c:	1885883a 	add	r2,r3,r2
 100d560:	11000584 	addi	r4,r2,22
 100d564:	e0bfff17 	ldw	r2,-4(fp)
 100d568:	1080048b 	ldhu	r2,18(r2)
 100d56c:	10ffffcc 	andi	r3,r2,65535
 100d570:	2005883a 	mov	r2,r4
 100d574:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 100d578:	d0a6fa17 	ldw	r2,-25624(gp)
 100d57c:	10800a17 	ldw	r2,40(r2)
 100d580:	1007883a 	mov	r3,r2
 100d584:	e0bffe17 	ldw	r2,-8(fp)
 100d588:	1885883a 	add	r2,r3,r2
 100d58c:	11000604 	addi	r4,r2,24
 100d590:	e0bfff17 	ldw	r2,-4(fp)
 100d594:	1080050b 	ldhu	r2,20(r2)
 100d598:	10ffffcc 	andi	r3,r2,65535
 100d59c:	2005883a 	mov	r2,r4
 100d5a0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 100d5a4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d5a8:	10800a17 	ldw	r2,40(r2)
 100d5ac:	1007883a 	mov	r3,r2
 100d5b0:	e0bffe17 	ldw	r2,-8(fp)
 100d5b4:	1885883a 	add	r2,r3,r2
 100d5b8:	11000684 	addi	r4,r2,26
 100d5bc:	e0bfff17 	ldw	r2,-4(fp)
 100d5c0:	1080058b 	ldhu	r2,22(r2)
 100d5c4:	10ffffcc 	andi	r3,r2,65535
 100d5c8:	2005883a 	mov	r2,r4
 100d5cc:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 100d5d0:	d0a6fa17 	ldw	r2,-25624(gp)
 100d5d4:	10800a17 	ldw	r2,40(r2)
 100d5d8:	1007883a 	mov	r3,r2
 100d5dc:	e0bffe17 	ldw	r2,-8(fp)
 100d5e0:	1885883a 	add	r2,r3,r2
 100d5e4:	11000704 	addi	r4,r2,28
 100d5e8:	e0bfff17 	ldw	r2,-4(fp)
 100d5ec:	10800617 	ldw	r2,24(r2)
 100d5f0:	1007883a 	mov	r3,r2
 100d5f4:	2005883a 	mov	r2,r4
 100d5f8:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
 100d5fc:	00800044 	movi	r2,1
 100d600:	d0a6fb15 	stw	r2,-25620(gp)
		result = true;
 100d604:	00800044 	movi	r2,1
 100d608:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 100d60c:	e0bffd17 	ldw	r2,-12(fp)
}
 100d610:	e037883a 	mov	sp,fp
 100d614:	dfc00117 	ldw	ra,4(sp)
 100d618:	df000017 	ldw	fp,0(sp)
 100d61c:	dec00204 	addi	sp,sp,8
 100d620:	f800283a 	ret

0100d624 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 100d624:	defff804 	addi	sp,sp,-32
 100d628:	dfc00715 	stw	ra,28(sp)
 100d62c:	df000615 	stw	fp,24(sp)
 100d630:	dc000515 	stw	r16,20(sp)
 100d634:	df000504 	addi	fp,sp,20
 100d638:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 100d63c:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 100d640:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 100d644:	0009883a 	mov	r4,zero
 100d648:	e17fff17 	ldw	r5,-4(fp)
 100d64c:	10110d00 	call	10110d0 <Read_Sector_Data_Attempt_CRC>
 100d650:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 100d654:	d0a6fa17 	ldw	r2,-25624(gp)
 100d658:	10800a17 	ldw	r2,40(r2)
 100d65c:	10807f84 	addi	r2,r2,510
 100d660:	1080002b 	ldhuio	r2,0(r2)
 100d664:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 100d668:	e0bffc0f 	ldh	r2,-16(fp)
 100d66c:	10ffffcc 	andi	r3,r2,65535
 100d670:	00aa9554 	movui	r2,43605
 100d674:	1881751e 	bne	r3,r2,100dc4c <Check_for_DOS_FAT+0x628>
 100d678:	e0bffe17 	ldw	r2,-8(fp)
 100d67c:	1005003a 	cmpeq	r2,r2,zero
 100d680:	1001721e 	bne	r2,zero,100dc4c <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
 100d684:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
 100d688:	d0a6fa17 	ldw	r2,-25624(gp)
 100d68c:	10800a17 	ldw	r2,40(r2)
 100d690:	10800023 	ldbuio	r2,0(r2)
 100d694:	1007883a 	mov	r3,r2
 100d698:	00804074 	movhi	r2,257
 100d69c:	10986504 	addi	r2,r2,24980
 100d6a0:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
 100d6a4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d6a8:	10800a17 	ldw	r2,40(r2)
 100d6ac:	10800044 	addi	r2,r2,1
 100d6b0:	10800023 	ldbuio	r2,0(r2)
 100d6b4:	1007883a 	mov	r3,r2
 100d6b8:	00804074 	movhi	r2,257
 100d6bc:	10986504 	addi	r2,r2,24980
 100d6c0:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
 100d6c4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d6c8:	10800a17 	ldw	r2,40(r2)
 100d6cc:	10800084 	addi	r2,r2,2
 100d6d0:	10800023 	ldbuio	r2,0(r2)
 100d6d4:	1007883a 	mov	r3,r2
 100d6d8:	00804074 	movhi	r2,257
 100d6dc:	10986504 	addi	r2,r2,24980
 100d6e0:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 100d6e4:	e03ffd15 	stw	zero,-12(fp)
 100d6e8:	00001006 	br	100d72c <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
 100d6ec:	e13ffd17 	ldw	r4,-12(fp)
 100d6f0:	d0a6fa17 	ldw	r2,-25624(gp)
 100d6f4:	10800a17 	ldw	r2,40(r2)
 100d6f8:	1007883a 	mov	r3,r2
 100d6fc:	e0bffd17 	ldw	r2,-12(fp)
 100d700:	1885883a 	add	r2,r3,r2
 100d704:	108000c4 	addi	r2,r2,3
 100d708:	10800023 	ldbuio	r2,0(r2)
 100d70c:	1007883a 	mov	r3,r2
 100d710:	00804074 	movhi	r2,257
 100d714:	10986504 	addi	r2,r2,24980
 100d718:	1105883a 	add	r2,r2,r4
 100d71c:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 100d720:	e0bffd17 	ldw	r2,-12(fp)
 100d724:	10800044 	addi	r2,r2,1
 100d728:	e0bffd15 	stw	r2,-12(fp)
 100d72c:	e0bffd17 	ldw	r2,-12(fp)
 100d730:	10800210 	cmplti	r2,r2,8
 100d734:	103fed1e 	bne	r2,zero,100d6ec <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
 100d738:	d0a6fa17 	ldw	r2,-25624(gp)
 100d73c:	10800a17 	ldw	r2,40(r2)
 100d740:	10800304 	addi	r2,r2,12
 100d744:	10800023 	ldbuio	r2,0(r2)
 100d748:	10803fcc 	andi	r2,r2,255
 100d74c:	1004923a 	slli	r2,r2,8
 100d750:	1007883a 	mov	r3,r2
 100d754:	d0a6fa17 	ldw	r2,-25624(gp)
 100d758:	10800a17 	ldw	r2,40(r2)
 100d75c:	108002c4 	addi	r2,r2,11
 100d760:	10800023 	ldbuio	r2,0(r2)
 100d764:	10803fcc 	andi	r2,r2,255
 100d768:	1080201c 	xori	r2,r2,128
 100d76c:	10bfe004 	addi	r2,r2,-128
 100d770:	1884b03a 	or	r2,r3,r2
 100d774:	1007883a 	mov	r3,r2
 100d778:	00804074 	movhi	r2,257
 100d77c:	10986504 	addi	r2,r2,24980
 100d780:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
 100d784:	d0a6fa17 	ldw	r2,-25624(gp)
 100d788:	10800a17 	ldw	r2,40(r2)
 100d78c:	10800344 	addi	r2,r2,13
 100d790:	10800023 	ldbuio	r2,0(r2)
 100d794:	1007883a 	mov	r3,r2
 100d798:	00804074 	movhi	r2,257
 100d79c:	10986504 	addi	r2,r2,24980
 100d7a0:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
 100d7a4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d7a8:	10800a17 	ldw	r2,40(r2)
 100d7ac:	10800384 	addi	r2,r2,14
 100d7b0:	1080002b 	ldhuio	r2,0(r2)
 100d7b4:	1007883a 	mov	r3,r2
 100d7b8:	00804074 	movhi	r2,257
 100d7bc:	10986504 	addi	r2,r2,24980
 100d7c0:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
 100d7c4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d7c8:	10800a17 	ldw	r2,40(r2)
 100d7cc:	10800404 	addi	r2,r2,16
 100d7d0:	10800023 	ldbuio	r2,0(r2)
 100d7d4:	1007883a 	mov	r3,r2
 100d7d8:	00804074 	movhi	r2,257
 100d7dc:	10986504 	addi	r2,r2,24980
 100d7e0:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
 100d7e4:	d0a6fa17 	ldw	r2,-25624(gp)
 100d7e8:	10800a17 	ldw	r2,40(r2)
 100d7ec:	10800484 	addi	r2,r2,18
 100d7f0:	10800023 	ldbuio	r2,0(r2)
 100d7f4:	10803fcc 	andi	r2,r2,255
 100d7f8:	1004923a 	slli	r2,r2,8
 100d7fc:	1007883a 	mov	r3,r2
 100d800:	d0a6fa17 	ldw	r2,-25624(gp)
 100d804:	10800a17 	ldw	r2,40(r2)
 100d808:	10800444 	addi	r2,r2,17
 100d80c:	10800023 	ldbuio	r2,0(r2)
 100d810:	10803fcc 	andi	r2,r2,255
 100d814:	1884b03a 	or	r2,r3,r2
 100d818:	1007883a 	mov	r3,r2
 100d81c:	00804074 	movhi	r2,257
 100d820:	10986504 	addi	r2,r2,24980
 100d824:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
 100d828:	d0a6fa17 	ldw	r2,-25624(gp)
 100d82c:	10800a17 	ldw	r2,40(r2)
 100d830:	10800504 	addi	r2,r2,20
 100d834:	10800023 	ldbuio	r2,0(r2)
 100d838:	10803fcc 	andi	r2,r2,255
 100d83c:	1004923a 	slli	r2,r2,8
 100d840:	1007883a 	mov	r3,r2
 100d844:	d0a6fa17 	ldw	r2,-25624(gp)
 100d848:	10800a17 	ldw	r2,40(r2)
 100d84c:	108004c4 	addi	r2,r2,19
 100d850:	10800023 	ldbuio	r2,0(r2)
 100d854:	10803fcc 	andi	r2,r2,255
 100d858:	1884b03a 	or	r2,r3,r2
 100d85c:	1007883a 	mov	r3,r2
 100d860:	00804074 	movhi	r2,257
 100d864:	10986504 	addi	r2,r2,24980
 100d868:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
 100d86c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d870:	10800a17 	ldw	r2,40(r2)
 100d874:	10800544 	addi	r2,r2,21
 100d878:	10800023 	ldbuio	r2,0(r2)
 100d87c:	1007883a 	mov	r3,r2
 100d880:	00804074 	movhi	r2,257
 100d884:	10986504 	addi	r2,r2,24980
 100d888:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
 100d88c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d890:	10800a17 	ldw	r2,40(r2)
 100d894:	10800584 	addi	r2,r2,22
 100d898:	1080002b 	ldhuio	r2,0(r2)
 100d89c:	1007883a 	mov	r3,r2
 100d8a0:	00804074 	movhi	r2,257
 100d8a4:	10986504 	addi	r2,r2,24980
 100d8a8:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
 100d8ac:	d0a6fa17 	ldw	r2,-25624(gp)
 100d8b0:	10800a17 	ldw	r2,40(r2)
 100d8b4:	10800604 	addi	r2,r2,24
 100d8b8:	1080002b 	ldhuio	r2,0(r2)
 100d8bc:	1007883a 	mov	r3,r2
 100d8c0:	00804074 	movhi	r2,257
 100d8c4:	10986504 	addi	r2,r2,24980
 100d8c8:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
 100d8cc:	d0a6fa17 	ldw	r2,-25624(gp)
 100d8d0:	10800a17 	ldw	r2,40(r2)
 100d8d4:	10800684 	addi	r2,r2,26
 100d8d8:	1080002b 	ldhuio	r2,0(r2)
 100d8dc:	1007883a 	mov	r3,r2
 100d8e0:	00804074 	movhi	r2,257
 100d8e4:	10986504 	addi	r2,r2,24980
 100d8e8:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
 100d8ec:	d0a6fa17 	ldw	r2,-25624(gp)
 100d8f0:	10800a17 	ldw	r2,40(r2)
 100d8f4:	10800704 	addi	r2,r2,28
 100d8f8:	10800037 	ldwio	r2,0(r2)
 100d8fc:	1007883a 	mov	r3,r2
 100d900:	00804074 	movhi	r2,257
 100d904:	10986504 	addi	r2,r2,24980
 100d908:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
 100d90c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d910:	10800a17 	ldw	r2,40(r2)
 100d914:	10800804 	addi	r2,r2,32
 100d918:	10800037 	ldwio	r2,0(r2)
 100d91c:	1007883a 	mov	r3,r2
 100d920:	00804074 	movhi	r2,257
 100d924:	10986504 	addi	r2,r2,24980
 100d928:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
 100d92c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d930:	10800a17 	ldw	r2,40(r2)
 100d934:	10800904 	addi	r2,r2,36
 100d938:	10800023 	ldbuio	r2,0(r2)
 100d93c:	1007883a 	mov	r3,r2
 100d940:	00804074 	movhi	r2,257
 100d944:	10986504 	addi	r2,r2,24980
 100d948:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
 100d94c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d950:	10800a17 	ldw	r2,40(r2)
 100d954:	10800944 	addi	r2,r2,37
 100d958:	10800023 	ldbuio	r2,0(r2)
 100d95c:	1007883a 	mov	r3,r2
 100d960:	00804074 	movhi	r2,257
 100d964:	10986504 	addi	r2,r2,24980
 100d968:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
 100d96c:	d0a6fa17 	ldw	r2,-25624(gp)
 100d970:	10800a17 	ldw	r2,40(r2)
 100d974:	10800984 	addi	r2,r2,38
 100d978:	10800023 	ldbuio	r2,0(r2)
 100d97c:	1007883a 	mov	r3,r2
 100d980:	00804074 	movhi	r2,257
 100d984:	10986504 	addi	r2,r2,24980
 100d988:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
 100d98c:	00804074 	movhi	r2,257
 100d990:	10986504 	addi	r2,r2,24980
 100d994:	1080040b 	ldhu	r2,16(r2)
 100d998:	10ffffcc 	andi	r3,r2,65535
 100d99c:	00804074 	movhi	r2,257
 100d9a0:	10986504 	addi	r2,r2,24980
 100d9a4:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
 100d9a8:	00804074 	movhi	r2,257
 100d9ac:	10986504 	addi	r2,r2,24980
 100d9b0:	10c01117 	ldw	r3,68(r2)
 100d9b4:	00804074 	movhi	r2,257
 100d9b8:	10986504 	addi	r2,r2,24980
 100d9bc:	1080068b 	ldhu	r2,26(r2)
 100d9c0:	10bfffcc 	andi	r2,r2,65535
 100d9c4:	1887883a 	add	r3,r3,r2
 100d9c8:	00804074 	movhi	r2,257
 100d9cc:	10986504 	addi	r2,r2,24980
 100d9d0:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
 100d9d4:	00804074 	movhi	r2,257
 100d9d8:	10986504 	addi	r2,r2,24980
 100d9dc:	10c01217 	ldw	r3,72(r2)
 100d9e0:	00804074 	movhi	r2,257
 100d9e4:	10986504 	addi	r2,r2,24980
 100d9e8:	1080068b 	ldhu	r2,26(r2)
 100d9ec:	10bfffcc 	andi	r2,r2,65535
 100d9f0:	1887883a 	add	r3,r3,r2
 100d9f4:	00804074 	movhi	r2,257
 100d9f8:	10986504 	addi	r2,r2,24980
 100d9fc:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
 100da00:	00804074 	movhi	r2,257
 100da04:	10986504 	addi	r2,r2,24980
 100da08:	14001317 	ldw	r16,76(r2)
 100da0c:	00804074 	movhi	r2,257
 100da10:	10986504 	addi	r2,r2,24980
 100da14:	1080050b 	ldhu	r2,20(r2)
 100da18:	10bfffcc 	andi	r2,r2,65535
 100da1c:	1008917a 	slli	r4,r2,5
 100da20:	00804074 	movhi	r2,257
 100da24:	10986504 	addi	r2,r2,24980
 100da28:	1080030b 	ldhu	r2,12(r2)
 100da2c:	117fffcc 	andi	r5,r2,65535
 100da30:	100a37c0 	call	100a37c <__divsi3>
 100da34:	8087883a 	add	r3,r16,r2
 100da38:	00804074 	movhi	r2,257
 100da3c:	10986504 	addi	r2,r2,24980
 100da40:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 100da44:	00804074 	movhi	r2,257
 100da48:	10986504 	addi	r2,r2,24980
 100da4c:	1080058b 	ldhu	r2,22(r2)
 100da50:	10bfffcc 	andi	r2,r2,65535
 100da54:	1005003a 	cmpeq	r2,r2,zero
 100da58:	10000b1e 	bne	r2,zero,100da88 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 100da5c:	00804074 	movhi	r2,257
 100da60:	10986504 	addi	r2,r2,24980
 100da64:	1080058b 	ldhu	r2,22(r2)
 100da68:	113fffcc 	andi	r4,r2,65535
 100da6c:	00804074 	movhi	r2,257
 100da70:	10986504 	addi	r2,r2,24980
 100da74:	10800383 	ldbu	r2,14(r2)
 100da78:	11403fcc 	andi	r5,r2,255
 100da7c:	100a37c0 	call	100a37c <__divsi3>
 100da80:	e0bffb15 	stw	r2,-20(fp)
 100da84:	00000906 	br	100daac <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 100da88:	00804074 	movhi	r2,257
 100da8c:	10986504 	addi	r2,r2,24980
 100da90:	11000917 	ldw	r4,36(r2)
 100da94:	00804074 	movhi	r2,257
 100da98:	10986504 	addi	r2,r2,24980
 100da9c:	10800383 	ldbu	r2,14(r2)
 100daa0:	11403fcc 	andi	r5,r2,255
 100daa4:	100a43c0 	call	100a43c <__udivsi3>
 100daa8:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 100daac:	e0bffb17 	ldw	r2,-20(fp)
 100dab0:	1083fdc8 	cmpgei	r2,r2,4087
 100dab4:	1000051e 	bne	r2,zero,100dacc <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
 100dab8:	00c04074 	movhi	r3,257
 100dabc:	18d86504 	addi	r3,r3,24980
 100dac0:	00800304 	movi	r2,12
 100dac4:	18801085 	stb	r2,66(r3)
 100dac8:	00000c06 	br	100dafc <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
 100dacc:	e0fffb17 	ldw	r3,-20(fp)
 100dad0:	00bffb54 	movui	r2,65517
 100dad4:	10c00516 	blt	r2,r3,100daec <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
 100dad8:	00c04074 	movhi	r3,257
 100dadc:	18d86504 	addi	r3,r3,24980
 100dae0:	00800404 	movi	r2,16
 100dae4:	18801085 	stb	r2,66(r3)
 100dae8:	00000406 	br	100dafc <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 100daec:	00c04074 	movhi	r3,257
 100daf0:	18d86504 	addi	r3,r3,24980
 100daf4:	00800804 	movi	r2,32
 100daf8:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 100dafc:	e03ffd15 	stw	zero,-12(fp)
 100db00:	00001106 	br	100db48 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
 100db04:	e13ffd17 	ldw	r4,-12(fp)
 100db08:	d0a6fa17 	ldw	r2,-25624(gp)
 100db0c:	10800a17 	ldw	r2,40(r2)
 100db10:	1007883a 	mov	r3,r2
 100db14:	e0bffd17 	ldw	r2,-12(fp)
 100db18:	1885883a 	add	r2,r3,r2
 100db1c:	108009c4 	addi	r2,r2,39
 100db20:	10800023 	ldbuio	r2,0(r2)
 100db24:	1007883a 	mov	r3,r2
 100db28:	00804074 	movhi	r2,257
 100db2c:	10986504 	addi	r2,r2,24980
 100db30:	2085883a 	add	r2,r4,r2
 100db34:	10800a04 	addi	r2,r2,40
 100db38:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 100db3c:	e0bffd17 	ldw	r2,-12(fp)
 100db40:	10800044 	addi	r2,r2,1
 100db44:	e0bffd15 	stw	r2,-12(fp)
 100db48:	e0bffd17 	ldw	r2,-12(fp)
 100db4c:	10800110 	cmplti	r2,r2,4
 100db50:	103fec1e 	bne	r2,zero,100db04 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 100db54:	e03ffd15 	stw	zero,-12(fp)
 100db58:	00001106 	br	100dba0 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
 100db5c:	e13ffd17 	ldw	r4,-12(fp)
 100db60:	d0a6fa17 	ldw	r2,-25624(gp)
 100db64:	10800a17 	ldw	r2,40(r2)
 100db68:	1007883a 	mov	r3,r2
 100db6c:	e0bffd17 	ldw	r2,-12(fp)
 100db70:	1885883a 	add	r2,r3,r2
 100db74:	10800ac4 	addi	r2,r2,43
 100db78:	10800023 	ldbuio	r2,0(r2)
 100db7c:	1007883a 	mov	r3,r2
 100db80:	00804074 	movhi	r2,257
 100db84:	10986504 	addi	r2,r2,24980
 100db88:	2085883a 	add	r2,r4,r2
 100db8c:	10800b04 	addi	r2,r2,44
 100db90:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 100db94:	e0bffd17 	ldw	r2,-12(fp)
 100db98:	10800044 	addi	r2,r2,1
 100db9c:	e0bffd15 	stw	r2,-12(fp)
 100dba0:	e0bffd17 	ldw	r2,-12(fp)
 100dba4:	108002d0 	cmplti	r2,r2,11
 100dba8:	103fec1e 	bne	r2,zero,100db5c <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 100dbac:	e03ffd15 	stw	zero,-12(fp)
 100dbb0:	00001106 	br	100dbf8 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
 100dbb4:	e13ffd17 	ldw	r4,-12(fp)
 100dbb8:	d0a6fa17 	ldw	r2,-25624(gp)
 100dbbc:	10800a17 	ldw	r2,40(r2)
 100dbc0:	1007883a 	mov	r3,r2
 100dbc4:	e0bffd17 	ldw	r2,-12(fp)
 100dbc8:	1885883a 	add	r2,r3,r2
 100dbcc:	10800d84 	addi	r2,r2,54
 100dbd0:	10800023 	ldbuio	r2,0(r2)
 100dbd4:	1007883a 	mov	r3,r2
 100dbd8:	00804074 	movhi	r2,257
 100dbdc:	10986504 	addi	r2,r2,24980
 100dbe0:	2085883a 	add	r2,r4,r2
 100dbe4:	10800e04 	addi	r2,r2,56
 100dbe8:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 100dbec:	e0bffd17 	ldw	r2,-12(fp)
 100dbf0:	10800044 	addi	r2,r2,1
 100dbf4:	e0bffd15 	stw	r2,-12(fp)
 100dbf8:	e0bffd17 	ldw	r2,-12(fp)
 100dbfc:	10800210 	cmplti	r2,r2,8
 100dc00:	103fec1e 	bne	r2,zero,100dbb4 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 100dc04:	e03ffd15 	stw	zero,-12(fp)
 100dc08:	00000a06 	br	100dc34 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
 100dc0c:	e0bffd17 	ldw	r2,-12(fp)
 100dc10:	00c04074 	movhi	r3,257
 100dc14:	18d87a04 	addi	r3,r3,25064
 100dc18:	100491ba 	slli	r2,r2,6
 100dc1c:	10c5883a 	add	r2,r2,r3
 100dc20:	10800f04 	addi	r2,r2,60
 100dc24:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 100dc28:	e0bffd17 	ldw	r2,-12(fp)
 100dc2c:	10800044 	addi	r2,r2,1
 100dc30:	e0bffd15 	stw	r2,-12(fp)
 100dc34:	e0bffd17 	ldw	r2,-12(fp)
 100dc38:	10800510 	cmplti	r2,r2,20
 100dc3c:	103ff31e 	bne	r2,zero,100dc0c <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
 100dc40:	00800044 	movi	r2,1
 100dc44:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 100dc48:	00000106 	br	100dc50 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 100dc4c:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 100dc50:	e0bffe17 	ldw	r2,-8(fp)
}
 100dc54:	e037883a 	mov	sp,fp
 100dc58:	dfc00217 	ldw	ra,8(sp)
 100dc5c:	df000117 	ldw	fp,4(sp)
 100dc60:	dc000017 	ldw	r16,0(sp)
 100dc64:	dec00304 	addi	sp,sp,12
 100dc68:	f800283a 	ret

0100dc6c <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 100dc6c:	defffc04 	addi	sp,sp,-16
 100dc70:	dfc00315 	stw	ra,12(sp)
 100dc74:	df000215 	stw	fp,8(sp)
 100dc78:	df000204 	addi	fp,sp,8
	bool result = false;
 100dc7c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 100dc80:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100dc84:	1005003a 	cmpeq	r2,r2,zero
 100dc88:	1000331e 	bne	r2,zero,100dd58 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 100dc8c:	0009883a 	mov	r4,zero
 100dc90:	000b883a 	mov	r5,zero
 100dc94:	10110d00 	call	10110d0 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 100dc98:	d0a6f417 	ldw	r2,-25648(gp)
 100dc9c:	1080000b 	ldhu	r2,0(r2)
 100dca0:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 100dca4:	d026f815 	stw	zero,-25632(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 100dca8:	d026f915 	stw	zero,-25628(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
 100dcac:	e0bffe0f 	ldh	r2,-8(fp)
 100dcb0:	1004803a 	cmplt	r2,r2,zero
 100dcb4:	1000281e 	bne	r2,zero,100dd58 <Look_for_FAT16+0xec>
 100dcb8:	e0bffe0b 	ldhu	r2,-8(fp)
 100dcbc:	10bfffcc 	andi	r2,r2,65535
 100dcc0:	1083000c 	andi	r2,r2,3072
 100dcc4:	10830020 	cmpeqi	r2,r2,3072
 100dcc8:	1000231e 	bne	r2,zero,100dd58 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 100dccc:	e0bffe0b 	ldhu	r2,-8(fp)
 100dcd0:	10bfffcc 	andi	r2,r2,65535
 100dcd4:	1083000c 	andi	r2,r2,3072
 100dcd8:	10810018 	cmpnei	r2,r2,1024
 100dcdc:	1000031e 	bne	r2,zero,100dcec <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 100dce0:	0009883a 	mov	r4,zero
 100dce4:	100d6240 	call	100d624 <Check_for_DOS_FAT>
 100dce8:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 100dcec:	e0bffe0b 	ldhu	r2,-8(fp)
 100dcf0:	10bfffcc 	andi	r2,r2,65535
 100dcf4:	1083000c 	andi	r2,r2,3072
 100dcf8:	1004c03a 	cmpne	r2,r2,zero
 100dcfc:	1000061e 	bne	r2,zero,100dd18 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 100dd00:	100cf380 	call	100cf38 <Check_for_Master_Boot_Record>
 100dd04:	1005003a 	cmpeq	r2,r2,zero
 100dd08:	1000031e 	bne	r2,zero,100dd18 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 100dd0c:	d126f817 	ldw	r4,-25632(gp)
 100dd10:	100d6240 	call	100d624 <Check_for_DOS_FAT>
 100dd14:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 100dd18:	e0bfff17 	ldw	r2,-4(fp)
 100dd1c:	10800058 	cmpnei	r2,r2,1
 100dd20:	10000d1e 	bne	r2,zero,100dd58 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 100dd24:	00804074 	movhi	r2,257
 100dd28:	10986504 	addi	r2,r2,24980
 100dd2c:	10801083 	ldbu	r2,66(r2)
 100dd30:	10803fcc 	andi	r2,r2,255
 100dd34:	10800420 	cmpeqi	r2,r2,16
 100dd38:	1000021e 	bne	r2,zero,100dd44 <Look_for_FAT16+0xd8>
					result = false;
 100dd3c:	e03fff15 	stw	zero,-4(fp)
 100dd40:	00000506 	br	100dd58 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
 100dd44:	00804074 	movhi	r2,257
 100dd48:	10986504 	addi	r2,r2,24980
 100dd4c:	1080058b 	ldhu	r2,22(r2)
 100dd50:	10bfffcc 	andi	r2,r2,65535
 100dd54:	d0a6f915 	stw	r2,-25628(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 100dd58:	e0bfff17 	ldw	r2,-4(fp)
}
 100dd5c:	e037883a 	mov	sp,fp
 100dd60:	dfc00117 	ldw	ra,4(sp)
 100dd64:	df000017 	ldw	fp,0(sp)
 100dd68:	dec00204 	addi	sp,sp,8
 100dd6c:	f800283a 	ret

0100dd70 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 100dd70:	defffb04 	addi	sp,sp,-20
 100dd74:	dfc00415 	stw	ra,16(sp)
 100dd78:	df000315 	stw	fp,12(sp)
 100dd7c:	df000304 	addi	fp,sp,12
 100dd80:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 100dd84:	e13fff17 	ldw	r4,-4(fp)
 100dd88:	10011fc0 	call	10011fc <strlen>
 100dd8c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 100dd90:	e03ffe15 	stw	zero,-8(fp)
 100dd94:	00002206 	br	100de20 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 100dd98:	e0bffe17 	ldw	r2,-8(fp)
 100dd9c:	1007883a 	mov	r3,r2
 100dda0:	e0bfff17 	ldw	r2,-4(fp)
 100dda4:	1885883a 	add	r2,r3,r2
 100dda8:	10800003 	ldbu	r2,0(r2)
 100ddac:	10803fcc 	andi	r2,r2,255
 100ddb0:	1080201c 	xori	r2,r2,128
 100ddb4:	10bfe004 	addi	r2,r2,-128
 100ddb8:	10801850 	cmplti	r2,r2,97
 100ddbc:	1000151e 	bne	r2,zero,100de14 <filename_to_upper_case+0xa4>
 100ddc0:	e0bffe17 	ldw	r2,-8(fp)
 100ddc4:	1007883a 	mov	r3,r2
 100ddc8:	e0bfff17 	ldw	r2,-4(fp)
 100ddcc:	1885883a 	add	r2,r3,r2
 100ddd0:	10800003 	ldbu	r2,0(r2)
 100ddd4:	10803fcc 	andi	r2,r2,255
 100ddd8:	1080201c 	xori	r2,r2,128
 100dddc:	10bfe004 	addi	r2,r2,-128
 100dde0:	10801ec8 	cmpgei	r2,r2,123
 100dde4:	10000b1e 	bne	r2,zero,100de14 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 100dde8:	e0bffe17 	ldw	r2,-8(fp)
 100ddec:	1007883a 	mov	r3,r2
 100ddf0:	e0bfff17 	ldw	r2,-4(fp)
 100ddf4:	1889883a 	add	r4,r3,r2
 100ddf8:	e0bffe17 	ldw	r2,-8(fp)
 100ddfc:	1007883a 	mov	r3,r2
 100de00:	e0bfff17 	ldw	r2,-4(fp)
 100de04:	1885883a 	add	r2,r3,r2
 100de08:	10800003 	ldbu	r2,0(r2)
 100de0c:	10bff804 	addi	r2,r2,-32
 100de10:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 100de14:	e0bffe17 	ldw	r2,-8(fp)
 100de18:	10800044 	addi	r2,r2,1
 100de1c:	e0bffe15 	stw	r2,-8(fp)
 100de20:	e0fffe17 	ldw	r3,-8(fp)
 100de24:	e0bffd17 	ldw	r2,-12(fp)
 100de28:	18bfdb16 	blt	r3,r2,100dd98 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 100de2c:	e037883a 	mov	sp,fp
 100de30:	dfc00117 	ldw	ra,4(sp)
 100de34:	df000017 	ldw	fp,0(sp)
 100de38:	dec00204 	addi	sp,sp,8
 100de3c:	f800283a 	ret

0100de40 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 100de40:	defff804 	addi	sp,sp,-32
 100de44:	dfc00715 	stw	ra,28(sp)
 100de48:	df000615 	stw	fp,24(sp)
 100de4c:	df000604 	addi	fp,sp,24
 100de50:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 100de54:	e13fff17 	ldw	r4,-4(fp)
 100de58:	10011fc0 	call	10011fc <strlen>
 100de5c:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 100de60:	00bfffc4 	movi	r2,-1
 100de64:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 100de68:	00bfffc4 	movi	r2,-1
 100de6c:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 100de70:	00800044 	movi	r2,1
 100de74:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 100de78:	e03ffd15 	stw	zero,-12(fp)
 100de7c:	00007606 	br	100e058 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
 100de80:	e0bffd17 	ldw	r2,-12(fp)
 100de84:	1007883a 	mov	r3,r2
 100de88:	e0bfff17 	ldw	r2,-4(fp)
 100de8c:	1885883a 	add	r2,r3,r2
 100de90:	10800003 	ldbu	r2,0(r2)
 100de94:	10803fcc 	andi	r2,r2,255
 100de98:	1080201c 	xori	r2,r2,128
 100de9c:	10bfe004 	addi	r2,r2,-128
 100dea0:	10800820 	cmpeqi	r2,r2,32
 100dea4:	1000431e 	bne	r2,zero,100dfb4 <check_file_name_for_FAT16_compliance+0x174>
 100dea8:	e0bffd17 	ldw	r2,-12(fp)
 100deac:	10ffffc4 	addi	r3,r2,-1
 100deb0:	e0bffc17 	ldw	r2,-16(fp)
 100deb4:	1880141e 	bne	r3,r2,100df08 <check_file_name_for_FAT16_compliance+0xc8>
 100deb8:	e0bffd17 	ldw	r2,-12(fp)
 100debc:	1007883a 	mov	r3,r2
 100dec0:	e0bfff17 	ldw	r2,-4(fp)
 100dec4:	1885883a 	add	r2,r3,r2
 100dec8:	10800003 	ldbu	r2,0(r2)
 100decc:	10803fcc 	andi	r2,r2,255
 100ded0:	1080201c 	xori	r2,r2,128
 100ded4:	10bfe004 	addi	r2,r2,-128
 100ded8:	10801720 	cmpeqi	r2,r2,92
 100dedc:	1000351e 	bne	r2,zero,100dfb4 <check_file_name_for_FAT16_compliance+0x174>
 100dee0:	e0bffd17 	ldw	r2,-12(fp)
 100dee4:	1007883a 	mov	r3,r2
 100dee8:	e0bfff17 	ldw	r2,-4(fp)
 100deec:	1885883a 	add	r2,r3,r2
 100def0:	10800003 	ldbu	r2,0(r2)
 100def4:	10803fcc 	andi	r2,r2,255
 100def8:	1080201c 	xori	r2,r2,128
 100defc:	10bfe004 	addi	r2,r2,-128
 100df00:	10800be0 	cmpeqi	r2,r2,47
 100df04:	10002b1e 	bne	r2,zero,100dfb4 <check_file_name_for_FAT16_compliance+0x174>
 100df08:	e0fffd17 	ldw	r3,-12(fp)
 100df0c:	e0bffb17 	ldw	r2,-20(fp)
 100df10:	1885c83a 	sub	r2,r3,r2
 100df14:	10800258 	cmpnei	r2,r2,9
 100df18:	10000a1e 	bne	r2,zero,100df44 <check_file_name_for_FAT16_compliance+0x104>
 100df1c:	e0bffd17 	ldw	r2,-12(fp)
 100df20:	1007883a 	mov	r3,r2
 100df24:	e0bfff17 	ldw	r2,-4(fp)
 100df28:	1885883a 	add	r2,r3,r2
 100df2c:	10800003 	ldbu	r2,0(r2)
 100df30:	10803fcc 	andi	r2,r2,255
 100df34:	1080201c 	xori	r2,r2,128
 100df38:	10bfe004 	addi	r2,r2,-128
 100df3c:	10800b98 	cmpnei	r2,r2,46
 100df40:	10001c1e 	bne	r2,zero,100dfb4 <check_file_name_for_FAT16_compliance+0x174>
 100df44:	e0fffc17 	ldw	r3,-16(fp)
 100df48:	e0bffb17 	ldw	r2,-20(fp)
 100df4c:	18801b26 	beq	r3,r2,100dfbc <check_file_name_for_FAT16_compliance+0x17c>
 100df50:	e0fffd17 	ldw	r3,-12(fp)
 100df54:	e0bffb17 	ldw	r2,-20(fp)
 100df58:	1885c83a 	sub	r2,r3,r2
 100df5c:	10800110 	cmplti	r2,r2,4
 100df60:	1000161e 	bne	r2,zero,100dfbc <check_file_name_for_FAT16_compliance+0x17c>
 100df64:	e0bffd17 	ldw	r2,-12(fp)
 100df68:	1007883a 	mov	r3,r2
 100df6c:	e0bfff17 	ldw	r2,-4(fp)
 100df70:	1885883a 	add	r2,r3,r2
 100df74:	10800003 	ldbu	r2,0(r2)
 100df78:	10803fcc 	andi	r2,r2,255
 100df7c:	1080201c 	xori	r2,r2,128
 100df80:	10bfe004 	addi	r2,r2,-128
 100df84:	10801720 	cmpeqi	r2,r2,92
 100df88:	10000c1e 	bne	r2,zero,100dfbc <check_file_name_for_FAT16_compliance+0x17c>
 100df8c:	e0bffd17 	ldw	r2,-12(fp)
 100df90:	1007883a 	mov	r3,r2
 100df94:	e0bfff17 	ldw	r2,-4(fp)
 100df98:	1885883a 	add	r2,r3,r2
 100df9c:	10800003 	ldbu	r2,0(r2)
 100dfa0:	10803fcc 	andi	r2,r2,255
 100dfa4:	1080201c 	xori	r2,r2,128
 100dfa8:	10bfe004 	addi	r2,r2,-128
 100dfac:	10800be0 	cmpeqi	r2,r2,47
 100dfb0:	1000021e 	bne	r2,zero,100dfbc <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
 100dfb4:	e03ffa15 	stw	zero,-24(fp)
			break;
 100dfb8:	00002a06 	br	100e064 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 100dfbc:	e0bffd17 	ldw	r2,-12(fp)
 100dfc0:	1007883a 	mov	r3,r2
 100dfc4:	e0bfff17 	ldw	r2,-4(fp)
 100dfc8:	1885883a 	add	r2,r3,r2
 100dfcc:	10800003 	ldbu	r2,0(r2)
 100dfd0:	10803fcc 	andi	r2,r2,255
 100dfd4:	1080201c 	xori	r2,r2,128
 100dfd8:	10bfe004 	addi	r2,r2,-128
 100dfdc:	10801720 	cmpeqi	r2,r2,92
 100dfe0:	10000a1e 	bne	r2,zero,100e00c <check_file_name_for_FAT16_compliance+0x1cc>
 100dfe4:	e0bffd17 	ldw	r2,-12(fp)
 100dfe8:	1007883a 	mov	r3,r2
 100dfec:	e0bfff17 	ldw	r2,-4(fp)
 100dff0:	1885883a 	add	r2,r3,r2
 100dff4:	10800003 	ldbu	r2,0(r2)
 100dff8:	10803fcc 	andi	r2,r2,255
 100dffc:	1080201c 	xori	r2,r2,128
 100e000:	10bfe004 	addi	r2,r2,-128
 100e004:	10800bd8 	cmpnei	r2,r2,47
 100e008:	1000041e 	bne	r2,zero,100e01c <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 100e00c:	e0bffd17 	ldw	r2,-12(fp)
 100e010:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 100e014:	e0bffd17 	ldw	r2,-12(fp)
 100e018:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 100e01c:	e0bffd17 	ldw	r2,-12(fp)
 100e020:	1007883a 	mov	r3,r2
 100e024:	e0bfff17 	ldw	r2,-4(fp)
 100e028:	1885883a 	add	r2,r3,r2
 100e02c:	10800003 	ldbu	r2,0(r2)
 100e030:	10803fcc 	andi	r2,r2,255
 100e034:	1080201c 	xori	r2,r2,128
 100e038:	10bfe004 	addi	r2,r2,-128
 100e03c:	10800b98 	cmpnei	r2,r2,46
 100e040:	1000021e 	bne	r2,zero,100e04c <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 100e044:	e0bffd17 	ldw	r2,-12(fp)
 100e048:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 100e04c:	e0bffd17 	ldw	r2,-12(fp)
 100e050:	10800044 	addi	r2,r2,1
 100e054:	e0bffd15 	stw	r2,-12(fp)
 100e058:	e0fffd17 	ldw	r3,-12(fp)
 100e05c:	e0bffe17 	ldw	r2,-8(fp)
 100e060:	18bf8716 	blt	r3,r2,100de80 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 100e064:	e0fffe17 	ldw	r3,-8(fp)
 100e068:	e0bfff17 	ldw	r2,-4(fp)
 100e06c:	1885883a 	add	r2,r3,r2
 100e070:	10bfffc4 	addi	r2,r2,-1
 100e074:	10800003 	ldbu	r2,0(r2)
 100e078:	10803fcc 	andi	r2,r2,255
 100e07c:	1080201c 	xori	r2,r2,128
 100e080:	10bfe004 	addi	r2,r2,-128
 100e084:	10801720 	cmpeqi	r2,r2,92
 100e088:	10000a1e 	bne	r2,zero,100e0b4 <check_file_name_for_FAT16_compliance+0x274>
 100e08c:	e0fffe17 	ldw	r3,-8(fp)
 100e090:	e0bfff17 	ldw	r2,-4(fp)
 100e094:	1885883a 	add	r2,r3,r2
 100e098:	10bfffc4 	addi	r2,r2,-1
 100e09c:	10800003 	ldbu	r2,0(r2)
 100e0a0:	10803fcc 	andi	r2,r2,255
 100e0a4:	1080201c 	xori	r2,r2,128
 100e0a8:	10bfe004 	addi	r2,r2,-128
 100e0ac:	10800bd8 	cmpnei	r2,r2,47
 100e0b0:	1000011e 	bne	r2,zero,100e0b8 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 100e0b4:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 100e0b8:	e0bffa17 	ldw	r2,-24(fp)
}
 100e0bc:	e037883a 	mov	sp,fp
 100e0c0:	dfc00117 	ldw	ra,4(sp)
 100e0c4:	df000017 	ldw	fp,0(sp)
 100e0c8:	dec00204 	addi	sp,sp,8
 100e0cc:	f800283a 	ret

0100e0d0 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 100e0d0:	defffb04 	addi	sp,sp,-20
 100e0d4:	dfc00415 	stw	ra,16(sp)
 100e0d8:	df000315 	stw	fp,12(sp)
 100e0dc:	df000304 	addi	fp,sp,12
 100e0e0:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 100e0e4:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 100e0e8:	e13fff17 	ldw	r4,-4(fp)
 100e0ec:	10011fc0 	call	10011fc <strlen>
 100e0f0:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 100e0f4:	e03ffe15 	stw	zero,-8(fp)
 100e0f8:	00001706 	br	100e158 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 100e0fc:	e0bffe17 	ldw	r2,-8(fp)
 100e100:	1007883a 	mov	r3,r2
 100e104:	e0bfff17 	ldw	r2,-4(fp)
 100e108:	1885883a 	add	r2,r3,r2
 100e10c:	10800003 	ldbu	r2,0(r2)
 100e110:	10803fcc 	andi	r2,r2,255
 100e114:	1080201c 	xori	r2,r2,128
 100e118:	10bfe004 	addi	r2,r2,-128
 100e11c:	10801720 	cmpeqi	r2,r2,92
 100e120:	1000101e 	bne	r2,zero,100e164 <get_dir_divider_location+0x94>
 100e124:	e0bffe17 	ldw	r2,-8(fp)
 100e128:	1007883a 	mov	r3,r2
 100e12c:	e0bfff17 	ldw	r2,-4(fp)
 100e130:	1885883a 	add	r2,r3,r2
 100e134:	10800003 	ldbu	r2,0(r2)
 100e138:	10803fcc 	andi	r2,r2,255
 100e13c:	1080201c 	xori	r2,r2,128
 100e140:	10bfe004 	addi	r2,r2,-128
 100e144:	10800be0 	cmpeqi	r2,r2,47
 100e148:	1000061e 	bne	r2,zero,100e164 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 100e14c:	e0bffe17 	ldw	r2,-8(fp)
 100e150:	10800044 	addi	r2,r2,1
 100e154:	e0bffe15 	stw	r2,-8(fp)
 100e158:	e0fffe17 	ldw	r3,-8(fp)
 100e15c:	e0bffd17 	ldw	r2,-12(fp)
 100e160:	18bfe616 	blt	r3,r2,100e0fc <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 100e164:	e0fffe17 	ldw	r3,-8(fp)
 100e168:	e0bffd17 	ldw	r2,-12(fp)
 100e16c:	1880021e 	bne	r3,r2,100e178 <get_dir_divider_location+0xa8>
		index = -1;
 100e170:	00bfffc4 	movi	r2,-1
 100e174:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 100e178:	e0bffe17 	ldw	r2,-8(fp)
}
 100e17c:	e037883a 	mov	sp,fp
 100e180:	dfc00117 	ldw	ra,4(sp)
 100e184:	df000017 	ldw	fp,0(sp)
 100e188:	dec00204 	addi	sp,sp,8
 100e18c:	f800283a 	ret

0100e190 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 100e190:	defff604 	addi	sp,sp,-40
 100e194:	df000915 	stw	fp,36(sp)
 100e198:	df000904 	addi	fp,sp,36
 100e19c:	e13ff915 	stw	r4,-28(fp)
 100e1a0:	e17ffa15 	stw	r5,-24(fp)
 100e1a4:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 100e1a8:	00800044 	movi	r2,1
 100e1ac:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 100e1b0:	e03ff715 	stw	zero,-36(fp)
 100e1b4:	00005006 	br	100e2f8 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 100e1b8:	e0fff717 	ldw	r3,-36(fp)
 100e1bc:	e0bff917 	ldw	r2,-28(fp)
 100e1c0:	10c5883a 	add	r2,r2,r3
 100e1c4:	10800003 	ldbu	r2,0(r2)
 100e1c8:	10803fcc 	andi	r2,r2,255
 100e1cc:	10801870 	cmpltui	r2,r2,97
 100e1d0:	1000111e 	bne	r2,zero,100e218 <match_file_record_to_name_ext+0x88>
 100e1d4:	e0fff717 	ldw	r3,-36(fp)
 100e1d8:	e0bff917 	ldw	r2,-28(fp)
 100e1dc:	10c5883a 	add	r2,r2,r3
 100e1e0:	10800003 	ldbu	r2,0(r2)
 100e1e4:	10803fcc 	andi	r2,r2,255
 100e1e8:	10801ee8 	cmpgeui	r2,r2,123
 100e1ec:	10000a1e 	bne	r2,zero,100e218 <match_file_record_to_name_ext+0x88>
 100e1f0:	e0fff717 	ldw	r3,-36(fp)
 100e1f4:	e0bff917 	ldw	r2,-28(fp)
 100e1f8:	10c5883a 	add	r2,r2,r3
 100e1fc:	10800003 	ldbu	r2,0(r2)
 100e200:	10bff804 	addi	r2,r2,-32
 100e204:	10803fcc 	andi	r2,r2,255
 100e208:	1080201c 	xori	r2,r2,128
 100e20c:	10bfe004 	addi	r2,r2,-128
 100e210:	e0bfff15 	stw	r2,-4(fp)
 100e214:	00000806 	br	100e238 <match_file_record_to_name_ext+0xa8>
 100e218:	e0fff717 	ldw	r3,-36(fp)
 100e21c:	e0bff917 	ldw	r2,-28(fp)
 100e220:	10c5883a 	add	r2,r2,r3
 100e224:	10800003 	ldbu	r2,0(r2)
 100e228:	10803fcc 	andi	r2,r2,255
 100e22c:	1080201c 	xori	r2,r2,128
 100e230:	10bfe004 	addi	r2,r2,-128
 100e234:	e0bfff15 	stw	r2,-4(fp)
 100e238:	e0bff717 	ldw	r2,-36(fp)
 100e23c:	1007883a 	mov	r3,r2
 100e240:	e0bffa17 	ldw	r2,-24(fp)
 100e244:	1885883a 	add	r2,r3,r2
 100e248:	10800003 	ldbu	r2,0(r2)
 100e24c:	10803fcc 	andi	r2,r2,255
 100e250:	1080201c 	xori	r2,r2,128
 100e254:	10bfe004 	addi	r2,r2,-128
 100e258:	10801850 	cmplti	r2,r2,97
 100e25c:	1000151e 	bne	r2,zero,100e2b4 <match_file_record_to_name_ext+0x124>
 100e260:	e0bff717 	ldw	r2,-36(fp)
 100e264:	1007883a 	mov	r3,r2
 100e268:	e0bffa17 	ldw	r2,-24(fp)
 100e26c:	1885883a 	add	r2,r3,r2
 100e270:	10800003 	ldbu	r2,0(r2)
 100e274:	10803fcc 	andi	r2,r2,255
 100e278:	1080201c 	xori	r2,r2,128
 100e27c:	10bfe004 	addi	r2,r2,-128
 100e280:	10801ec8 	cmpgei	r2,r2,123
 100e284:	10000b1e 	bne	r2,zero,100e2b4 <match_file_record_to_name_ext+0x124>
 100e288:	e0bff717 	ldw	r2,-36(fp)
 100e28c:	1007883a 	mov	r3,r2
 100e290:	e0bffa17 	ldw	r2,-24(fp)
 100e294:	1885883a 	add	r2,r3,r2
 100e298:	10800003 	ldbu	r2,0(r2)
 100e29c:	10bff804 	addi	r2,r2,-32
 100e2a0:	10803fcc 	andi	r2,r2,255
 100e2a4:	1080201c 	xori	r2,r2,128
 100e2a8:	10bfe004 	addi	r2,r2,-128
 100e2ac:	e0bffe15 	stw	r2,-8(fp)
 100e2b0:	00000906 	br	100e2d8 <match_file_record_to_name_ext+0x148>
 100e2b4:	e0bff717 	ldw	r2,-36(fp)
 100e2b8:	1007883a 	mov	r3,r2
 100e2bc:	e0bffa17 	ldw	r2,-24(fp)
 100e2c0:	1885883a 	add	r2,r3,r2
 100e2c4:	10800003 	ldbu	r2,0(r2)
 100e2c8:	10803fcc 	andi	r2,r2,255
 100e2cc:	1080201c 	xori	r2,r2,128
 100e2d0:	10bfe004 	addi	r2,r2,-128
 100e2d4:	e0bffe15 	stw	r2,-8(fp)
 100e2d8:	e0bfff17 	ldw	r2,-4(fp)
 100e2dc:	e0fffe17 	ldw	r3,-8(fp)
 100e2e0:	10c00226 	beq	r2,r3,100e2ec <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 100e2e4:	e03ff815 	stw	zero,-32(fp)
			break;
 100e2e8:	00000606 	br	100e304 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 100e2ec:	e0bff717 	ldw	r2,-36(fp)
 100e2f0:	10800044 	addi	r2,r2,1
 100e2f4:	e0bff715 	stw	r2,-36(fp)
 100e2f8:	e0bff717 	ldw	r2,-36(fp)
 100e2fc:	10800210 	cmplti	r2,r2,8
 100e300:	103fad1e 	bne	r2,zero,100e1b8 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 100e304:	e03ff715 	stw	zero,-36(fp)
 100e308:	00005406 	br	100e45c <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 100e30c:	e0fff717 	ldw	r3,-36(fp)
 100e310:	e0bff917 	ldw	r2,-28(fp)
 100e314:	1885883a 	add	r2,r3,r2
 100e318:	10800204 	addi	r2,r2,8
 100e31c:	10800003 	ldbu	r2,0(r2)
 100e320:	10803fcc 	andi	r2,r2,255
 100e324:	10801870 	cmpltui	r2,r2,97
 100e328:	1000131e 	bne	r2,zero,100e378 <match_file_record_to_name_ext+0x1e8>
 100e32c:	e0fff717 	ldw	r3,-36(fp)
 100e330:	e0bff917 	ldw	r2,-28(fp)
 100e334:	1885883a 	add	r2,r3,r2
 100e338:	10800204 	addi	r2,r2,8
 100e33c:	10800003 	ldbu	r2,0(r2)
 100e340:	10803fcc 	andi	r2,r2,255
 100e344:	10801ee8 	cmpgeui	r2,r2,123
 100e348:	10000b1e 	bne	r2,zero,100e378 <match_file_record_to_name_ext+0x1e8>
 100e34c:	e0fff717 	ldw	r3,-36(fp)
 100e350:	e0bff917 	ldw	r2,-28(fp)
 100e354:	1885883a 	add	r2,r3,r2
 100e358:	10800204 	addi	r2,r2,8
 100e35c:	10800003 	ldbu	r2,0(r2)
 100e360:	10bff804 	addi	r2,r2,-32
 100e364:	10803fcc 	andi	r2,r2,255
 100e368:	1080201c 	xori	r2,r2,128
 100e36c:	10bfe004 	addi	r2,r2,-128
 100e370:	e0bffd15 	stw	r2,-12(fp)
 100e374:	00000906 	br	100e39c <match_file_record_to_name_ext+0x20c>
 100e378:	e0fff717 	ldw	r3,-36(fp)
 100e37c:	e0bff917 	ldw	r2,-28(fp)
 100e380:	1885883a 	add	r2,r3,r2
 100e384:	10800204 	addi	r2,r2,8
 100e388:	10800003 	ldbu	r2,0(r2)
 100e38c:	10803fcc 	andi	r2,r2,255
 100e390:	1080201c 	xori	r2,r2,128
 100e394:	10bfe004 	addi	r2,r2,-128
 100e398:	e0bffd15 	stw	r2,-12(fp)
 100e39c:	e0bff717 	ldw	r2,-36(fp)
 100e3a0:	1007883a 	mov	r3,r2
 100e3a4:	e0bffb17 	ldw	r2,-20(fp)
 100e3a8:	1885883a 	add	r2,r3,r2
 100e3ac:	10800003 	ldbu	r2,0(r2)
 100e3b0:	10803fcc 	andi	r2,r2,255
 100e3b4:	1080201c 	xori	r2,r2,128
 100e3b8:	10bfe004 	addi	r2,r2,-128
 100e3bc:	10801850 	cmplti	r2,r2,97
 100e3c0:	1000151e 	bne	r2,zero,100e418 <match_file_record_to_name_ext+0x288>
 100e3c4:	e0bff717 	ldw	r2,-36(fp)
 100e3c8:	1007883a 	mov	r3,r2
 100e3cc:	e0bffb17 	ldw	r2,-20(fp)
 100e3d0:	1885883a 	add	r2,r3,r2
 100e3d4:	10800003 	ldbu	r2,0(r2)
 100e3d8:	10803fcc 	andi	r2,r2,255
 100e3dc:	1080201c 	xori	r2,r2,128
 100e3e0:	10bfe004 	addi	r2,r2,-128
 100e3e4:	10801ec8 	cmpgei	r2,r2,123
 100e3e8:	10000b1e 	bne	r2,zero,100e418 <match_file_record_to_name_ext+0x288>
 100e3ec:	e0bff717 	ldw	r2,-36(fp)
 100e3f0:	1007883a 	mov	r3,r2
 100e3f4:	e0bffb17 	ldw	r2,-20(fp)
 100e3f8:	1885883a 	add	r2,r3,r2
 100e3fc:	10800003 	ldbu	r2,0(r2)
 100e400:	10bff804 	addi	r2,r2,-32
 100e404:	10803fcc 	andi	r2,r2,255
 100e408:	1080201c 	xori	r2,r2,128
 100e40c:	10bfe004 	addi	r2,r2,-128
 100e410:	e0bffc15 	stw	r2,-16(fp)
 100e414:	00000906 	br	100e43c <match_file_record_to_name_ext+0x2ac>
 100e418:	e0bff717 	ldw	r2,-36(fp)
 100e41c:	1007883a 	mov	r3,r2
 100e420:	e0bffb17 	ldw	r2,-20(fp)
 100e424:	1885883a 	add	r2,r3,r2
 100e428:	10800003 	ldbu	r2,0(r2)
 100e42c:	10803fcc 	andi	r2,r2,255
 100e430:	1080201c 	xori	r2,r2,128
 100e434:	10bfe004 	addi	r2,r2,-128
 100e438:	e0bffc15 	stw	r2,-16(fp)
 100e43c:	e0bffd17 	ldw	r2,-12(fp)
 100e440:	e0fffc17 	ldw	r3,-16(fp)
 100e444:	10c00226 	beq	r2,r3,100e450 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 100e448:	e03ff815 	stw	zero,-32(fp)
			break;
 100e44c:	00000606 	br	100e468 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 100e450:	e0bff717 	ldw	r2,-36(fp)
 100e454:	10800044 	addi	r2,r2,1
 100e458:	e0bff715 	stw	r2,-36(fp)
 100e45c:	e0bff717 	ldw	r2,-36(fp)
 100e460:	108000d0 	cmplti	r2,r2,3
 100e464:	103fa91e 	bne	r2,zero,100e30c <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 100e468:	e0bff817 	ldw	r2,-32(fp)
}
 100e46c:	e037883a 	mov	sp,fp
 100e470:	df000017 	ldw	fp,0(sp)
 100e474:	dec00104 	addi	sp,sp,4
 100e478:	f800283a 	ret

0100e47c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 100e47c:	deffe604 	addi	sp,sp,-104
 100e480:	dfc01915 	stw	ra,100(sp)
 100e484:	df001815 	stw	fp,96(sp)
 100e488:	df001804 	addi	fp,sp,96
 100e48c:	e13ffc15 	stw	r4,-16(fp)
 100e490:	e17ffd15 	stw	r5,-12(fp)
 100e494:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 100e498:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 100e49c:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 100e4a0:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 100e4a4:	e13ffc17 	ldw	r4,-16(fp)
 100e4a8:	100e0d00 	call	100e0d0 <get_dir_divider_location>
 100e4ac:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 100e4b0:	00012206 	br	100e93c <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100e4b4:	00800804 	movi	r2,32
 100e4b8:	e0bff805 	stb	r2,-32(fp)
 100e4bc:	00800804 	movi	r2,32
 100e4c0:	e0bff845 	stb	r2,-31(fp)
 100e4c4:	00800804 	movi	r2,32
 100e4c8:	e0bff885 	stb	r2,-30(fp)
 100e4cc:	00800804 	movi	r2,32
 100e4d0:	e0bff8c5 	stb	r2,-29(fp)
 100e4d4:	00800804 	movi	r2,32
 100e4d8:	e0bff905 	stb	r2,-28(fp)
 100e4dc:	00800804 	movi	r2,32
 100e4e0:	e0bff945 	stb	r2,-27(fp)
 100e4e4:	00800804 	movi	r2,32
 100e4e8:	e0bff985 	stb	r2,-26(fp)
 100e4ec:	00800804 	movi	r2,32
 100e4f0:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 100e4f4:	00800804 	movi	r2,32
 100e4f8:	e0bffa05 	stb	r2,-24(fp)
 100e4fc:	00800804 	movi	r2,32
 100e500:	e0bffa45 	stb	r2,-23(fp)
 100e504:	00800804 	movi	r2,32
 100e508:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 100e50c:	00bfffc4 	movi	r2,-1
 100e510:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 100e514:	e0bff617 	ldw	r2,-40(fp)
 100e518:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 100e51c:	e03ff415 	stw	zero,-48(fp)
 100e520:	00002e06 	br	100e5dc <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 100e524:	e0fff417 	ldw	r3,-48(fp)
 100e528:	e0bff317 	ldw	r2,-52(fp)
 100e52c:	1885883a 	add	r2,r3,r2
 100e530:	1007883a 	mov	r3,r2
 100e534:	e0bffc17 	ldw	r2,-16(fp)
 100e538:	1885883a 	add	r2,r3,r2
 100e53c:	10800003 	ldbu	r2,0(r2)
 100e540:	10803fcc 	andi	r2,r2,255
 100e544:	1080201c 	xori	r2,r2,128
 100e548:	10bfe004 	addi	r2,r2,-128
 100e54c:	10800b98 	cmpnei	r2,r2,46
 100e550:	1000031e 	bne	r2,zero,100e560 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 100e554:	e0bff417 	ldw	r2,-48(fp)
 100e558:	e0bff215 	stw	r2,-56(fp)
 100e55c:	00001c06 	br	100e5d0 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 100e560:	e0bff217 	ldw	r2,-56(fp)
 100e564:	1004403a 	cmpge	r2,r2,zero
 100e568:	10000c1e 	bne	r2,zero,100e59c <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 100e56c:	e13ff417 	ldw	r4,-48(fp)
 100e570:	e0fff417 	ldw	r3,-48(fp)
 100e574:	e0bff317 	ldw	r2,-52(fp)
 100e578:	1885883a 	add	r2,r3,r2
 100e57c:	1007883a 	mov	r3,r2
 100e580:	e0bffc17 	ldw	r2,-16(fp)
 100e584:	1885883a 	add	r2,r3,r2
 100e588:	10c00003 	ldbu	r3,0(r2)
 100e58c:	e0bff804 	addi	r2,fp,-32
 100e590:	1105883a 	add	r2,r2,r4
 100e594:	10c00005 	stb	r3,0(r2)
 100e598:	00000d06 	br	100e5d0 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
 100e59c:	e0fff417 	ldw	r3,-48(fp)
 100e5a0:	e0bff217 	ldw	r2,-56(fp)
 100e5a4:	1889c83a 	sub	r4,r3,r2
 100e5a8:	e0fff417 	ldw	r3,-48(fp)
 100e5ac:	e0bff317 	ldw	r2,-52(fp)
 100e5b0:	1885883a 	add	r2,r3,r2
 100e5b4:	1007883a 	mov	r3,r2
 100e5b8:	e0bffc17 	ldw	r2,-16(fp)
 100e5bc:	1885883a 	add	r2,r3,r2
 100e5c0:	10c00003 	ldbu	r3,0(r2)
 100e5c4:	e0bffa04 	addi	r2,fp,-24
 100e5c8:	1105883a 	add	r2,r2,r4
 100e5cc:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 100e5d0:	e0bff417 	ldw	r2,-48(fp)
 100e5d4:	10800044 	addi	r2,r2,1
 100e5d8:	e0bff415 	stw	r2,-48(fp)
 100e5dc:	e0fff417 	ldw	r3,-48(fp)
 100e5e0:	e0bff517 	ldw	r2,-44(fp)
 100e5e4:	18bfcf16 	blt	r3,r2,100e524 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 100e5e8:	e0bff617 	ldw	r2,-40(fp)
 100e5ec:	1004c03a 	cmpne	r2,r2,zero
 100e5f0:	1000551e 	bne	r2,zero,100e748 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 100e5f4:	00804074 	movhi	r2,257
 100e5f8:	10986504 	addi	r2,r2,24980
 100e5fc:	1080050b 	ldhu	r2,20(r2)
 100e600:	10bfffcc 	andi	r2,r2,65535
 100e604:	1008917a 	slli	r4,r2,5
 100e608:	00804074 	movhi	r2,257
 100e60c:	10986504 	addi	r2,r2,24980
 100e610:	1080030b 	ldhu	r2,12(r2)
 100e614:	117fffcc 	andi	r5,r2,65535
 100e618:	100a37c0 	call	100a37c <__divsi3>
 100e61c:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 100e620:	e03fef15 	stw	zero,-68(fp)
 100e624:	00003806 	br	100e708 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
 100e628:	00804074 	movhi	r2,257
 100e62c:	10986504 	addi	r2,r2,24980
 100e630:	10c01317 	ldw	r3,76(r2)
 100e634:	e0bfef17 	ldw	r2,-68(fp)
 100e638:	1885883a 	add	r2,r3,r2
 100e63c:	1009883a 	mov	r4,r2
 100e640:	d166f817 	ldw	r5,-25632(gp)
 100e644:	100cca00 	call	100cca0 <Read_Sector_Data>
 100e648:	1005003a 	cmpeq	r2,r2,zero
 100e64c:	1000311e 	bne	r2,zero,100e714 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100e650:	e03fee15 	stw	zero,-72(fp)
 100e654:	00002306 	br	100e6e4 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 100e658:	e0bfee17 	ldw	r2,-72(fp)
 100e65c:	1008917a 	slli	r4,r2,5
 100e660:	e1ffef17 	ldw	r7,-68(fp)
 100e664:	e17ffe17 	ldw	r5,-8(fp)
 100e668:	000d883a 	mov	r6,zero
 100e66c:	100d0e80 	call	100d0e8 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 100e670:	e0bffe17 	ldw	r2,-8(fp)
 100e674:	10800003 	ldbu	r2,0(r2)
 100e678:	10803fcc 	andi	r2,r2,255
 100e67c:	10803960 	cmpeqi	r2,r2,229
 100e680:	1000151e 	bne	r2,zero,100e6d8 <get_home_directory_cluster_for_file+0x25c>
 100e684:	e0bffe17 	ldw	r2,-8(fp)
 100e688:	10800003 	ldbu	r2,0(r2)
 100e68c:	10803fcc 	andi	r2,r2,255
 100e690:	1005003a 	cmpeq	r2,r2,zero
 100e694:	1000101e 	bne	r2,zero,100e6d8 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 100e698:	e17ff804 	addi	r5,fp,-32
 100e69c:	e1bffa04 	addi	r6,fp,-24
 100e6a0:	e13ffe17 	ldw	r4,-8(fp)
 100e6a4:	100e1900 	call	100e190 <match_file_record_to_name_ext>
 100e6a8:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 100e6ac:	e0bfed17 	ldw	r2,-76(fp)
 100e6b0:	1005003a 	cmpeq	r2,r2,zero
 100e6b4:	1000081e 	bne	r2,zero,100e6d8 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 100e6b8:	e0bffe17 	ldw	r2,-8(fp)
 100e6bc:	1080058b 	ldhu	r2,22(r2)
 100e6c0:	10bfffcc 	andi	r2,r2,65535
 100e6c4:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 100e6c8:	e0fffe17 	ldw	r3,-8(fp)
 100e6cc:	00800044 	movi	r2,1
 100e6d0:	18800a15 	stw	r2,40(r3)
								break;
 100e6d4:	00000606 	br	100e6f0 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100e6d8:	e0bfee17 	ldw	r2,-72(fp)
 100e6dc:	10800044 	addi	r2,r2,1
 100e6e0:	e0bfee15 	stw	r2,-72(fp)
 100e6e4:	e0bfee17 	ldw	r2,-72(fp)
 100e6e8:	10800410 	cmplti	r2,r2,16
 100e6ec:	103fda1e 	bne	r2,zero,100e658 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 100e6f0:	e0fff117 	ldw	r3,-60(fp)
 100e6f4:	e0bff617 	ldw	r2,-40(fp)
 100e6f8:	1880061e 	bne	r3,r2,100e714 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 100e6fc:	e0bfef17 	ldw	r2,-68(fp)
 100e700:	10800044 	addi	r2,r2,1
 100e704:	e0bfef15 	stw	r2,-68(fp)
 100e708:	e0ffef17 	ldw	r3,-68(fp)
 100e70c:	e0bff017 	ldw	r2,-64(fp)
 100e710:	18bfc516 	blt	r3,r2,100e628 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 100e714:	e0fff117 	ldw	r3,-60(fp)
 100e718:	e0bff617 	ldw	r2,-40(fp)
 100e71c:	18800826 	beq	r3,r2,100e740 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 100e720:	e0bff117 	ldw	r2,-60(fp)
 100e724:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 100e728:	e0fff317 	ldw	r3,-52(fp)
 100e72c:	e0bff517 	ldw	r2,-44(fp)
 100e730:	1885883a 	add	r2,r3,r2
 100e734:	10800044 	addi	r2,r2,1
 100e738:	e0bff315 	stw	r2,-52(fp)
 100e73c:	00007406 	br	100e910 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 100e740:	e03fff15 	stw	zero,-4(fp)
 100e744:	00008c06 	br	100e978 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 100e748:	e0bff617 	ldw	r2,-40(fp)
 100e74c:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 100e750:	e0bfec17 	ldw	r2,-80(fp)
 100e754:	113fff84 	addi	r4,r2,-2
 100e758:	00804074 	movhi	r2,257
 100e75c:	10986504 	addi	r2,r2,24980
 100e760:	10800383 	ldbu	r2,14(r2)
 100e764:	11403fcc 	andi	r5,r2,255
 100e768:	1000adc0 	call	1000adc <__mulsi3>
 100e76c:	1007883a 	mov	r3,r2
 100e770:	00804074 	movhi	r2,257
 100e774:	10986504 	addi	r2,r2,24980
 100e778:	10801417 	ldw	r2,80(r2)
 100e77c:	1885883a 	add	r2,r3,r2
 100e780:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
 100e784:	e03fea15 	stw	zero,-88(fp)
 100e788:	00003206 	br	100e854 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 100e78c:	e0ffea17 	ldw	r3,-88(fp)
 100e790:	e0bfeb17 	ldw	r2,-84(fp)
 100e794:	1889883a 	add	r4,r3,r2
 100e798:	d166f817 	ldw	r5,-25632(gp)
 100e79c:	100cca00 	call	100cca0 <Read_Sector_Data>
 100e7a0:	1005003a 	cmpeq	r2,r2,zero
 100e7a4:	1000311e 	bne	r2,zero,100e86c <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
 100e7a8:	e03fe915 	stw	zero,-92(fp)
 100e7ac:	00002006 	br	100e830 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 100e7b0:	e0bfe917 	ldw	r2,-92(fp)
 100e7b4:	1008917a 	slli	r4,r2,5
 100e7b8:	e1bfec17 	ldw	r6,-80(fp)
 100e7bc:	e1ffea17 	ldw	r7,-88(fp)
 100e7c0:	e17ffe17 	ldw	r5,-8(fp)
 100e7c4:	100d0e80 	call	100d0e8 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 100e7c8:	e0bffe17 	ldw	r2,-8(fp)
 100e7cc:	10800003 	ldbu	r2,0(r2)
 100e7d0:	10803fcc 	andi	r2,r2,255
 100e7d4:	10803960 	cmpeqi	r2,r2,229
 100e7d8:	1000121e 	bne	r2,zero,100e824 <get_home_directory_cluster_for_file+0x3a8>
 100e7dc:	e0bffe17 	ldw	r2,-8(fp)
 100e7e0:	10800003 	ldbu	r2,0(r2)
 100e7e4:	10803fcc 	andi	r2,r2,255
 100e7e8:	1005003a 	cmpeq	r2,r2,zero
 100e7ec:	10000d1e 	bne	r2,zero,100e824 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 100e7f0:	e17ff804 	addi	r5,fp,-32
 100e7f4:	e1bffa04 	addi	r6,fp,-24
 100e7f8:	e13ffe17 	ldw	r4,-8(fp)
 100e7fc:	100e1900 	call	100e190 <match_file_record_to_name_ext>
 100e800:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 100e804:	e0bfe817 	ldw	r2,-96(fp)
 100e808:	1005003a 	cmpeq	r2,r2,zero
 100e80c:	1000051e 	bne	r2,zero,100e824 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
 100e810:	e0bffe17 	ldw	r2,-8(fp)
 100e814:	1080058b 	ldhu	r2,22(r2)
 100e818:	10bfffcc 	andi	r2,r2,65535
 100e81c:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
 100e820:	00000606 	br	100e83c <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
 100e824:	e0bfe917 	ldw	r2,-92(fp)
 100e828:	10800044 	addi	r2,r2,1
 100e82c:	e0bfe915 	stw	r2,-92(fp)
 100e830:	e0bfe917 	ldw	r2,-92(fp)
 100e834:	10800410 	cmplti	r2,r2,16
 100e838:	103fdd1e 	bne	r2,zero,100e7b0 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 100e83c:	e0fff117 	ldw	r3,-60(fp)
 100e840:	e0bff617 	ldw	r2,-40(fp)
 100e844:	1880091e 	bne	r3,r2,100e86c <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
 100e848:	e0bfea17 	ldw	r2,-88(fp)
 100e84c:	10800044 	addi	r2,r2,1
 100e850:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
 100e854:	00804074 	movhi	r2,257
 100e858:	10986504 	addi	r2,r2,24980
 100e85c:	10800383 	ldbu	r2,14(r2)
 100e860:	10c03fcc 	andi	r3,r2,255
 100e864:	e0bfea17 	ldw	r2,-88(fp)
 100e868:	10ffc816 	blt	r2,r3,100e78c <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 100e86c:	e0fff117 	ldw	r3,-60(fp)
 100e870:	e0bff617 	ldw	r2,-40(fp)
 100e874:	1880131e 	bne	r3,r2,100e8c4 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 100e878:	e13ff117 	ldw	r4,-60(fp)
 100e87c:	e17ffb04 	addi	r5,fp,-20
 100e880:	100cd9c0 	call	100cd9c <get_cluster_flag>
 100e884:	1005003a 	cmpeq	r2,r2,zero
 100e888:	10000c1e 	bne	r2,zero,100e8bc <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100e88c:	e0bffb0b 	ldhu	r2,-20(fp)
 100e890:	10bfffcc 	andi	r2,r2,65535
 100e894:	10fffe0c 	andi	r3,r2,65528
 100e898:	00bffe14 	movui	r2,65528
 100e89c:	1880021e 	bne	r3,r2,100e8a8 <get_home_directory_cluster_for_file+0x42c>
							return false;
 100e8a0:	e03fff15 	stw	zero,-4(fp)
 100e8a4:	00003406 	br	100e978 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 100e8a8:	e0bffb0b 	ldhu	r2,-20(fp)
 100e8ac:	10bfffcc 	andi	r2,r2,65535
 100e8b0:	10bffe0c 	andi	r2,r2,65528
 100e8b4:	e0bff115 	stw	r2,-60(fp)
 100e8b8:	00000206 	br	100e8c4 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 100e8bc:	e03fff15 	stw	zero,-4(fp)
 100e8c0:	00002d06 	br	100e978 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
 100e8c4:	e0ffec17 	ldw	r3,-80(fp)
 100e8c8:	00bffdd4 	movui	r2,65527
 100e8cc:	10c00316 	blt	r2,r3,100e8dc <get_home_directory_cluster_for_file+0x460>
 100e8d0:	e0fff117 	ldw	r3,-60(fp)
 100e8d4:	e0bff617 	ldw	r2,-40(fp)
 100e8d8:	18bf9d26 	beq	r3,r2,100e750 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 100e8dc:	e0fff117 	ldw	r3,-60(fp)
 100e8e0:	e0bff617 	ldw	r2,-40(fp)
 100e8e4:	18800826 	beq	r3,r2,100e908 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 100e8e8:	e0bff117 	ldw	r2,-60(fp)
 100e8ec:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 100e8f0:	e0fff317 	ldw	r3,-52(fp)
 100e8f4:	e0bff517 	ldw	r2,-44(fp)
 100e8f8:	1885883a 	add	r2,r3,r2
 100e8fc:	10800044 	addi	r2,r2,1
 100e900:	e0bff315 	stw	r2,-52(fp)
 100e904:	00000206 	br	100e910 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 100e908:	e03fff15 	stw	zero,-4(fp)
 100e90c:	00001a06 	br	100e978 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 100e910:	e0bff317 	ldw	r2,-52(fp)
 100e914:	1007883a 	mov	r3,r2
 100e918:	e0bffc17 	ldw	r2,-16(fp)
 100e91c:	1889883a 	add	r4,r3,r2
 100e920:	100e0d00 	call	100e0d0 <get_dir_divider_location>
 100e924:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 100e928:	e0bff517 	ldw	r2,-44(fp)
 100e92c:	1004403a 	cmpge	r2,r2,zero
 100e930:	1000021e 	bne	r2,zero,100e93c <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 100e934:	00800044 	movi	r2,1
 100e938:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 100e93c:	e0bff517 	ldw	r2,-44(fp)
 100e940:	10800048 	cmpgei	r2,r2,1
 100e944:	103edb1e 	bne	r2,zero,100e4b4 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 100e948:	e0fffd17 	ldw	r3,-12(fp)
 100e94c:	e0bff617 	ldw	r2,-40(fp)
 100e950:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 100e954:	e0bff617 	ldw	r2,-40(fp)
 100e958:	1004c03a 	cmpne	r2,r2,zero
 100e95c:	1000041e 	bne	r2,zero,100e970 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 100e960:	e0bffe17 	ldw	r2,-8(fp)
 100e964:	10000a15 	stw	zero,40(r2)
		result = true;
 100e968:	00800044 	movi	r2,1
 100e96c:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 100e970:	e0bff717 	ldw	r2,-36(fp)
 100e974:	e0bfff15 	stw	r2,-4(fp)
 100e978:	e0bfff17 	ldw	r2,-4(fp)
}
 100e97c:	e037883a 	mov	sp,fp
 100e980:	dfc00117 	ldw	ra,4(sp)
 100e984:	df000017 	ldw	fp,0(sp)
 100e988:	dec00204 	addi	sp,sp,8
 100e98c:	f800283a 	ret

0100e990 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 100e990:	deffe704 	addi	sp,sp,-100
 100e994:	dfc01815 	stw	ra,96(sp)
 100e998:	df001715 	stw	fp,92(sp)
 100e99c:	df001704 	addi	fp,sp,92
 100e9a0:	e13ffc15 	stw	r4,-16(fp)
 100e9a4:	e17ffd15 	stw	r5,-12(fp)
 100e9a8:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 100e9ac:	e13ffd17 	ldw	r4,-12(fp)
 100e9b0:	100e0d00 	call	100e0d0 <get_dir_divider_location>
 100e9b4:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 100e9b8:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100e9bc:	00800804 	movi	r2,32
 100e9c0:	e0bff805 	stb	r2,-32(fp)
 100e9c4:	00800804 	movi	r2,32
 100e9c8:	e0bff845 	stb	r2,-31(fp)
 100e9cc:	00800804 	movi	r2,32
 100e9d0:	e0bff885 	stb	r2,-30(fp)
 100e9d4:	00800804 	movi	r2,32
 100e9d8:	e0bff8c5 	stb	r2,-29(fp)
 100e9dc:	00800804 	movi	r2,32
 100e9e0:	e0bff905 	stb	r2,-28(fp)
 100e9e4:	00800804 	movi	r2,32
 100e9e8:	e0bff945 	stb	r2,-27(fp)
 100e9ec:	00800804 	movi	r2,32
 100e9f0:	e0bff985 	stb	r2,-26(fp)
 100e9f4:	00800804 	movi	r2,32
 100e9f8:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 100e9fc:	00800804 	movi	r2,32
 100ea00:	e0bffa05 	stb	r2,-24(fp)
 100ea04:	00800804 	movi	r2,32
 100ea08:	e0bffa45 	stb	r2,-23(fp)
 100ea0c:	00800804 	movi	r2,32
 100ea10:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 100ea14:	00bfffc4 	movi	r2,-1
 100ea18:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 100ea1c:	e0bffc17 	ldw	r2,-16(fp)
 100ea20:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 100ea24:	e13ffd17 	ldw	r4,-12(fp)
 100ea28:	10011fc0 	call	10011fc <strlen>
 100ea2c:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 100ea30:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 100ea34:	00000b06 	br	100ea64 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 100ea38:	e0fff617 	ldw	r3,-40(fp)
 100ea3c:	e0bff717 	ldw	r2,-36(fp)
 100ea40:	1885883a 	add	r2,r3,r2
 100ea44:	10800044 	addi	r2,r2,1
 100ea48:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 100ea4c:	e0bff617 	ldw	r2,-40(fp)
 100ea50:	1007883a 	mov	r3,r2
 100ea54:	e0bffd17 	ldw	r2,-12(fp)
 100ea58:	1889883a 	add	r4,r3,r2
 100ea5c:	100e0d00 	call	100e0d0 <get_dir_divider_location>
 100ea60:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 100ea64:	e0bff717 	ldw	r2,-36(fp)
 100ea68:	10800048 	cmpgei	r2,r2,1
 100ea6c:	103ff21e 	bne	r2,zero,100ea38 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 100ea70:	e0bff617 	ldw	r2,-40(fp)
 100ea74:	e0bff315 	stw	r2,-52(fp)
 100ea78:	00002b06 	br	100eb28 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 100ea7c:	e0bff317 	ldw	r2,-52(fp)
 100ea80:	1007883a 	mov	r3,r2
 100ea84:	e0bffd17 	ldw	r2,-12(fp)
 100ea88:	1885883a 	add	r2,r3,r2
 100ea8c:	10800003 	ldbu	r2,0(r2)
 100ea90:	10803fcc 	andi	r2,r2,255
 100ea94:	1080201c 	xori	r2,r2,128
 100ea98:	10bfe004 	addi	r2,r2,-128
 100ea9c:	10800b98 	cmpnei	r2,r2,46
 100eaa0:	1000031e 	bne	r2,zero,100eab0 <find_file_in_directory+0x120>
			ext_index = index;
 100eaa4:	e0bff317 	ldw	r2,-52(fp)
 100eaa8:	e0bff515 	stw	r2,-44(fp)
 100eaac:	00001b06 	br	100eb1c <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 100eab0:	e0bff517 	ldw	r2,-44(fp)
 100eab4:	1004403a 	cmpge	r2,r2,zero
 100eab8:	10000c1e 	bne	r2,zero,100eaec <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 100eabc:	e0fff317 	ldw	r3,-52(fp)
 100eac0:	e0bff617 	ldw	r2,-40(fp)
 100eac4:	1889c83a 	sub	r4,r3,r2
 100eac8:	e0bff317 	ldw	r2,-52(fp)
 100eacc:	1007883a 	mov	r3,r2
 100ead0:	e0bffd17 	ldw	r2,-12(fp)
 100ead4:	1885883a 	add	r2,r3,r2
 100ead8:	10c00003 	ldbu	r3,0(r2)
 100eadc:	e0bff804 	addi	r2,fp,-32
 100eae0:	1105883a 	add	r2,r2,r4
 100eae4:	10c00005 	stb	r3,0(r2)
 100eae8:	00000c06 	br	100eb1c <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 100eaec:	e0fff317 	ldw	r3,-52(fp)
 100eaf0:	e0bff517 	ldw	r2,-44(fp)
 100eaf4:	1885c83a 	sub	r2,r3,r2
 100eaf8:	113fffc4 	addi	r4,r2,-1
 100eafc:	e0bff317 	ldw	r2,-52(fp)
 100eb00:	1007883a 	mov	r3,r2
 100eb04:	e0bffd17 	ldw	r2,-12(fp)
 100eb08:	1885883a 	add	r2,r3,r2
 100eb0c:	10c00003 	ldbu	r3,0(r2)
 100eb10:	e0bffa04 	addi	r2,fp,-24
 100eb14:	1105883a 	add	r2,r2,r4
 100eb18:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 100eb1c:	e0bff317 	ldw	r2,-52(fp)
 100eb20:	10800044 	addi	r2,r2,1
 100eb24:	e0bff315 	stw	r2,-52(fp)
 100eb28:	e0fff317 	ldw	r3,-52(fp)
 100eb2c:	e0bff217 	ldw	r2,-56(fp)
 100eb30:	18bfd216 	blt	r3,r2,100ea7c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 100eb34:	e0bffc17 	ldw	r2,-16(fp)
 100eb38:	1004c03a 	cmpne	r2,r2,zero
 100eb3c:	1000441e 	bne	r2,zero,100ec50 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 100eb40:	00804074 	movhi	r2,257
 100eb44:	10986504 	addi	r2,r2,24980
 100eb48:	1080050b 	ldhu	r2,20(r2)
 100eb4c:	10bfffcc 	andi	r2,r2,65535
 100eb50:	1008917a 	slli	r4,r2,5
 100eb54:	00804074 	movhi	r2,257
 100eb58:	10986504 	addi	r2,r2,24980
 100eb5c:	1080030b 	ldhu	r2,12(r2)
 100eb60:	117fffcc 	andi	r5,r2,65535
 100eb64:	100a37c0 	call	100a37c <__divsi3>
 100eb68:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 100eb6c:	e03fef15 	stw	zero,-68(fp)
 100eb70:	00003306 	br	100ec40 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
 100eb74:	00804074 	movhi	r2,257
 100eb78:	10986504 	addi	r2,r2,24980
 100eb7c:	10c01317 	ldw	r3,76(r2)
 100eb80:	e0bfef17 	ldw	r2,-68(fp)
 100eb84:	1885883a 	add	r2,r3,r2
 100eb88:	1009883a 	mov	r4,r2
 100eb8c:	d166f817 	ldw	r5,-25632(gp)
 100eb90:	100cca00 	call	100cca0 <Read_Sector_Data>
 100eb94:	1005003a 	cmpeq	r2,r2,zero
 100eb98:	10008e1e 	bne	r2,zero,100edd4 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100eb9c:	e03fee15 	stw	zero,-72(fp)
 100eba0:	00001e06 	br	100ec1c <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 100eba4:	e0bfee17 	ldw	r2,-72(fp)
 100eba8:	1008917a 	slli	r4,r2,5
 100ebac:	e1ffef17 	ldw	r7,-68(fp)
 100ebb0:	e17ffe17 	ldw	r5,-8(fp)
 100ebb4:	000d883a 	mov	r6,zero
 100ebb8:	100d0e80 	call	100d0e8 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
 100ebbc:	e0bffe17 	ldw	r2,-8(fp)
 100ebc0:	10800003 	ldbu	r2,0(r2)
 100ebc4:	10803fcc 	andi	r2,r2,255
 100ebc8:	10803960 	cmpeqi	r2,r2,229
 100ebcc:	1000101e 	bne	r2,zero,100ec10 <find_file_in_directory+0x280>
 100ebd0:	e0bffe17 	ldw	r2,-8(fp)
 100ebd4:	10800003 	ldbu	r2,0(r2)
 100ebd8:	10803fcc 	andi	r2,r2,255
 100ebdc:	1005003a 	cmpeq	r2,r2,zero
 100ebe0:	10000b1e 	bne	r2,zero,100ec10 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 100ebe4:	e17ff804 	addi	r5,fp,-32
 100ebe8:	e1bffa04 	addi	r6,fp,-24
 100ebec:	e13ffe17 	ldw	r4,-8(fp)
 100ebf0:	100e1900 	call	100e190 <match_file_record_to_name_ext>
 100ebf4:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 100ebf8:	e0bfed17 	ldw	r2,-76(fp)
 100ebfc:	1005003a 	cmpeq	r2,r2,zero
 100ec00:	1000031e 	bne	r2,zero,100ec10 <find_file_in_directory+0x280>
							result = true;
 100ec04:	00800044 	movi	r2,1
 100ec08:	e0bff115 	stw	r2,-60(fp)
							break;
 100ec0c:	00000606 	br	100ec28 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100ec10:	e0bfee17 	ldw	r2,-72(fp)
 100ec14:	10800044 	addi	r2,r2,1
 100ec18:	e0bfee15 	stw	r2,-72(fp)
 100ec1c:	e0bfee17 	ldw	r2,-72(fp)
 100ec20:	10800410 	cmplti	r2,r2,16
 100ec24:	103fdf1e 	bne	r2,zero,100eba4 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 100ec28:	e0bff117 	ldw	r2,-60(fp)
 100ec2c:	1004c03a 	cmpne	r2,r2,zero
 100ec30:	1000681e 	bne	r2,zero,100edd4 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 100ec34:	e0bfef17 	ldw	r2,-68(fp)
 100ec38:	10800044 	addi	r2,r2,1
 100ec3c:	e0bfef15 	stw	r2,-68(fp)
 100ec40:	e0ffef17 	ldw	r3,-68(fp)
 100ec44:	e0bff017 	ldw	r2,-64(fp)
 100ec48:	18bfca16 	blt	r3,r2,100eb74 <find_file_in_directory+0x1e4>
 100ec4c:	00006106 	br	100edd4 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 100ec50:	e0bff417 	ldw	r2,-48(fp)
 100ec54:	113fff84 	addi	r4,r2,-2
 100ec58:	00804074 	movhi	r2,257
 100ec5c:	10986504 	addi	r2,r2,24980
 100ec60:	10800383 	ldbu	r2,14(r2)
 100ec64:	11403fcc 	andi	r5,r2,255
 100ec68:	1000adc0 	call	1000adc <__mulsi3>
 100ec6c:	1007883a 	mov	r3,r2
 100ec70:	00804074 	movhi	r2,257
 100ec74:	10986504 	addi	r2,r2,24980
 100ec78:	10801417 	ldw	r2,80(r2)
 100ec7c:	1885883a 	add	r2,r3,r2
 100ec80:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
 100ec84:	e03feb15 	stw	zero,-84(fp)
 100ec88:	00003006 	br	100ed4c <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 100ec8c:	e0ffeb17 	ldw	r3,-84(fp)
 100ec90:	e0bfec17 	ldw	r2,-80(fp)
 100ec94:	1889883a 	add	r4,r3,r2
 100ec98:	d166f817 	ldw	r5,-25632(gp)
 100ec9c:	100cca00 	call	100cca0 <Read_Sector_Data>
 100eca0:	1005003a 	cmpeq	r2,r2,zero
 100eca4:	10002f1e 	bne	r2,zero,100ed64 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100eca8:	e03fea15 	stw	zero,-88(fp)
 100ecac:	00001e06 	br	100ed28 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 100ecb0:	e0bfea17 	ldw	r2,-88(fp)
 100ecb4:	1008917a 	slli	r4,r2,5
 100ecb8:	e1bff417 	ldw	r6,-48(fp)
 100ecbc:	e1ffeb17 	ldw	r7,-84(fp)
 100ecc0:	e17ffe17 	ldw	r5,-8(fp)
 100ecc4:	100d0e80 	call	100d0e8 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 100ecc8:	e0bffe17 	ldw	r2,-8(fp)
 100eccc:	10800003 	ldbu	r2,0(r2)
 100ecd0:	10803fcc 	andi	r2,r2,255
 100ecd4:	10803960 	cmpeqi	r2,r2,229
 100ecd8:	1000101e 	bne	r2,zero,100ed1c <find_file_in_directory+0x38c>
 100ecdc:	e0bffe17 	ldw	r2,-8(fp)
 100ece0:	10800003 	ldbu	r2,0(r2)
 100ece4:	10803fcc 	andi	r2,r2,255
 100ece8:	1005003a 	cmpeq	r2,r2,zero
 100ecec:	10000b1e 	bne	r2,zero,100ed1c <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 100ecf0:	e17ff804 	addi	r5,fp,-32
 100ecf4:	e1bffa04 	addi	r6,fp,-24
 100ecf8:	e13ffe17 	ldw	r4,-8(fp)
 100ecfc:	100e1900 	call	100e190 <match_file_record_to_name_ext>
 100ed00:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 100ed04:	e0bfe917 	ldw	r2,-92(fp)
 100ed08:	1005003a 	cmpeq	r2,r2,zero
 100ed0c:	1000031e 	bne	r2,zero,100ed1c <find_file_in_directory+0x38c>
								result = true;
 100ed10:	00800044 	movi	r2,1
 100ed14:	e0bff115 	stw	r2,-60(fp)
								break;
 100ed18:	00000606 	br	100ed34 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100ed1c:	e0bfea17 	ldw	r2,-88(fp)
 100ed20:	10800044 	addi	r2,r2,1
 100ed24:	e0bfea15 	stw	r2,-88(fp)
 100ed28:	e0bfea17 	ldw	r2,-88(fp)
 100ed2c:	10800410 	cmplti	r2,r2,16
 100ed30:	103fdf1e 	bne	r2,zero,100ecb0 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 100ed34:	e0bff117 	ldw	r2,-60(fp)
 100ed38:	1004c03a 	cmpne	r2,r2,zero
 100ed3c:	1000091e 	bne	r2,zero,100ed64 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
 100ed40:	e0bfeb17 	ldw	r2,-84(fp)
 100ed44:	10800044 	addi	r2,r2,1
 100ed48:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
 100ed4c:	00804074 	movhi	r2,257
 100ed50:	10986504 	addi	r2,r2,24980
 100ed54:	10800383 	ldbu	r2,14(r2)
 100ed58:	10c03fcc 	andi	r3,r2,255
 100ed5c:	e0bfeb17 	ldw	r2,-84(fp)
 100ed60:	10ffca16 	blt	r2,r3,100ec8c <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 100ed64:	e0bff117 	ldw	r2,-60(fp)
 100ed68:	1004c03a 	cmpne	r2,r2,zero
 100ed6c:	1000131e 	bne	r2,zero,100edbc <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 100ed70:	e13ff417 	ldw	r4,-48(fp)
 100ed74:	e17ffb04 	addi	r5,fp,-20
 100ed78:	100cd9c0 	call	100cd9c <get_cluster_flag>
 100ed7c:	1005003a 	cmpeq	r2,r2,zero
 100ed80:	10000c1e 	bne	r2,zero,100edb4 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100ed84:	e0bffb0b 	ldhu	r2,-20(fp)
 100ed88:	10bfffcc 	andi	r2,r2,65535
 100ed8c:	10fffe0c 	andi	r3,r2,65528
 100ed90:	00bffe14 	movui	r2,65528
 100ed94:	1880021e 	bne	r3,r2,100eda0 <find_file_in_directory+0x410>
						return false;
 100ed98:	e03fff15 	stw	zero,-4(fp)
 100ed9c:	00000f06 	br	100eddc <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 100eda0:	e0bffb0b 	ldhu	r2,-20(fp)
 100eda4:	10bfffcc 	andi	r2,r2,65535
 100eda8:	10bffe0c 	andi	r2,r2,65528
 100edac:	e0bff415 	stw	r2,-48(fp)
 100edb0:	00000206 	br	100edbc <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 100edb4:	e03fff15 	stw	zero,-4(fp)
 100edb8:	00000806 	br	100eddc <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 100edbc:	e0fff417 	ldw	r3,-48(fp)
 100edc0:	00bffdd4 	movui	r2,65527
 100edc4:	10c00316 	blt	r2,r3,100edd4 <find_file_in_directory+0x444>
 100edc8:	e0bff117 	ldw	r2,-60(fp)
 100edcc:	1005003a 	cmpeq	r2,r2,zero
 100edd0:	103f9f1e 	bne	r2,zero,100ec50 <find_file_in_directory+0x2c0>
	}

	return result;
 100edd4:	e0bff117 	ldw	r2,-60(fp)
 100edd8:	e0bfff15 	stw	r2,-4(fp)
 100eddc:	e0bfff17 	ldw	r2,-4(fp)
}
 100ede0:	e037883a 	mov	sp,fp
 100ede4:	dfc00117 	ldw	ra,4(sp)
 100ede8:	df000017 	ldw	fp,0(sp)
 100edec:	dec00204 	addi	sp,sp,8
 100edf0:	f800283a 	ret

0100edf4 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 100edf4:	defff504 	addi	sp,sp,-44
 100edf8:	dfc00a15 	stw	ra,40(sp)
 100edfc:	df000915 	stw	fp,36(sp)
 100ee00:	df000904 	addi	fp,sp,36
 100ee04:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 100ee08:	00804074 	movhi	r2,257
 100ee0c:	10986504 	addi	r2,r2,24980
 100ee10:	10801117 	ldw	r2,68(r2)
 100ee14:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 100ee18:	00800084 	movi	r2,2
 100ee1c:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 100ee20:	00bfffc4 	movi	r2,-1
 100ee24:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 100ee28:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 100ee2c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 100ee30:	00804074 	movhi	r2,257
 100ee34:	10986504 	addi	r2,r2,24980
 100ee38:	10801417 	ldw	r2,80(r2)
 100ee3c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 100ee40:	00804074 	movhi	r2,257
 100ee44:	10986504 	addi	r2,r2,24980
 100ee48:	1080058b 	ldhu	r2,22(r2)
 100ee4c:	10bfffcc 	andi	r2,r2,65535
 100ee50:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 100ee54:	00804074 	movhi	r2,257
 100ee58:	10986504 	addi	r2,r2,24980
 100ee5c:	10800917 	ldw	r2,36(r2)
 100ee60:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 100ee64:	e0fff817 	ldw	r3,-32(fp)
 100ee68:	e0bff717 	ldw	r2,-36(fp)
 100ee6c:	10c00b2e 	bgeu	r2,r3,100ee9c <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 100ee70:	e0fff817 	ldw	r3,-32(fp)
 100ee74:	e0bff917 	ldw	r2,-28(fp)
 100ee78:	1889c83a 	sub	r4,r3,r2
 100ee7c:	00804074 	movhi	r2,257
 100ee80:	10986504 	addi	r2,r2,24980
 100ee84:	10800383 	ldbu	r2,14(r2)
 100ee88:	11403fcc 	andi	r5,r2,255
 100ee8c:	100a43c0 	call	100a43c <__udivsi3>
 100ee90:	10800044 	addi	r2,r2,1
 100ee94:	e0bffa15 	stw	r2,-24(fp)
 100ee98:	00002906 	br	100ef40 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 100ee9c:	e0fff717 	ldw	r3,-36(fp)
 100eea0:	e0bff917 	ldw	r2,-28(fp)
 100eea4:	1889c83a 	sub	r4,r3,r2
 100eea8:	00804074 	movhi	r2,257
 100eeac:	10986504 	addi	r2,r2,24980
 100eeb0:	10800383 	ldbu	r2,14(r2)
 100eeb4:	11403fcc 	andi	r5,r2,255
 100eeb8:	100a43c0 	call	100a43c <__udivsi3>
 100eebc:	10800044 	addi	r2,r2,1
 100eec0:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 100eec4:	00001e06 	br	100ef40 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
 100eec8:	e13ffe17 	ldw	r4,-8(fp)
 100eecc:	d166f817 	ldw	r5,-25632(gp)
 100eed0:	100cca00 	call	100cca0 <Read_Sector_Data>
 100eed4:	1005003a 	cmpeq	r2,r2,zero
 100eed8:	1000131e 	bne	r2,zero,100ef28 <find_first_empty_cluster+0x134>
			do {
				cluster
 100eedc:	d0a6fa17 	ldw	r2,-25624(gp)
 100eee0:	10800a17 	ldw	r2,40(r2)
 100eee4:	1007883a 	mov	r3,r2
 100eee8:	e0bffd17 	ldw	r2,-12(fp)
 100eeec:	10803fcc 	andi	r2,r2,255
 100eef0:	1085883a 	add	r2,r2,r2
 100eef4:	1885883a 	add	r2,r3,r2
 100eef8:	1080002b 	ldhuio	r2,0(r2)
 100eefc:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 100ef00:	e0bffc0f 	ldh	r2,-16(fp)
 100ef04:	1005003a 	cmpeq	r2,r2,zero
 100ef08:	1000071e 	bne	r2,zero,100ef28 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 100ef0c:	e0bffd17 	ldw	r2,-12(fp)
 100ef10:	10800044 	addi	r2,r2,1
 100ef14:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 100ef18:	e0bffd17 	ldw	r2,-12(fp)
 100ef1c:	10803fcc 	andi	r2,r2,255
 100ef20:	1004c03a 	cmpne	r2,r2,zero
 100ef24:	103fed1e 	bne	r2,zero,100eedc <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 100ef28:	e0bffc0f 	ldh	r2,-16(fp)
 100ef2c:	1005003a 	cmpeq	r2,r2,zero
 100ef30:	1000081e 	bne	r2,zero,100ef54 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 100ef34:	e0bffe17 	ldw	r2,-8(fp)
 100ef38:	10800044 	addi	r2,r2,1
 100ef3c:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 100ef40:	00804074 	movhi	r2,257
 100ef44:	10986504 	addi	r2,r2,24980
 100ef48:	10c01217 	ldw	r3,72(r2)
 100ef4c:	e0bffe17 	ldw	r2,-8(fp)
 100ef50:	18bfdd1e 	bne	r3,r2,100eec8 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 100ef54:	e0bffc0f 	ldh	r2,-16(fp)
 100ef58:	1004c03a 	cmpne	r2,r2,zero
 100ef5c:	1000081e 	bne	r2,zero,100ef80 <find_first_empty_cluster+0x18c>
 100ef60:	e0fffc0f 	ldh	r3,-16(fp)
 100ef64:	e0bffa17 	ldw	r2,-24(fp)
 100ef68:	10c00536 	bltu	r2,r3,100ef80 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 100ef6c:	e0bfff17 	ldw	r2,-4(fp)
 100ef70:	e0fffd17 	ldw	r3,-12(fp)
 100ef74:	10c00015 	stw	r3,0(r2)
		result = true;
 100ef78:	00800044 	movi	r2,1
 100ef7c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 100ef80:	e0bffb17 	ldw	r2,-20(fp)
}
 100ef84:	e037883a 	mov	sp,fp
 100ef88:	dfc00117 	ldw	ra,4(sp)
 100ef8c:	df000017 	ldw	fp,0(sp)
 100ef90:	dec00204 	addi	sp,sp,8
 100ef94:	f800283a 	ret

0100ef98 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 100ef98:	defff404 	addi	sp,sp,-48
 100ef9c:	dfc00b15 	stw	ra,44(sp)
 100efa0:	df000a15 	stw	fp,40(sp)
 100efa4:	df000a04 	addi	fp,sp,40
 100efa8:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 100efac:	00bfffc4 	movi	r2,-1
 100efb0:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 100efb4:	e0bffe17 	ldw	r2,-8(fp)
 100efb8:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 100efbc:	e0bffa17 	ldw	r2,-24(fp)
 100efc0:	113fff84 	addi	r4,r2,-2
 100efc4:	00804074 	movhi	r2,257
 100efc8:	10986504 	addi	r2,r2,24980
 100efcc:	10800383 	ldbu	r2,14(r2)
 100efd0:	11403fcc 	andi	r5,r2,255
 100efd4:	1000adc0 	call	1000adc <__mulsi3>
 100efd8:	1007883a 	mov	r3,r2
 100efdc:	00804074 	movhi	r2,257
 100efe0:	10986504 	addi	r2,r2,24980
 100efe4:	10801417 	ldw	r2,80(r2)
 100efe8:	1885883a 	add	r2,r3,r2
 100efec:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
 100eff0:	e03ff815 	stw	zero,-32(fp)
 100eff4:	00002c06 	br	100f0a8 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 100eff8:	e0fff817 	ldw	r3,-32(fp)
 100effc:	e0bff917 	ldw	r2,-28(fp)
 100f000:	1889883a 	add	r4,r3,r2
 100f004:	d166f817 	ldw	r5,-25632(gp)
 100f008:	100cca00 	call	100cca0 <Read_Sector_Data>
 100f00c:	1005003a 	cmpeq	r2,r2,zero
 100f010:	10002b1e 	bne	r2,zero,100f0c0 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100f014:	e03ff715 	stw	zero,-36(fp)
 100f018:	00001d06 	br	100f090 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
 100f01c:	d0a6fa17 	ldw	r2,-25624(gp)
 100f020:	10800a17 	ldw	r2,40(r2)
 100f024:	1007883a 	mov	r3,r2
 100f028:	e0bff717 	ldw	r2,-36(fp)
 100f02c:	1004917a 	slli	r2,r2,5
 100f030:	1885883a 	add	r2,r3,r2
 100f034:	10800023 	ldbuio	r2,0(r2)
 100f038:	10803fcc 	andi	r2,r2,255
 100f03c:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 100f040:	e0bff60b 	ldhu	r2,-40(fp)
 100f044:	10803960 	cmpeqi	r2,r2,229
 100f048:	1000031e 	bne	r2,zero,100f058 <find_first_empty_record_in_a_subdirectory+0xc0>
 100f04c:	e0bff60b 	ldhu	r2,-40(fp)
 100f050:	1004c03a 	cmpne	r2,r2,zero
 100f054:	10000b1e 	bne	r2,zero,100f084 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 100f058:	e0bff817 	ldw	r2,-32(fp)
 100f05c:	1006913a 	slli	r3,r2,4
 100f060:	e0bff717 	ldw	r2,-36(fp)
 100f064:	1885883a 	add	r2,r3,r2
 100f068:	1006943a 	slli	r3,r2,16
 100f06c:	e0bffa17 	ldw	r2,-24(fp)
 100f070:	1884b03a 	or	r2,r3,r2
 100f074:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 100f078:	e0bffb17 	ldw	r2,-20(fp)
 100f07c:	e0bfff15 	stw	r2,-4(fp)
 100f080:	00005206 	br	100f1cc <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100f084:	e0bff717 	ldw	r2,-36(fp)
 100f088:	10800044 	addi	r2,r2,1
 100f08c:	e0bff715 	stw	r2,-36(fp)
 100f090:	e0bff717 	ldw	r2,-36(fp)
 100f094:	10800410 	cmplti	r2,r2,16
 100f098:	103fe01e 	bne	r2,zero,100f01c <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
 100f09c:	e0bff817 	ldw	r2,-32(fp)
 100f0a0:	10800044 	addi	r2,r2,1
 100f0a4:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
 100f0a8:	00804074 	movhi	r2,257
 100f0ac:	10986504 	addi	r2,r2,24980
 100f0b0:	10800383 	ldbu	r2,14(r2)
 100f0b4:	10c03fcc 	andi	r3,r2,255
 100f0b8:	e0bff817 	ldw	r2,-32(fp)
 100f0bc:	10ffce16 	blt	r2,r3,100eff8 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 100f0c0:	e0bffb17 	ldw	r2,-20(fp)
 100f0c4:	1004403a 	cmpge	r2,r2,zero
 100f0c8:	1000381e 	bne	r2,zero,100f1ac <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 100f0cc:	e13ffa17 	ldw	r4,-24(fp)
 100f0d0:	e17ffc04 	addi	r5,fp,-16
 100f0d4:	100cd9c0 	call	100cd9c <get_cluster_flag>
 100f0d8:	1005003a 	cmpeq	r2,r2,zero
 100f0dc:	1000311e 	bne	r2,zero,100f1a4 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100f0e0:	e0bffc0b 	ldhu	r2,-16(fp)
 100f0e4:	10bfffcc 	andi	r2,r2,65535
 100f0e8:	10fffe0c 	andi	r3,r2,65528
 100f0ec:	00bffe14 	movui	r2,65528
 100f0f0:	18802e1e 	bne	r3,r2,100f1ac <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 100f0f4:	e13ffd04 	addi	r4,fp,-12
 100f0f8:	100edf40 	call	100edf4 <find_first_empty_cluster>
 100f0fc:	1005003a 	cmpeq	r2,r2,zero
 100f100:	1000231e 	bne	r2,zero,100f190 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 100f104:	e13ffa17 	ldw	r4,-24(fp)
 100f108:	e0bffd17 	ldw	r2,-12(fp)
 100f10c:	117fffcc 	andi	r5,r2,65535
 100f110:	2960001c 	xori	r5,r5,32768
 100f114:	29600004 	addi	r5,r5,-32768
 100f118:	01800044 	movi	r6,1
 100f11c:	100ce540 	call	100ce54 <mark_cluster>
 100f120:	1005003a 	cmpeq	r2,r2,zero
 100f124:	10001a1e 	bne	r2,zero,100f190 <find_first_empty_record_in_a_subdirectory+0x1f8>
 100f128:	e0bffd17 	ldw	r2,-12(fp)
 100f12c:	1009883a 	mov	r4,r2
 100f130:	017fffc4 	movi	r5,-1
 100f134:	01800044 	movi	r6,1
 100f138:	100ce540 	call	100ce54 <mark_cluster>
 100f13c:	1005003a 	cmpeq	r2,r2,zero
 100f140:	1000131e 	bne	r2,zero,100f190 <find_first_empty_record_in_a_subdirectory+0x1f8>
 100f144:	e13ffa17 	ldw	r4,-24(fp)
 100f148:	e0bffd17 	ldw	r2,-12(fp)
 100f14c:	117fffcc 	andi	r5,r2,65535
 100f150:	2960001c 	xori	r5,r5,32768
 100f154:	29600004 	addi	r5,r5,-32768
 100f158:	000d883a 	mov	r6,zero
 100f15c:	100ce540 	call	100ce54 <mark_cluster>
 100f160:	1005003a 	cmpeq	r2,r2,zero
 100f164:	10000a1e 	bne	r2,zero,100f190 <find_first_empty_record_in_a_subdirectory+0x1f8>
 100f168:	e0bffd17 	ldw	r2,-12(fp)
 100f16c:	1009883a 	mov	r4,r2
 100f170:	017fffc4 	movi	r5,-1
 100f174:	000d883a 	mov	r6,zero
 100f178:	100ce540 	call	100ce54 <mark_cluster>
 100f17c:	1005003a 	cmpeq	r2,r2,zero
 100f180:	1000031e 	bne	r2,zero,100f190 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 100f184:	100cc500 	call	100cc50 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 100f188:	e0bffd17 	ldw	r2,-12(fp)
 100f18c:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 100f190:	e0bffc0b 	ldhu	r2,-16(fp)
 100f194:	10bfffcc 	andi	r2,r2,65535
 100f198:	10bffe0c 	andi	r2,r2,65528
 100f19c:	e0bffa15 	stw	r2,-24(fp)
 100f1a0:	00000206 	br	100f1ac <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 100f1a4:	00bfffc4 	movi	r2,-1
 100f1a8:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 100f1ac:	e0fffa17 	ldw	r3,-24(fp)
 100f1b0:	00bffdd4 	movui	r2,65527
 100f1b4:	10c00316 	blt	r2,r3,100f1c4 <find_first_empty_record_in_a_subdirectory+0x22c>
 100f1b8:	e0bffb17 	ldw	r2,-20(fp)
 100f1bc:	10bfffe0 	cmpeqi	r2,r2,-1
 100f1c0:	103f7e1e 	bne	r2,zero,100efbc <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 100f1c4:	e0bffb17 	ldw	r2,-20(fp)
 100f1c8:	e0bfff15 	stw	r2,-4(fp)
 100f1cc:	e0bfff17 	ldw	r2,-4(fp)
}
 100f1d0:	e037883a 	mov	sp,fp
 100f1d4:	dfc00117 	ldw	ra,4(sp)
 100f1d8:	df000017 	ldw	fp,0(sp)
 100f1dc:	dec00204 	addi	sp,sp,8
 100f1e0:	f800283a 	ret

0100f1e4 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 100f1e4:	defff804 	addi	sp,sp,-32
 100f1e8:	dfc00715 	stw	ra,28(sp)
 100f1ec:	df000615 	stw	fp,24(sp)
 100f1f0:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
 100f1f4:	00804074 	movhi	r2,257
 100f1f8:	10986504 	addi	r2,r2,24980
 100f1fc:	1080050b 	ldhu	r2,20(r2)
 100f200:	10bfffcc 	andi	r2,r2,65535
 100f204:	1008917a 	slli	r4,r2,5
 100f208:	00804074 	movhi	r2,257
 100f20c:	10986504 	addi	r2,r2,24980
 100f210:	1080030b 	ldhu	r2,12(r2)
 100f214:	117fffcc 	andi	r5,r2,65535
 100f218:	100a37c0 	call	100a37c <__divsi3>
 100f21c:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 100f220:	00bfffc4 	movi	r2,-1
 100f224:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 100f228:	e03ffd15 	stw	zero,-12(fp)
 100f22c:	00002d06 	br	100f2e4 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
 100f230:	00804074 	movhi	r2,257
 100f234:	10986504 	addi	r2,r2,24980
 100f238:	10c01317 	ldw	r3,76(r2)
 100f23c:	e0bffd17 	ldw	r2,-12(fp)
 100f240:	1885883a 	add	r2,r3,r2
 100f244:	1009883a 	mov	r4,r2
 100f248:	d166f817 	ldw	r5,-25632(gp)
 100f24c:	100cca00 	call	100cca0 <Read_Sector_Data>
 100f250:	1005003a 	cmpeq	r2,r2,zero
 100f254:	1000261e 	bne	r2,zero,100f2f0 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 100f258:	e03ffb15 	stw	zero,-20(fp)
 100f25c:	00001b06 	br	100f2cc <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
 100f260:	d0a6fa17 	ldw	r2,-25624(gp)
 100f264:	10800a17 	ldw	r2,40(r2)
 100f268:	1007883a 	mov	r3,r2
 100f26c:	e0bffb17 	ldw	r2,-20(fp)
 100f270:	1004917a 	slli	r2,r2,5
 100f274:	1885883a 	add	r2,r3,r2
 100f278:	10800023 	ldbuio	r2,0(r2)
 100f27c:	10803fcc 	andi	r2,r2,255
 100f280:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 100f284:	e0bffa0b 	ldhu	r2,-24(fp)
 100f288:	10803960 	cmpeqi	r2,r2,229
 100f28c:	1000031e 	bne	r2,zero,100f29c <find_first_empty_record_in_root_directory+0xb8>
 100f290:	e0bffa0b 	ldhu	r2,-24(fp)
 100f294:	1004c03a 	cmpne	r2,r2,zero
 100f298:	1000091e 	bne	r2,zero,100f2c0 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 100f29c:	e0bffd17 	ldw	r2,-12(fp)
 100f2a0:	1006913a 	slli	r3,r2,4
 100f2a4:	e0bffb17 	ldw	r2,-20(fp)
 100f2a8:	1885883a 	add	r2,r3,r2
 100f2ac:	1004943a 	slli	r2,r2,16
 100f2b0:	e0bffc15 	stw	r2,-16(fp)
					return result;
 100f2b4:	e0bffc17 	ldw	r2,-16(fp)
 100f2b8:	e0bfff15 	stw	r2,-4(fp)
 100f2bc:	00000e06 	br	100f2f8 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 100f2c0:	e0bffb17 	ldw	r2,-20(fp)
 100f2c4:	10800044 	addi	r2,r2,1
 100f2c8:	e0bffb15 	stw	r2,-20(fp)
 100f2cc:	e0bffb17 	ldw	r2,-20(fp)
 100f2d0:	10800410 	cmplti	r2,r2,16
 100f2d4:	103fe21e 	bne	r2,zero,100f260 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 100f2d8:	e0bffd17 	ldw	r2,-12(fp)
 100f2dc:	10800044 	addi	r2,r2,1
 100f2e0:	e0bffd15 	stw	r2,-12(fp)
 100f2e4:	e0fffd17 	ldw	r3,-12(fp)
 100f2e8:	e0bffe17 	ldw	r2,-8(fp)
 100f2ec:	18bfd016 	blt	r3,r2,100f230 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 100f2f0:	e0bffc17 	ldw	r2,-16(fp)
 100f2f4:	e0bfff15 	stw	r2,-4(fp)
 100f2f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f2fc:	e037883a 	mov	sp,fp
 100f300:	dfc00117 	ldw	ra,4(sp)
 100f304:	df000017 	ldw	fp,0(sp)
 100f308:	dec00204 	addi	sp,sp,8
 100f30c:	f800283a 	ret

0100f310 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 100f310:	defffa04 	addi	sp,sp,-24
 100f314:	df000515 	stw	fp,20(sp)
 100f318:	df000504 	addi	fp,sp,20
 100f31c:	e13ffd15 	stw	r4,-12(fp)
 100f320:	e17ffe15 	stw	r5,-8(fp)
 100f324:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 100f328:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 100f32c:	e03ffc15 	stw	zero,-16(fp)
 100f330:	00002b06 	br	100f3e0 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 100f334:	e0bffb17 	ldw	r2,-20(fp)
 100f338:	1007883a 	mov	r3,r2
 100f33c:	e0bffd17 	ldw	r2,-12(fp)
 100f340:	1885883a 	add	r2,r3,r2
 100f344:	10800003 	ldbu	r2,0(r2)
 100f348:	10803fcc 	andi	r2,r2,255
 100f34c:	1080201c 	xori	r2,r2,128
 100f350:	10bfe004 	addi	r2,r2,-128
 100f354:	10800ba0 	cmpeqi	r2,r2,46
 100f358:	1000181e 	bne	r2,zero,100f3bc <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 100f35c:	e0bffc17 	ldw	r2,-16(fp)
 100f360:	1007883a 	mov	r3,r2
 100f364:	e0bffe17 	ldw	r2,-8(fp)
 100f368:	1889883a 	add	r4,r3,r2
 100f36c:	e0bffb17 	ldw	r2,-20(fp)
 100f370:	1007883a 	mov	r3,r2
 100f374:	e0bffd17 	ldw	r2,-12(fp)
 100f378:	1885883a 	add	r2,r3,r2
 100f37c:	10800003 	ldbu	r2,0(r2)
 100f380:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 100f384:	e0bffb17 	ldw	r2,-20(fp)
 100f388:	1007883a 	mov	r3,r2
 100f38c:	e0bffd17 	ldw	r2,-12(fp)
 100f390:	1885883a 	add	r2,r3,r2
 100f394:	10800003 	ldbu	r2,0(r2)
 100f398:	10803fcc 	andi	r2,r2,255
 100f39c:	1080201c 	xori	r2,r2,128
 100f3a0:	10bfe004 	addi	r2,r2,-128
 100f3a4:	1005003a 	cmpeq	r2,r2,zero
 100f3a8:	10000a1e 	bne	r2,zero,100f3d4 <convert_filename_to_name_extension+0xc4>
				local++;
 100f3ac:	e0bffb17 	ldw	r2,-20(fp)
 100f3b0:	10800044 	addi	r2,r2,1
 100f3b4:	e0bffb15 	stw	r2,-20(fp)
 100f3b8:	00000606 	br	100f3d4 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 100f3bc:	e0bffc17 	ldw	r2,-16(fp)
 100f3c0:	1007883a 	mov	r3,r2
 100f3c4:	e0bffe17 	ldw	r2,-8(fp)
 100f3c8:	1887883a 	add	r3,r3,r2
 100f3cc:	00800804 	movi	r2,32
 100f3d0:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 100f3d4:	e0bffc17 	ldw	r2,-16(fp)
 100f3d8:	10800044 	addi	r2,r2,1
 100f3dc:	e0bffc15 	stw	r2,-16(fp)
 100f3e0:	e0bffc17 	ldw	r2,-16(fp)
 100f3e4:	10800210 	cmplti	r2,r2,8
 100f3e8:	103fd21e 	bne	r2,zero,100f334 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 100f3ec:	e0bffb17 	ldw	r2,-20(fp)
 100f3f0:	1007883a 	mov	r3,r2
 100f3f4:	e0bffd17 	ldw	r2,-12(fp)
 100f3f8:	1885883a 	add	r2,r3,r2
 100f3fc:	10800003 	ldbu	r2,0(r2)
 100f400:	10803fcc 	andi	r2,r2,255
 100f404:	1080201c 	xori	r2,r2,128
 100f408:	10bfe004 	addi	r2,r2,-128
 100f40c:	10800b98 	cmpnei	r2,r2,46
 100f410:	1000031e 	bne	r2,zero,100f420 <convert_filename_to_name_extension+0x110>
		local++;
 100f414:	e0bffb17 	ldw	r2,-20(fp)
 100f418:	10800044 	addi	r2,r2,1
 100f41c:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 100f420:	e03ffc15 	stw	zero,-16(fp)
 100f424:	00002106 	br	100f4ac <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 100f428:	e0bffb17 	ldw	r2,-20(fp)
 100f42c:	1007883a 	mov	r3,r2
 100f430:	e0bffd17 	ldw	r2,-12(fp)
 100f434:	1885883a 	add	r2,r3,r2
 100f438:	10800003 	ldbu	r2,0(r2)
 100f43c:	10803fcc 	andi	r2,r2,255
 100f440:	1080201c 	xori	r2,r2,128
 100f444:	10bfe004 	addi	r2,r2,-128
 100f448:	1005003a 	cmpeq	r2,r2,zero
 100f44c:	10000e1e 	bne	r2,zero,100f488 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 100f450:	e0bffc17 	ldw	r2,-16(fp)
 100f454:	1007883a 	mov	r3,r2
 100f458:	e0bfff17 	ldw	r2,-4(fp)
 100f45c:	1889883a 	add	r4,r3,r2
 100f460:	e0bffb17 	ldw	r2,-20(fp)
 100f464:	1007883a 	mov	r3,r2
 100f468:	e0bffd17 	ldw	r2,-12(fp)
 100f46c:	1885883a 	add	r2,r3,r2
 100f470:	10800003 	ldbu	r2,0(r2)
 100f474:	20800005 	stb	r2,0(r4)
			local++;
 100f478:	e0bffb17 	ldw	r2,-20(fp)
 100f47c:	10800044 	addi	r2,r2,1
 100f480:	e0bffb15 	stw	r2,-20(fp)
 100f484:	00000606 	br	100f4a0 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 100f488:	e0bffc17 	ldw	r2,-16(fp)
 100f48c:	1007883a 	mov	r3,r2
 100f490:	e0bfff17 	ldw	r2,-4(fp)
 100f494:	1887883a 	add	r3,r3,r2
 100f498:	00800804 	movi	r2,32
 100f49c:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 100f4a0:	e0bffc17 	ldw	r2,-16(fp)
 100f4a4:	10800044 	addi	r2,r2,1
 100f4a8:	e0bffc15 	stw	r2,-16(fp)
 100f4ac:	e0bffc17 	ldw	r2,-16(fp)
 100f4b0:	108000d0 	cmplti	r2,r2,3
 100f4b4:	103fdc1e 	bne	r2,zero,100f428 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 100f4b8:	e037883a 	mov	sp,fp
 100f4bc:	df000017 	ldw	fp,0(sp)
 100f4c0:	dec00104 	addi	sp,sp,4
 100f4c4:	f800283a 	ret

0100f4c8 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 100f4c8:	defff204 	addi	sp,sp,-56
 100f4cc:	dfc00d15 	stw	ra,52(sp)
 100f4d0:	df000c15 	stw	fp,48(sp)
 100f4d4:	dc000b15 	stw	r16,44(sp)
 100f4d8:	df000b04 	addi	fp,sp,44
 100f4dc:	e13ffb15 	stw	r4,-20(fp)
 100f4e0:	e17ffc15 	stw	r5,-16(fp)
 100f4e4:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 100f4e8:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 100f4ec:	e13ffa04 	addi	r4,fp,-24
 100f4f0:	100edf40 	call	100edf4 <find_first_empty_cluster>
 100f4f4:	1005003a 	cmpeq	r2,r2,zero
 100f4f8:	1000a31e 	bne	r2,zero,100f788 <create_file+0x2c0>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 100f4fc:	e0bffd17 	ldw	r2,-12(fp)
 100f500:	10800a17 	ldw	r2,40(r2)
 100f504:	1004c03a 	cmpne	r2,r2,zero
 100f508:	1000031e 	bne	r2,zero,100f518 <create_file+0x50>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 100f50c:	100f1e40 	call	100f1e4 <find_first_empty_record_in_root_directory>
 100f510:	e0bff815 	stw	r2,-32(fp)
 100f514:	00000506 	br	100f52c <create_file+0x64>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 100f518:	e0bffd17 	ldw	r2,-12(fp)
 100f51c:	1080058b 	ldhu	r2,22(r2)
 100f520:	113fffcc 	andi	r4,r2,65535
 100f524:	100ef980 	call	100ef98 <find_first_empty_record_in_a_subdirectory>
 100f528:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 100f52c:	e0bff817 	ldw	r2,-32(fp)
 100f530:	1004803a 	cmplt	r2,r2,zero
 100f534:	1000941e 	bne	r2,zero,100f788 <create_file+0x2c0>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 100f538:	e13ffb17 	ldw	r4,-20(fp)
 100f53c:	100e0d00 	call	100e0d0 <get_dir_divider_location>
 100f540:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 100f544:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 100f548:	00000b06 	br	100f578 <create_file+0xb0>
				last_dir_separator = last_dir_separator + location + 1;
 100f54c:	e0fff517 	ldw	r3,-44(fp)
 100f550:	e0bff617 	ldw	r2,-40(fp)
 100f554:	1885883a 	add	r2,r3,r2
 100f558:	10800044 	addi	r2,r2,1
 100f55c:	e0bff515 	stw	r2,-44(fp)
				location
 100f560:	e0bff517 	ldw	r2,-44(fp)
 100f564:	1007883a 	mov	r3,r2
 100f568:	e0bffb17 	ldw	r2,-20(fp)
 100f56c:	1889883a 	add	r4,r3,r2
 100f570:	100e0d00 	call	100e0d0 <get_dir_divider_location>
 100f574:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 100f578:	e0bff617 	ldw	r2,-40(fp)
 100f57c:	10800048 	cmpgei	r2,r2,1
 100f580:	103ff21e 	bne	r2,zero,100f54c <create_file+0x84>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 100f584:	e0bff517 	ldw	r2,-44(fp)
 100f588:	1007883a 	mov	r3,r2
 100f58c:	e0bffb17 	ldw	r2,-20(fp)
 100f590:	1889883a 	add	r4,r3,r2
 100f594:	e0bffc17 	ldw	r2,-16(fp)
 100f598:	100b883a 	mov	r5,r2
 100f59c:	e0bffc17 	ldw	r2,-16(fp)
 100f5a0:	10800204 	addi	r2,r2,8
 100f5a4:	100d883a 	mov	r6,r2
 100f5a8:	100f3100 	call	100f310 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 100f5ac:	e0bffc17 	ldw	r2,-16(fp)
 100f5b0:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 100f5b4:	e0bffc17 	ldw	r2,-16(fp)
 100f5b8:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 100f5bc:	e0bffc17 	ldw	r2,-16(fp)
 100f5c0:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 100f5c4:	e0bffc17 	ldw	r2,-16(fp)
 100f5c8:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 100f5cc:	e0bffc17 	ldw	r2,-16(fp)
 100f5d0:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 100f5d4:	e0bffc17 	ldw	r2,-16(fp)
 100f5d8:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 100f5dc:	e0bffa17 	ldw	r2,-24(fp)
 100f5e0:	1007883a 	mov	r3,r2
 100f5e4:	e0bffc17 	ldw	r2,-16(fp)
 100f5e8:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 100f5ec:	e0bffc17 	ldw	r2,-16(fp)
 100f5f0:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 100f5f4:	e0fffa17 	ldw	r3,-24(fp)
 100f5f8:	e0bffc17 	ldw	r2,-16(fp)
 100f5fc:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 100f600:	e0bffc17 	ldw	r2,-16(fp)
 100f604:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 100f608:	e0bffc17 	ldw	r2,-16(fp)
 100f60c:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 100f610:	e0bff817 	ldw	r2,-32(fp)
 100f614:	10ffffcc 	andi	r3,r2,65535
 100f618:	e0bffc17 	ldw	r2,-16(fp)
 100f61c:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 100f620:	e0bff817 	ldw	r2,-32(fp)
 100f624:	1005d43a 	srai	r2,r2,16
 100f628:	10bfffcc 	andi	r2,r2,65535
 100f62c:	e0bfff15 	stw	r2,-4(fp)
 100f630:	e0ffff17 	ldw	r3,-4(fp)
 100f634:	1804403a 	cmpge	r2,r3,zero
 100f638:	1000031e 	bne	r2,zero,100f648 <create_file+0x180>
 100f63c:	e0bfff17 	ldw	r2,-4(fp)
 100f640:	108003c4 	addi	r2,r2,15
 100f644:	e0bfff15 	stw	r2,-4(fp)
 100f648:	e0ffff17 	ldw	r3,-4(fp)
 100f64c:	1805d13a 	srai	r2,r3,4
 100f650:	1007883a 	mov	r3,r2
 100f654:	e0bffc17 	ldw	r2,-16(fp)
 100f658:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 100f65c:	e0bff817 	ldw	r2,-32(fp)
 100f660:	1005d43a 	srai	r2,r2,16
 100f664:	108003cc 	andi	r2,r2,15
 100f668:	1004917a 	slli	r2,r2,5
 100f66c:	1007883a 	mov	r3,r2
 100f670:	e0bffc17 	ldw	r2,-16(fp)
 100f674:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 100f678:	e0bffd17 	ldw	r2,-12(fp)
 100f67c:	1080058b 	ldhu	r2,22(r2)
 100f680:	10ffffcc 	andi	r3,r2,65535
 100f684:	e0bffc17 	ldw	r2,-16(fp)
 100f688:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 100f68c:	e0fffc17 	ldw	r3,-16(fp)
 100f690:	00800044 	movi	r2,1
 100f694:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 100f698:	e0fffc17 	ldw	r3,-16(fp)
 100f69c:	00800044 	movi	r2,1
 100f6a0:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
 100f6a4:	e0bffc17 	ldw	r2,-16(fp)
 100f6a8:	10800a17 	ldw	r2,40(r2)
 100f6ac:	1004c03a 	cmpne	r2,r2,zero
 100f6b0:	1000081e 	bne	r2,zero,100f6d4 <create_file+0x20c>
 100f6b4:	00804074 	movhi	r2,257
 100f6b8:	10986504 	addi	r2,r2,24980
 100f6bc:	10c01317 	ldw	r3,76(r2)
 100f6c0:	e0bffc17 	ldw	r2,-16(fp)
 100f6c4:	10800b17 	ldw	r2,44(r2)
 100f6c8:	1887883a 	add	r3,r3,r2
 100f6cc:	e0fffe15 	stw	r3,-8(fp)
 100f6d0:	00001006 	br	100f714 <create_file+0x24c>
 100f6d4:	00804074 	movhi	r2,257
 100f6d8:	10986504 	addi	r2,r2,24980
 100f6dc:	14001417 	ldw	r16,80(r2)
 100f6e0:	e0bffc17 	ldw	r2,-16(fp)
 100f6e4:	10800a17 	ldw	r2,40(r2)
 100f6e8:	113fff84 	addi	r4,r2,-2
 100f6ec:	00804074 	movhi	r2,257
 100f6f0:	10986504 	addi	r2,r2,24980
 100f6f4:	10800383 	ldbu	r2,14(r2)
 100f6f8:	11403fcc 	andi	r5,r2,255
 100f6fc:	1000adc0 	call	1000adc <__mulsi3>
 100f700:	8087883a 	add	r3,r16,r2
 100f704:	e0bffc17 	ldw	r2,-16(fp)
 100f708:	10800b17 	ldw	r2,44(r2)
 100f70c:	1887883a 	add	r3,r3,r2
 100f710:	e0fffe15 	stw	r3,-8(fp)
 100f714:	e0bffe17 	ldw	r2,-8(fp)
 100f718:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 100f71c:	e13ff717 	ldw	r4,-36(fp)
 100f720:	d166f817 	ldw	r5,-25632(gp)
 100f724:	100cca00 	call	100cca0 <Read_Sector_Data>
 100f728:	1005003a 	cmpeq	r2,r2,zero
 100f72c:	1000161e 	bne	r2,zero,100f788 <create_file+0x2c0>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
 100f730:	e0bffc17 	ldw	r2,-16(fp)
 100f734:	10800c0b 	ldhu	r2,48(r2)
 100f738:	113fffcc 	andi	r4,r2,65535
 100f73c:	2120001c 	xori	r4,r4,32768
 100f740:	21200004 	addi	r4,r4,-32768
 100f744:	e17ffc17 	ldw	r5,-16(fp)
 100f748:	100d36c0 	call	100d36c <Write_File_Record_At_Offset>
 100f74c:	1005003a 	cmpeq	r2,r2,zero
 100f750:	10000d1e 	bne	r2,zero,100f788 <create_file+0x2c0>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
 100f754:	100cc500 	call	100cc50 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 100f758:	e13ffa17 	ldw	r4,-24(fp)
 100f75c:	017fffc4 	movi	r5,-1
 100f760:	01800044 	movi	r6,1
 100f764:	100ce540 	call	100ce54 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 100f768:	e13ffa17 	ldw	r4,-24(fp)
 100f76c:	017fffc4 	movi	r5,-1
 100f770:	000d883a 	mov	r6,zero
 100f774:	100ce540 	call	100ce54 <mark_cluster>
 100f778:	1005003a 	cmpeq	r2,r2,zero
 100f77c:	1000021e 	bne	r2,zero,100f788 <create_file+0x2c0>
							false)) {
						result = true;
 100f780:	00800044 	movi	r2,1
 100f784:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 100f788:	e0bff917 	ldw	r2,-28(fp)
}
 100f78c:	e037883a 	mov	sp,fp
 100f790:	dfc00217 	ldw	ra,8(sp)
 100f794:	df000117 	ldw	fp,4(sp)
 100f798:	dc000017 	ldw	r16,0(sp)
 100f79c:	dec00304 	addi	sp,sp,12
 100f7a0:	f800283a 	ret

0100f7a4 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 100f7a4:	defffb04 	addi	sp,sp,-20
 100f7a8:	df000415 	stw	fp,16(sp)
 100f7ac:	df000404 	addi	fp,sp,16
 100f7b0:	e13ffe15 	stw	r4,-8(fp)
 100f7b4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 100f7b8:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100f7bc:	e03ffd15 	stw	zero,-12(fp)
 100f7c0:	00001606 	br	100f81c <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 100f7c4:	e0fffd17 	ldw	r3,-12(fp)
 100f7c8:	e0bffe17 	ldw	r2,-8(fp)
 100f7cc:	10c5883a 	add	r2,r2,r3
 100f7d0:	10800003 	ldbu	r2,0(r2)
 100f7d4:	10803fcc 	andi	r2,r2,255
 100f7d8:	10800820 	cmpeqi	r2,r2,32
 100f7dc:	10000c1e 	bne	r2,zero,100f810 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 100f7e0:	e0bffc17 	ldw	r2,-16(fp)
 100f7e4:	1007883a 	mov	r3,r2
 100f7e8:	e0bfff17 	ldw	r2,-4(fp)
 100f7ec:	1889883a 	add	r4,r3,r2
 100f7f0:	e0fffd17 	ldw	r3,-12(fp)
 100f7f4:	e0bffe17 	ldw	r2,-8(fp)
 100f7f8:	10c5883a 	add	r2,r2,r3
 100f7fc:	10800003 	ldbu	r2,0(r2)
 100f800:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 100f804:	e0bffc17 	ldw	r2,-16(fp)
 100f808:	10800044 	addi	r2,r2,1
 100f80c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100f810:	e0bffd17 	ldw	r2,-12(fp)
 100f814:	10800044 	addi	r2,r2,1
 100f818:	e0bffd15 	stw	r2,-12(fp)
 100f81c:	e0bffd17 	ldw	r2,-12(fp)
 100f820:	10800210 	cmplti	r2,r2,8
 100f824:	103fe71e 	bne	r2,zero,100f7c4 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 100f828:	e0bffe17 	ldw	r2,-8(fp)
 100f82c:	10800203 	ldbu	r2,8(r2)
 100f830:	10803fcc 	andi	r2,r2,255
 100f834:	10800820 	cmpeqi	r2,r2,32
 100f838:	1000261e 	bne	r2,zero,100f8d4 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 100f83c:	e0bffc17 	ldw	r2,-16(fp)
 100f840:	1007883a 	mov	r3,r2
 100f844:	e0bfff17 	ldw	r2,-4(fp)
 100f848:	1887883a 	add	r3,r3,r2
 100f84c:	00800b84 	movi	r2,46
 100f850:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 100f854:	e0bffc17 	ldw	r2,-16(fp)
 100f858:	10800044 	addi	r2,r2,1
 100f85c:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 100f860:	e03ffd15 	stw	zero,-12(fp)
 100f864:	00001806 	br	100f8c8 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 100f868:	e0fffd17 	ldw	r3,-12(fp)
 100f86c:	e0bffe17 	ldw	r2,-8(fp)
 100f870:	1885883a 	add	r2,r3,r2
 100f874:	10800204 	addi	r2,r2,8
 100f878:	10800003 	ldbu	r2,0(r2)
 100f87c:	10803fcc 	andi	r2,r2,255
 100f880:	10800820 	cmpeqi	r2,r2,32
 100f884:	10000d1e 	bne	r2,zero,100f8bc <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 100f888:	e0bffc17 	ldw	r2,-16(fp)
 100f88c:	1007883a 	mov	r3,r2
 100f890:	e0bfff17 	ldw	r2,-4(fp)
 100f894:	1889883a 	add	r4,r3,r2
 100f898:	e0fffd17 	ldw	r3,-12(fp)
 100f89c:	e0bffe17 	ldw	r2,-8(fp)
 100f8a0:	1885883a 	add	r2,r3,r2
 100f8a4:	10800204 	addi	r2,r2,8
 100f8a8:	10800003 	ldbu	r2,0(r2)
 100f8ac:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 100f8b0:	e0bffc17 	ldw	r2,-16(fp)
 100f8b4:	10800044 	addi	r2,r2,1
 100f8b8:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 100f8bc:	e0bffd17 	ldw	r2,-12(fp)
 100f8c0:	10800044 	addi	r2,r2,1
 100f8c4:	e0bffd15 	stw	r2,-12(fp)
 100f8c8:	e0bffd17 	ldw	r2,-12(fp)
 100f8cc:	108000d0 	cmplti	r2,r2,3
 100f8d0:	103fe51e 	bne	r2,zero,100f868 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 100f8d4:	e0bffc17 	ldw	r2,-16(fp)
 100f8d8:	1007883a 	mov	r3,r2
 100f8dc:	e0bfff17 	ldw	r2,-4(fp)
 100f8e0:	1885883a 	add	r2,r3,r2
 100f8e4:	10000005 	stb	zero,0(r2)
}
 100f8e8:	e037883a 	mov	sp,fp
 100f8ec:	df000017 	ldw	fp,0(sp)
 100f8f0:	dec00104 	addi	sp,sp,4
 100f8f4:	f800283a 	ret

0100f8f8 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 100f8f8:	defffc04 	addi	sp,sp,-16
 100f8fc:	dfc00315 	stw	ra,12(sp)
 100f900:	df000215 	stw	fp,8(sp)
 100f904:	df000204 	addi	fp,sp,8
 100f908:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 100f90c:	e13fff17 	ldw	r4,-4(fp)
 100f910:	01404074 	movhi	r5,257
 100f914:	29515e04 	addi	r5,r5,17784
 100f918:	10114ac0 	call	10114ac <alt_find_dev>
 100f91c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 100f920:	e0bffe17 	ldw	r2,-8(fp)
 100f924:	1005003a 	cmpeq	r2,r2,zero
 100f928:	10001e1e 	bne	r2,zero,100f9a4 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 100f92c:	e0bffe17 	ldw	r2,-8(fp)
 100f930:	10800a17 	ldw	r2,40(r2)
 100f934:	10808d04 	addi	r2,r2,564
 100f938:	d0a6f215 	stw	r2,-25656(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 100f93c:	e0bffe17 	ldw	r2,-8(fp)
 100f940:	10800a17 	ldw	r2,40(r2)
 100f944:	10808904 	addi	r2,r2,548
 100f948:	d0a6f315 	stw	r2,-25652(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 100f94c:	e0bffe17 	ldw	r2,-8(fp)
 100f950:	10800a17 	ldw	r2,40(r2)
 100f954:	10808404 	addi	r2,r2,528
 100f958:	d0a6f415 	stw	r2,-25648(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 100f95c:	e0bffe17 	ldw	r2,-8(fp)
 100f960:	10800a17 	ldw	r2,40(r2)
 100f964:	10808c04 	addi	r2,r2,560
 100f968:	d0a6f515 	stw	r2,-25644(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 100f96c:	e0bffe17 	ldw	r2,-8(fp)
 100f970:	10800a17 	ldw	r2,40(r2)
 100f974:	10808b04 	addi	r2,r2,556
 100f978:	d0a6f615 	stw	r2,-25640(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 100f97c:	e0bffe17 	ldw	r2,-8(fp)
 100f980:	10800a17 	ldw	r2,40(r2)
 100f984:	d0a6f715 	stw	r2,-25636(gp)
		device_pointer = dev;
 100f988:	e0bffe17 	ldw	r2,-8(fp)
 100f98c:	d0a6fa15 	stw	r2,-25624(gp)
		initialized = false;
 100f990:	d026f015 	stw	zero,-25664(gp)
		is_sd_card_formated_as_FAT16 = false;
 100f994:	d026f115 	stw	zero,-25660(gp)
		search_data.valid = false;
 100f998:	00804074 	movhi	r2,257
 100f99c:	10986004 	addi	r2,r2,24960
 100f9a0:	10000415 	stw	zero,16(r2)
	}
	return dev;
 100f9a4:	e0bffe17 	ldw	r2,-8(fp)
}
 100f9a8:	e037883a 	mov	sp,fp
 100f9ac:	dfc00117 	ldw	ra,4(sp)
 100f9b0:	df000017 	ldw	fp,0(sp)
 100f9b4:	dec00204 	addi	sp,sp,8
 100f9b8:	f800283a 	ret

0100f9bc <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 100f9bc:	defffd04 	addi	sp,sp,-12
 100f9c0:	df000215 	stw	fp,8(sp)
 100f9c4:	df000204 	addi	fp,sp,8
	bool result = false;
 100f9c8:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
 100f9cc:	d0a6fa17 	ldw	r2,-25624(gp)
 100f9d0:	1005003a 	cmpeq	r2,r2,zero
 100f9d4:	1000081e 	bne	r2,zero,100f9f8 <alt_up_sd_card_is_Present+0x3c>
 100f9d8:	d0a6f217 	ldw	r2,-25656(gp)
 100f9dc:	1080002b 	ldhuio	r2,0(r2)
 100f9e0:	1080008c 	andi	r2,r2,2
 100f9e4:	1005003a 	cmpeq	r2,r2,zero
 100f9e8:	1000031e 	bne	r2,zero,100f9f8 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
 100f9ec:	00800044 	movi	r2,1
 100f9f0:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
 100f9f4:	00001e06 	br	100fa70 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 100f9f8:	d0a6f017 	ldw	r2,-25664(gp)
 100f9fc:	10800058 	cmpnei	r2,r2,1
 100fa00:	10001b1e 	bne	r2,zero,100fa70 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 100fa04:	d026f015 	stw	zero,-25664(gp)
		search_data.valid = false;
 100fa08:	00804074 	movhi	r2,257
 100fa0c:	10986004 	addi	r2,r2,24960
 100fa10:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 100fa14:	d026f115 	stw	zero,-25660(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 100fa18:	e03ffe15 	stw	zero,-8(fp)
 100fa1c:	00001106 	br	100fa64 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 100fa20:	e0bffe17 	ldw	r2,-8(fp)
 100fa24:	00c04074 	movhi	r3,257
 100fa28:	18d87a04 	addi	r3,r3,25064
 100fa2c:	100491ba 	slli	r2,r2,6
 100fa30:	10c5883a 	add	r2,r2,r3
 100fa34:	10800f04 	addi	r2,r2,60
 100fa38:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 100fa3c:	e0bffe17 	ldw	r2,-8(fp)
 100fa40:	00c04074 	movhi	r3,257
 100fa44:	18d87a04 	addi	r3,r3,25064
 100fa48:	100491ba 	slli	r2,r2,6
 100fa4c:	10c5883a 	add	r2,r2,r3
 100fa50:	10800e04 	addi	r2,r2,56
 100fa54:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 100fa58:	e0bffe17 	ldw	r2,-8(fp)
 100fa5c:	10800044 	addi	r2,r2,1
 100fa60:	e0bffe15 	stw	r2,-8(fp)
 100fa64:	e0bffe17 	ldw	r2,-8(fp)
 100fa68:	10800510 	cmplti	r2,r2,20
 100fa6c:	103fec1e 	bne	r2,zero,100fa20 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 100fa70:	e0bfff17 	ldw	r2,-4(fp)
}
 100fa74:	e037883a 	mov	sp,fp
 100fa78:	df000017 	ldw	fp,0(sp)
 100fa7c:	dec00104 	addi	sp,sp,4
 100fa80:	f800283a 	ret

0100fa84 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 100fa84:	defffd04 	addi	sp,sp,-12
 100fa88:	dfc00215 	stw	ra,8(sp)
 100fa8c:	df000115 	stw	fp,4(sp)
 100fa90:	df000104 	addi	fp,sp,4
	bool result = false;
 100fa94:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 100fa98:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100fa9c:	1005003a 	cmpeq	r2,r2,zero
 100faa0:	10000d1e 	bne	r2,zero,100fad8 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 100faa4:	d0a6f017 	ldw	r2,-25664(gp)
 100faa8:	1004c03a 	cmpne	r2,r2,zero
 100faac:	1000071e 	bne	r2,zero,100facc <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 100fab0:	100dc6c0 	call	100dc6c <Look_for_FAT16>
 100fab4:	d0a6f115 	stw	r2,-25660(gp)
			initialized = is_sd_card_formated_as_FAT16;
 100fab8:	d0a6f117 	ldw	r2,-25660(gp)
 100fabc:	d0a6f015 	stw	r2,-25664(gp)
			search_data.valid = false;
 100fac0:	00804074 	movhi	r2,257
 100fac4:	10986004 	addi	r2,r2,24960
 100fac8:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 100facc:	d0a6f117 	ldw	r2,-25660(gp)
 100fad0:	e0bfff15 	stw	r2,-4(fp)
 100fad4:	00000206 	br	100fae0 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 100fad8:	d026f015 	stw	zero,-25664(gp)
		is_sd_card_formated_as_FAT16 = false;
 100fadc:	d026f115 	stw	zero,-25660(gp)
	}

	return result;
 100fae0:	e0bfff17 	ldw	r2,-4(fp)
}
 100fae4:	e037883a 	mov	sp,fp
 100fae8:	dfc00117 	ldw	ra,4(sp)
 100faec:	df000017 	ldw	fp,0(sp)
 100faf0:	dec00204 	addi	sp,sp,8
 100faf4:	f800283a 	ret

0100faf8 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 100faf8:	deffea04 	addi	sp,sp,-88
 100fafc:	dfc01515 	stw	ra,84(sp)
 100fb00:	df001415 	stw	fp,80(sp)
 100fb04:	df001404 	addi	fp,sp,80
 100fb08:	e13ffe15 	stw	r4,-8(fp)
 100fb0c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 100fb10:	00800084 	movi	r2,2
 100fb14:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100fb18:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100fb1c:	1005003a 	cmpeq	r2,r2,zero
 100fb20:	1000241e 	bne	r2,zero,100fbb4 <alt_up_sd_card_find_first+0xbc>
 100fb24:	d0a6f117 	ldw	r2,-25660(gp)
 100fb28:	1005003a 	cmpeq	r2,r2,zero
 100fb2c:	1000211e 	bne	r2,zero,100fbb4 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 100fb30:	e17fed04 	addi	r5,fp,-76
 100fb34:	e1bfee04 	addi	r6,fp,-72
 100fb38:	e13ffe17 	ldw	r4,-8(fp)
 100fb3c:	100e47c0 	call	100e47c <get_home_directory_cluster_for_file>
 100fb40:	1005003a 	cmpeq	r2,r2,zero
 100fb44:	1000191e 	bne	r2,zero,100fbac <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 100fb48:	e0bfed17 	ldw	r2,-76(fp)
 100fb4c:	1007883a 	mov	r3,r2
 100fb50:	00804074 	movhi	r2,257
 100fb54:	10986004 	addi	r2,r2,24960
 100fb58:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 100fb5c:	e0bfed17 	ldw	r2,-76(fp)
 100fb60:	1007883a 	mov	r3,r2
 100fb64:	00804074 	movhi	r2,257
 100fb68:	10986004 	addi	r2,r2,24960
 100fb6c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 100fb70:	00804074 	movhi	r2,257
 100fb74:	10986004 	addi	r2,r2,24960
 100fb78:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 100fb7c:	00c04074 	movhi	r3,257
 100fb80:	18d86004 	addi	r3,r3,24960
 100fb84:	00bfffc4 	movi	r2,-1
 100fb88:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 100fb8c:	00c04074 	movhi	r3,257
 100fb90:	18d86004 	addi	r3,r3,24960
 100fb94:	00800044 	movi	r2,1
 100fb98:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 100fb9c:	e13fff17 	ldw	r4,-4(fp)
 100fba0:	100fbcc0 	call	100fbcc <alt_up_sd_card_find_next>
 100fba4:	e0bfec0d 	sth	r2,-80(fp)
 100fba8:	00000206 	br	100fbb4 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 100fbac:	00800044 	movi	r2,1
 100fbb0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 100fbb4:	e0bfec0f 	ldh	r2,-80(fp)
}
 100fbb8:	e037883a 	mov	sp,fp
 100fbbc:	dfc00117 	ldw	ra,4(sp)
 100fbc0:	df000017 	ldw	fp,0(sp)
 100fbc4:	dec00204 	addi	sp,sp,8
 100fbc8:	f800283a 	ret

0100fbcc <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 100fbcc:	deffe404 	addi	sp,sp,-112
 100fbd0:	dfc01b15 	stw	ra,108(sp)
 100fbd4:	df001a15 	stw	fp,104(sp)
 100fbd8:	df001a04 	addi	fp,sp,104
 100fbdc:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 100fbe0:	00800084 	movi	r2,2
 100fbe4:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100fbe8:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100fbec:	1005003a 	cmpeq	r2,r2,zero
 100fbf0:	1000da1e 	bne	r2,zero,100ff5c <alt_up_sd_card_find_next+0x390>
 100fbf4:	d0a6f117 	ldw	r2,-25660(gp)
 100fbf8:	1005003a 	cmpeq	r2,r2,zero
 100fbfc:	1000d71e 	bne	r2,zero,100ff5c <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 100fc00:	00804074 	movhi	r2,257
 100fc04:	10986004 	addi	r2,r2,24960
 100fc08:	10800417 	ldw	r2,16(r2)
 100fc0c:	1005003a 	cmpeq	r2,r2,zero
 100fc10:	1000d01e 	bne	r2,zero,100ff54 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 100fc14:	00804074 	movhi	r2,257
 100fc18:	10986004 	addi	r2,r2,24960
 100fc1c:	10800117 	ldw	r2,4(r2)
 100fc20:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 100fc24:	e0bfec17 	ldw	r2,-80(fp)
 100fc28:	1004c03a 	cmpne	r2,r2,zero
 100fc2c:	1000511e 	bne	r2,zero,100fd74 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 100fc30:	00804074 	movhi	r2,257
 100fc34:	10986504 	addi	r2,r2,24980
 100fc38:	1080050b 	ldhu	r2,20(r2)
 100fc3c:	10bfffcc 	andi	r2,r2,65535
 100fc40:	1008917a 	slli	r4,r2,5
 100fc44:	00804074 	movhi	r2,257
 100fc48:	10986504 	addi	r2,r2,24980
 100fc4c:	1080030b 	ldhu	r2,12(r2)
 100fc50:	117fffcc 	andi	r5,r2,65535
 100fc54:	100a37c0 	call	100a37c <__divsi3>
 100fc58:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 100fc5c:	00804074 	movhi	r2,257
 100fc60:	10986004 	addi	r2,r2,24960
 100fc64:	10800217 	ldw	r2,8(r2)
 100fc68:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 100fc6c:	00804074 	movhi	r2,257
 100fc70:	10986004 	addi	r2,r2,24960
 100fc74:	1080030b 	ldhu	r2,12(r2)
 100fc78:	10bfffcc 	andi	r2,r2,65535
 100fc7c:	10a0001c 	xori	r2,r2,32768
 100fc80:	10a00004 	addi	r2,r2,-32768
 100fc84:	10800044 	addi	r2,r2,1
 100fc88:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 100fc8c:	00003306 	br	100fd5c <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
 100fc90:	00804074 	movhi	r2,257
 100fc94:	10986504 	addi	r2,r2,24980
 100fc98:	10c01317 	ldw	r3,76(r2)
 100fc9c:	e0bfea17 	ldw	r2,-88(fp)
 100fca0:	1885883a 	add	r2,r3,r2
 100fca4:	1009883a 	mov	r4,r2
 100fca8:	d166f817 	ldw	r5,-25632(gp)
 100fcac:	100cca00 	call	100cca0 <Read_Sector_Data>
 100fcb0:	1005003a 	cmpeq	r2,r2,zero
 100fcb4:	10002c1e 	bne	r2,zero,100fd68 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 100fcb8:	00002106 	br	100fd40 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 100fcbc:	e0bfe917 	ldw	r2,-92(fp)
 100fcc0:	1008917a 	slli	r4,r2,5
 100fcc4:	e1ffea17 	ldw	r7,-88(fp)
 100fcc8:	e17fee04 	addi	r5,fp,-72
 100fccc:	000d883a 	mov	r6,zero
 100fcd0:	100d0e80 	call	100d0e8 <Read_File_Record_At_Offset>
 100fcd4:	1005003a 	cmpeq	r2,r2,zero
 100fcd8:	1000161e 	bne	r2,zero,100fd34 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 100fcdc:	e0bfee03 	ldbu	r2,-72(fp)
 100fce0:	10803fcc 	andi	r2,r2,255
 100fce4:	1005003a 	cmpeq	r2,r2,zero
 100fce8:	1000121e 	bne	r2,zero,100fd34 <alt_up_sd_card_find_next+0x168>
 100fcec:	e0bfee03 	ldbu	r2,-72(fp)
 100fcf0:	10803fcc 	andi	r2,r2,255
 100fcf4:	10803960 	cmpeqi	r2,r2,229
 100fcf8:	10000e1e 	bne	r2,zero,100fd34 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
 100fcfc:	e0bfe917 	ldw	r2,-92(fp)
 100fd00:	1007883a 	mov	r3,r2
 100fd04:	00804074 	movhi	r2,257
 100fd08:	10986004 	addi	r2,r2,24960
 100fd0c:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
 100fd10:	e0ffea17 	ldw	r3,-88(fp)
 100fd14:	00804074 	movhi	r2,257
 100fd18:	10986004 	addi	r2,r2,24960
 100fd1c:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 100fd20:	e13fee04 	addi	r4,fp,-72
 100fd24:	e17ffe17 	ldw	r5,-8(fp)
 100fd28:	100f7a40 	call	100f7a4 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 100fd2c:	e03fff15 	stw	zero,-4(fp)
 100fd30:	00008c06 	br	100ff64 <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 100fd34:	e0bfe917 	ldw	r2,-92(fp)
 100fd38:	10800044 	addi	r2,r2,1
 100fd3c:	e0bfe915 	stw	r2,-92(fp)
 100fd40:	e0bfe917 	ldw	r2,-92(fp)
 100fd44:	10800410 	cmplti	r2,r2,16
 100fd48:	103fdc1e 	bne	r2,zero,100fcbc <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 100fd4c:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 100fd50:	e0bfea17 	ldw	r2,-88(fp)
 100fd54:	10800044 	addi	r2,r2,1
 100fd58:	e0bfea15 	stw	r2,-88(fp)
 100fd5c:	e0ffea17 	ldw	r3,-88(fp)
 100fd60:	e0bfeb17 	ldw	r2,-84(fp)
 100fd64:	18bfca16 	blt	r3,r2,100fc90 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 100fd68:	00bfffc4 	movi	r2,-1
 100fd6c:	e0bfed0d 	sth	r2,-76(fp)
 100fd70:	00007a06 	br	100ff5c <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 100fd74:	00804074 	movhi	r2,257
 100fd78:	10986004 	addi	r2,r2,24960
 100fd7c:	1080030b 	ldhu	r2,12(r2)
 100fd80:	10bfffcc 	andi	r2,r2,65535
 100fd84:	10a0001c 	xori	r2,r2,32768
 100fd88:	10a00004 	addi	r2,r2,-32768
 100fd8c:	10800044 	addi	r2,r2,1
 100fd90:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 100fd94:	e0bfec17 	ldw	r2,-80(fp)
 100fd98:	113fff84 	addi	r4,r2,-2
 100fd9c:	00804074 	movhi	r2,257
 100fda0:	10986504 	addi	r2,r2,24980
 100fda4:	10800383 	ldbu	r2,14(r2)
 100fda8:	11403fcc 	andi	r5,r2,255
 100fdac:	1000adc0 	call	1000adc <__mulsi3>
 100fdb0:	1007883a 	mov	r3,r2
 100fdb4:	00804074 	movhi	r2,257
 100fdb8:	10986504 	addi	r2,r2,24980
 100fdbc:	10801417 	ldw	r2,80(r2)
 100fdc0:	1885883a 	add	r2,r3,r2
 100fdc4:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 100fdc8:	00804074 	movhi	r2,257
 100fdcc:	10986004 	addi	r2,r2,24960
 100fdd0:	10800217 	ldw	r2,8(r2)
 100fdd4:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
 100fdd8:	00003406 	br	100feac <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
 100fddc:	e0ffe617 	ldw	r3,-104(fp)
 100fde0:	e0bfe717 	ldw	r2,-100(fp)
 100fde4:	1889883a 	add	r4,r3,r2
 100fde8:	d166f817 	ldw	r5,-25632(gp)
 100fdec:	100cca00 	call	100cca0 <Read_Sector_Data>
 100fdf0:	1005003a 	cmpeq	r2,r2,zero
 100fdf4:	1000331e 	bne	r2,zero,100fec4 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 100fdf8:	00002506 	br	100fe90 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
 100fdfc:	e0bfe817 	ldw	r2,-96(fp)
 100fe00:	1008917a 	slli	r4,r2,5
 100fe04:	e1bfec17 	ldw	r6,-80(fp)
 100fe08:	e1ffe617 	ldw	r7,-104(fp)
 100fe0c:	e17fee04 	addi	r5,fp,-72
 100fe10:	100d0e80 	call	100d0e8 <Read_File_Record_At_Offset>
 100fe14:	1005003a 	cmpeq	r2,r2,zero
 100fe18:	10001a1e 	bne	r2,zero,100fe84 <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
 100fe1c:	e0bfee03 	ldbu	r2,-72(fp)
 100fe20:	10803fcc 	andi	r2,r2,255
 100fe24:	1005003a 	cmpeq	r2,r2,zero
 100fe28:	1000161e 	bne	r2,zero,100fe84 <alt_up_sd_card_find_next+0x2b8>
 100fe2c:	e0bfee03 	ldbu	r2,-72(fp)
 100fe30:	10803fcc 	andi	r2,r2,255
 100fe34:	10803960 	cmpeqi	r2,r2,229
 100fe38:	1000121e 	bne	r2,zero,100fe84 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
 100fe3c:	e0ffec17 	ldw	r3,-80(fp)
 100fe40:	00804074 	movhi	r2,257
 100fe44:	10986004 	addi	r2,r2,24960
 100fe48:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
 100fe4c:	e0bfe817 	ldw	r2,-96(fp)
 100fe50:	1007883a 	mov	r3,r2
 100fe54:	00804074 	movhi	r2,257
 100fe58:	10986004 	addi	r2,r2,24960
 100fe5c:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
 100fe60:	e0ffe617 	ldw	r3,-104(fp)
 100fe64:	00804074 	movhi	r2,257
 100fe68:	10986004 	addi	r2,r2,24960
 100fe6c:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 100fe70:	e13fee04 	addi	r4,fp,-72
 100fe74:	e17ffe17 	ldw	r5,-8(fp)
 100fe78:	100f7a40 	call	100f7a4 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 100fe7c:	e03fff15 	stw	zero,-4(fp)
 100fe80:	00003806 	br	100ff64 <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 100fe84:	e0bfe817 	ldw	r2,-96(fp)
 100fe88:	10800044 	addi	r2,r2,1
 100fe8c:	e0bfe815 	stw	r2,-96(fp)
 100fe90:	e0bfe817 	ldw	r2,-96(fp)
 100fe94:	10800410 	cmplti	r2,r2,16
 100fe98:	103fd81e 	bne	r2,zero,100fdfc <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 100fe9c:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
 100fea0:	e0bfe617 	ldw	r2,-104(fp)
 100fea4:	10800044 	addi	r2,r2,1
 100fea8:	e0bfe615 	stw	r2,-104(fp)
 100feac:	00804074 	movhi	r2,257
 100feb0:	10986504 	addi	r2,r2,24980
 100feb4:	10800383 	ldbu	r2,14(r2)
 100feb8:	10c03fcc 	andi	r3,r2,255
 100febc:	e0bfe617 	ldw	r2,-104(fp)
 100fec0:	10ffc616 	blt	r2,r3,100fddc <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 100fec4:	00804074 	movhi	r2,257
 100fec8:	10986504 	addi	r2,r2,24980
 100fecc:	10800383 	ldbu	r2,14(r2)
 100fed0:	10c03fcc 	andi	r3,r2,255
 100fed4:	e0bfe617 	ldw	r2,-104(fp)
 100fed8:	10c01a16 	blt	r2,r3,100ff44 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 100fedc:	e13fec17 	ldw	r4,-80(fp)
 100fee0:	e17fed84 	addi	r5,fp,-74
 100fee4:	100cd9c0 	call	100cd9c <get_cluster_flag>
 100fee8:	1005003a 	cmpeq	r2,r2,zero
 100feec:	1000131e 	bne	r2,zero,100ff3c <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100fef0:	e0bfed8b 	ldhu	r2,-74(fp)
 100fef4:	10bfffcc 	andi	r2,r2,65535
 100fef8:	10a0001c 	xori	r2,r2,32768
 100fefc:	10a00004 	addi	r2,r2,-32768
 100ff00:	10fffe0c 	andi	r3,r2,65528
 100ff04:	00bffe14 	movui	r2,65528
 100ff08:	1880051e 	bne	r3,r2,100ff20 <alt_up_sd_card_find_next+0x354>
								result = -1;
 100ff0c:	00bfffc4 	movi	r2,-1
 100ff10:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 100ff14:	00804074 	movhi	r2,257
 100ff18:	10986004 	addi	r2,r2,24960
 100ff1c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 100ff20:	e0bfed8b 	ldhu	r2,-74(fp)
 100ff24:	10bfffcc 	andi	r2,r2,65535
 100ff28:	10a0001c 	xori	r2,r2,32768
 100ff2c:	10a00004 	addi	r2,r2,-32768
 100ff30:	10bffe0c 	andi	r2,r2,65528
 100ff34:	e0bfec15 	stw	r2,-80(fp)
 100ff38:	00000206 	br	100ff44 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 100ff3c:	00bfffc4 	movi	r2,-1
 100ff40:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 100ff44:	e0ffec17 	ldw	r3,-80(fp)
 100ff48:	00bffdd4 	movui	r2,65527
 100ff4c:	10ff910e 	bge	r2,r3,100fd94 <alt_up_sd_card_find_next+0x1c8>
 100ff50:	00000206 	br	100ff5c <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 100ff54:	008000c4 	movi	r2,3
 100ff58:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 100ff5c:	e0bfed0f 	ldh	r2,-76(fp)
 100ff60:	e0bfff15 	stw	r2,-4(fp)
 100ff64:	e0bfff17 	ldw	r2,-4(fp)
}
 100ff68:	e037883a 	mov	sp,fp
 100ff6c:	dfc00117 	ldw	ra,4(sp)
 100ff70:	df000017 	ldw	fp,0(sp)
 100ff74:	dec00204 	addi	sp,sp,8
 100ff78:	f800283a 	ret

0100ff7c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 100ff7c:	deffe804 	addi	sp,sp,-96
 100ff80:	dfc01715 	stw	ra,92(sp)
 100ff84:	df001615 	stw	fp,88(sp)
 100ff88:	df001604 	addi	fp,sp,88
 100ff8c:	e13ffd15 	stw	r4,-12(fp)
 100ff90:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 100ff94:	00bfffc4 	movi	r2,-1
 100ff98:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100ff9c:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 100ffa0:	1005003a 	cmpeq	r2,r2,zero
 100ffa4:	1000d71e 	bne	r2,zero,1010304 <alt_up_sd_card_fopen+0x388>
 100ffa8:	d0a6f117 	ldw	r2,-25660(gp)
 100ffac:	1005003a 	cmpeq	r2,r2,zero
 100ffb0:	1000d41e 	bne	r2,zero,1010304 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 100ffb4:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 100ffb8:	e13ffd17 	ldw	r4,-12(fp)
 100ffbc:	100dd700 	call	100dd70 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 100ffc0:	e13ffd17 	ldw	r4,-12(fp)
 100ffc4:	100de400 	call	100de40 <check_file_name_for_FAT16_compliance>
 100ffc8:	1005003a 	cmpeq	r2,r2,zero
 100ffcc:	1000cd1e 	bne	r2,zero,1010304 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 100ffd0:	e17fec04 	addi	r5,fp,-80
 100ffd4:	e1bfed04 	addi	r6,fp,-76
 100ffd8:	e13ffd17 	ldw	r4,-12(fp)
 100ffdc:	100e47c0 	call	100e47c <get_home_directory_cluster_for_file>
 100ffe0:	1004c03a 	cmpne	r2,r2,zero
 100ffe4:	1000031e 	bne	r2,zero,100fff4 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 100ffe8:	e0bfeb0f 	ldh	r2,-84(fp)
 100ffec:	e0bfff15 	stw	r2,-4(fp)
 100fff0:	0000c606 	br	101030c <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 100fff4:	e03fea15 	stw	zero,-88(fp)
 100fff8:	00000f06 	br	1010038 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 100fffc:	e0bfea17 	ldw	r2,-88(fp)
 1010000:	00c04074 	movhi	r3,257
 1010004:	18d87a04 	addi	r3,r3,25064
 1010008:	100491ba 	slli	r2,r2,6
 101000c:	10c5883a 	add	r2,r2,r3
 1010010:	10800f04 	addi	r2,r2,60
 1010014:	10800017 	ldw	r2,0(r2)
 1010018:	1004c03a 	cmpne	r2,r2,zero
 101001c:	1000031e 	bne	r2,zero,101002c <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 1010020:	e0bfea17 	ldw	r2,-88(fp)
 1010024:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 1010028:	00000606 	br	1010044 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 101002c:	e0bfea17 	ldw	r2,-88(fp)
 1010030:	10800044 	addi	r2,r2,1
 1010034:	e0bfea15 	stw	r2,-88(fp)
 1010038:	e0bfea17 	ldw	r2,-88(fp)
 101003c:	10800510 	cmplti	r2,r2,20
 1010040:	103fee1e 	bne	r2,zero,100fffc <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 1010044:	e0bfeb0f 	ldh	r2,-84(fp)
 1010048:	1004803a 	cmplt	r2,r2,zero
 101004c:	1000ad1e 	bne	r2,zero,1010304 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 1010050:	e0bfec17 	ldw	r2,-80(fp)
 1010054:	1009883a 	mov	r4,r2
 1010058:	e0bfeb0f 	ldh	r2,-84(fp)
 101005c:	100491ba 	slli	r2,r2,6
 1010060:	1007883a 	mov	r3,r2
 1010064:	00804074 	movhi	r2,257
 1010068:	10987a04 	addi	r2,r2,25064
 101006c:	188d883a 	add	r6,r3,r2
 1010070:	e17ffd17 	ldw	r5,-12(fp)
 1010074:	100e9900 	call	100e990 <find_file_in_directory>
 1010078:	1005003a 	cmpeq	r2,r2,zero
 101007c:	10007d1e 	bne	r2,zero,1010274 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 1010080:	e0bffe17 	ldw	r2,-8(fp)
 1010084:	1005003a 	cmpeq	r2,r2,zero
 1010088:	1000031e 	bne	r2,zero,1010098 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 101008c:	00bfffc4 	movi	r2,-1
 1010090:	e0bfff15 	stw	r2,-4(fp)
 1010094:	00009d06 	br	101030c <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
 1010098:	e17feb0f 	ldh	r5,-84(fp)
 101009c:	e0bfeb0f 	ldh	r2,-84(fp)
 10100a0:	00c04074 	movhi	r3,257
 10100a4:	18d87a04 	addi	r3,r3,25064
 10100a8:	100491ba 	slli	r2,r2,6
 10100ac:	10c5883a 	add	r2,r2,r3
 10100b0:	10800504 	addi	r2,r2,20
 10100b4:	1080008b 	ldhu	r2,2(r2)
 10100b8:	113fffcc 	andi	r4,r2,65535
 10100bc:	00c04074 	movhi	r3,257
 10100c0:	18d87a04 	addi	r3,r3,25064
 10100c4:	280491ba 	slli	r2,r5,6
 10100c8:	10c5883a 	add	r2,r2,r3
 10100cc:	10800704 	addi	r2,r2,28
 10100d0:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
 10100d4:	e0bfeb0f 	ldh	r2,-84(fp)
 10100d8:	00c04074 	movhi	r3,257
 10100dc:	18d87a04 	addi	r3,r3,25064
 10100e0:	100491ba 	slli	r2,r2,6
 10100e4:	10c5883a 	add	r2,r2,r3
 10100e8:	10800804 	addi	r2,r2,32
 10100ec:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
 10100f0:	e0bfeb0f 	ldh	r2,-84(fp)
 10100f4:	00c04074 	movhi	r3,257
 10100f8:	18d87a04 	addi	r3,r3,25064
 10100fc:	100491ba 	slli	r2,r2,6
 1010100:	10c5883a 	add	r2,r2,r3
 1010104:	10800904 	addi	r2,r2,36
 1010108:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 101010c:	e0bfeb0f 	ldh	r2,-84(fp)
 1010110:	00c04074 	movhi	r3,257
 1010114:	18d87a04 	addi	r3,r3,25064
 1010118:	100491ba 	slli	r2,r2,6
 101011c:	10c5883a 	add	r2,r2,r3
 1010120:	10c00f04 	addi	r3,r2,60
 1010124:	00800044 	movi	r2,1
 1010128:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 101012c:	e0bfeb0f 	ldh	r2,-84(fp)
 1010130:	00c04074 	movhi	r3,257
 1010134:	18d87a04 	addi	r3,r3,25064
 1010138:	100491ba 	slli	r2,r2,6
 101013c:	10c5883a 	add	r2,r2,r3
 1010140:	10800e04 	addi	r2,r2,56
 1010144:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1010148:	e03fea15 	stw	zero,-88(fp)
 101014c:	00004506 	br	1010264 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 1010150:	e0ffeb0f 	ldh	r3,-84(fp)
 1010154:	e0bfea17 	ldw	r2,-88(fp)
 1010158:	18803f26 	beq	r3,r2,1010258 <alt_up_sd_card_fopen+0x2dc>
 101015c:	e0bfea17 	ldw	r2,-88(fp)
 1010160:	00c04074 	movhi	r3,257
 1010164:	18d87a04 	addi	r3,r3,25064
 1010168:	100491ba 	slli	r2,r2,6
 101016c:	10c5883a 	add	r2,r2,r3
 1010170:	10800f04 	addi	r2,r2,60
 1010174:	10800017 	ldw	r2,0(r2)
 1010178:	10800058 	cmpnei	r2,r2,1
 101017c:	1000361e 	bne	r2,zero,1010258 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 1010180:	e0bfeb0f 	ldh	r2,-84(fp)
 1010184:	00c04074 	movhi	r3,257
 1010188:	18d87a04 	addi	r3,r3,25064
 101018c:	100491ba 	slli	r2,r2,6
 1010190:	10c5883a 	add	r2,r2,r3
 1010194:	10800a04 	addi	r2,r2,40
 1010198:	11000017 	ldw	r4,0(r2)
 101019c:	e0bfea17 	ldw	r2,-88(fp)
 10101a0:	00c04074 	movhi	r3,257
 10101a4:	18d87a04 	addi	r3,r3,25064
 10101a8:	100491ba 	slli	r2,r2,6
 10101ac:	10c5883a 	add	r2,r2,r3
 10101b0:	10800a04 	addi	r2,r2,40
 10101b4:	10800017 	ldw	r2,0(r2)
 10101b8:	2080271e 	bne	r4,r2,1010258 <alt_up_sd_card_fopen+0x2dc>
 10101bc:	e0bfeb0f 	ldh	r2,-84(fp)
 10101c0:	00c04074 	movhi	r3,257
 10101c4:	18d87a04 	addi	r3,r3,25064
 10101c8:	100491ba 	slli	r2,r2,6
 10101cc:	10c5883a 	add	r2,r2,r3
 10101d0:	10800b04 	addi	r2,r2,44
 10101d4:	11000017 	ldw	r4,0(r2)
 10101d8:	e0bfea17 	ldw	r2,-88(fp)
 10101dc:	00c04074 	movhi	r3,257
 10101e0:	18d87a04 	addi	r3,r3,25064
 10101e4:	100491ba 	slli	r2,r2,6
 10101e8:	10c5883a 	add	r2,r2,r3
 10101ec:	10800b04 	addi	r2,r2,44
 10101f0:	10800017 	ldw	r2,0(r2)
 10101f4:	2080181e 	bne	r4,r2,1010258 <alt_up_sd_card_fopen+0x2dc>
 10101f8:	e0bfeb0f 	ldh	r2,-84(fp)
 10101fc:	00c04074 	movhi	r3,257
 1010200:	18d87a04 	addi	r3,r3,25064
 1010204:	100491ba 	slli	r2,r2,6
 1010208:	10c5883a 	add	r2,r2,r3
 101020c:	10800c04 	addi	r2,r2,48
 1010210:	1100000b 	ldhu	r4,0(r2)
 1010214:	e0bfea17 	ldw	r2,-88(fp)
 1010218:	00c04074 	movhi	r3,257
 101021c:	18d87a04 	addi	r3,r3,25064
 1010220:	100491ba 	slli	r2,r2,6
 1010224:	10c5883a 	add	r2,r2,r3
 1010228:	10800c04 	addi	r2,r2,48
 101022c:	1080000b 	ldhu	r2,0(r2)
 1010230:	20ffffcc 	andi	r3,r4,65535
 1010234:	18e0001c 	xori	r3,r3,32768
 1010238:	18e00004 	addi	r3,r3,-32768
 101023c:	10bfffcc 	andi	r2,r2,65535
 1010240:	10a0001c 	xori	r2,r2,32768
 1010244:	10a00004 	addi	r2,r2,-32768
 1010248:	1880031e 	bne	r3,r2,1010258 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 101024c:	00bfff84 	movi	r2,-2
 1010250:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 1010254:	00002b06 	br	1010304 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1010258:	e0bfea17 	ldw	r2,-88(fp)
 101025c:	10800044 	addi	r2,r2,1
 1010260:	e0bfea15 	stw	r2,-88(fp)
 1010264:	e0bfea17 	ldw	r2,-88(fp)
 1010268:	10800510 	cmplti	r2,r2,20
 101026c:	103fb81e 	bne	r2,zero,1010150 <alt_up_sd_card_fopen+0x1d4>
 1010270:	00002406 	br	1010304 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 1010274:	e0bffe17 	ldw	r2,-8(fp)
 1010278:	1005003a 	cmpeq	r2,r2,zero
 101027c:	10001f1e 	bne	r2,zero,10102fc <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 1010280:	e0bfeb0f 	ldh	r2,-84(fp)
 1010284:	100491ba 	slli	r2,r2,6
 1010288:	1007883a 	mov	r3,r2
 101028c:	00804074 	movhi	r2,257
 1010290:	10987a04 	addi	r2,r2,25064
 1010294:	188b883a 	add	r5,r3,r2
 1010298:	e1bfed04 	addi	r6,fp,-76
 101029c:	e13ffd17 	ldw	r4,-12(fp)
 10102a0:	100f4c80 	call	100f4c8 <create_file>
 10102a4:	1005003a 	cmpeq	r2,r2,zero
 10102a8:	1000111e 	bne	r2,zero,10102f0 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 10102ac:	e0bfeb0f 	ldh	r2,-84(fp)
 10102b0:	00c04074 	movhi	r3,257
 10102b4:	18d87a04 	addi	r3,r3,25064
 10102b8:	100491ba 	slli	r2,r2,6
 10102bc:	10c5883a 	add	r2,r2,r3
 10102c0:	10c00f04 	addi	r3,r2,60
 10102c4:	00800044 	movi	r2,1
 10102c8:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 10102cc:	e0bfeb0f 	ldh	r2,-84(fp)
 10102d0:	00c04074 	movhi	r3,257
 10102d4:	18d87a04 	addi	r3,r3,25064
 10102d8:	100491ba 	slli	r2,r2,6
 10102dc:	10c5883a 	add	r2,r2,r3
 10102e0:	10c00e04 	addi	r3,r2,56
 10102e4:	00800044 	movi	r2,1
 10102e8:	18800015 	stw	r2,0(r3)
 10102ec:	00000506 	br	1010304 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 10102f0:	00bfffc4 	movi	r2,-1
 10102f4:	e0bfeb0d 	sth	r2,-84(fp)
 10102f8:	00000206 	br	1010304 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 10102fc:	00bfffc4 	movi	r2,-1
 1010300:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 1010304:	e0bfeb0f 	ldh	r2,-84(fp)
 1010308:	e0bfff15 	stw	r2,-4(fp)
 101030c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010310:	e037883a 	mov	sp,fp
 1010314:	dfc00117 	ldw	ra,4(sp)
 1010318:	df000017 	ldw	fp,0(sp)
 101031c:	dec00204 	addi	sp,sp,8
 1010320:	f800283a 	ret

01010324 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1010324:	defffd04 	addi	sp,sp,-12
 1010328:	df000215 	stw	fp,8(sp)
 101032c:	df000204 	addi	fp,sp,8
 1010330:	e13ffe0d 	sth	r4,-8(fp)
 1010334:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1010338:	e0bffe0f 	ldh	r2,-8(fp)
 101033c:	1004803a 	cmplt	r2,r2,zero
 1010340:	1000181e 	bne	r2,zero,10103a4 <alt_up_sd_card_set_attributes+0x80>
 1010344:	e0bffe0f 	ldh	r2,-8(fp)
 1010348:	10800508 	cmpgei	r2,r2,20
 101034c:	1000151e 	bne	r2,zero,10103a4 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 1010350:	e0bffe0f 	ldh	r2,-8(fp)
 1010354:	00c04074 	movhi	r3,257
 1010358:	18d87a04 	addi	r3,r3,25064
 101035c:	100491ba 	slli	r2,r2,6
 1010360:	10c5883a 	add	r2,r2,r3
 1010364:	10800f04 	addi	r2,r2,60
 1010368:	10800017 	ldw	r2,0(r2)
 101036c:	1005003a 	cmpeq	r2,r2,zero
 1010370:	10000c1e 	bne	r2,zero,10103a4 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
 1010374:	e17ffe0f 	ldh	r5,-8(fp)
 1010378:	e0bfff0b 	ldhu	r2,-4(fp)
 101037c:	1007883a 	mov	r3,r2
 1010380:	00bfffc4 	movi	r2,-1
 1010384:	1884703a 	and	r2,r3,r2
 1010388:	1009883a 	mov	r4,r2
 101038c:	00c04074 	movhi	r3,257
 1010390:	18d87a04 	addi	r3,r3,25064
 1010394:	280491ba 	slli	r2,r5,6
 1010398:	10c5883a 	add	r2,r2,r3
 101039c:	10800204 	addi	r2,r2,8
 10103a0:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
 10103a4:	e037883a 	mov	sp,fp
 10103a8:	df000017 	ldw	fp,0(sp)
 10103ac:	dec00104 	addi	sp,sp,4
 10103b0:	f800283a 	ret

010103b4 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 10103b4:	defffd04 	addi	sp,sp,-12
 10103b8:	df000215 	stw	fp,8(sp)
 10103bc:	df000204 	addi	fp,sp,8
 10103c0:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 10103c4:	00bfffc4 	movi	r2,-1
 10103c8:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10103cc:	e0bfff0f 	ldh	r2,-4(fp)
 10103d0:	1004803a 	cmplt	r2,r2,zero
 10103d4:	1000151e 	bne	r2,zero,101042c <alt_up_sd_card_get_attributes+0x78>
 10103d8:	e0bfff0f 	ldh	r2,-4(fp)
 10103dc:	10800508 	cmpgei	r2,r2,20
 10103e0:	1000121e 	bne	r2,zero,101042c <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 10103e4:	e0bfff0f 	ldh	r2,-4(fp)
 10103e8:	00c04074 	movhi	r3,257
 10103ec:	18d87a04 	addi	r3,r3,25064
 10103f0:	100491ba 	slli	r2,r2,6
 10103f4:	10c5883a 	add	r2,r2,r3
 10103f8:	10800f04 	addi	r2,r2,60
 10103fc:	10800017 	ldw	r2,0(r2)
 1010400:	1005003a 	cmpeq	r2,r2,zero
 1010404:	1000091e 	bne	r2,zero,101042c <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 1010408:	e0bfff0f 	ldh	r2,-4(fp)
 101040c:	00c04074 	movhi	r3,257
 1010410:	18d87a04 	addi	r3,r3,25064
 1010414:	100491ba 	slli	r2,r2,6
 1010418:	10c5883a 	add	r2,r2,r3
 101041c:	10800204 	addi	r2,r2,8
 1010420:	108000c3 	ldbu	r2,3(r2)
 1010424:	10803fcc 	andi	r2,r2,255
 1010428:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 101042c:	e0bffe0f 	ldh	r2,-8(fp)
}
 1010430:	e037883a 	mov	sp,fp
 1010434:	df000017 	ldw	fp,0(sp)
 1010438:	dec00104 	addi	sp,sp,4
 101043c:	f800283a 	ret

01010440 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 1010440:	defff904 	addi	sp,sp,-28
 1010444:	dfc00615 	stw	ra,24(sp)
 1010448:	df000515 	stw	fp,20(sp)
 101044c:	dc000415 	stw	r16,16(sp)
 1010450:	df000404 	addi	fp,sp,16
 1010454:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 1010458:	00bfffc4 	movi	r2,-1
 101045c:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1010460:	e0bffe0f 	ldh	r2,-8(fp)
 1010464:	1004803a 	cmplt	r2,r2,zero
 1010468:	1000d31e 	bne	r2,zero,10107b8 <alt_up_sd_card_read+0x378>
 101046c:	e0bffe0f 	ldh	r2,-8(fp)
 1010470:	10800508 	cmpgei	r2,r2,20
 1010474:	1000d01e 	bne	r2,zero,10107b8 <alt_up_sd_card_read+0x378>
		if (active_files[file_handle].in_use) {
 1010478:	e0bffe0f 	ldh	r2,-8(fp)
 101047c:	00c04074 	movhi	r3,257
 1010480:	18d87a04 	addi	r3,r3,25064
 1010484:	100491ba 	slli	r2,r2,6
 1010488:	10c5883a 	add	r2,r2,r3
 101048c:	10800f04 	addi	r2,r2,60
 1010490:	10800017 	ldw	r2,0(r2)
 1010494:	1005003a 	cmpeq	r2,r2,zero
 1010498:	1000c71e 	bne	r2,zero,10107b8 <alt_up_sd_card_read+0x378>
			if (active_files[file_handle].current_byte_position
 101049c:	e0bffe0f 	ldh	r2,-8(fp)
 10104a0:	00c04074 	movhi	r3,257
 10104a4:	18d87a04 	addi	r3,r3,25064
 10104a8:	100491ba 	slli	r2,r2,6
 10104ac:	10c5883a 	add	r2,r2,r3
 10104b0:	10800904 	addi	r2,r2,36
 10104b4:	11000017 	ldw	r4,0(r2)
 10104b8:	e0bffe0f 	ldh	r2,-8(fp)
 10104bc:	00c04074 	movhi	r3,257
 10104c0:	18d87a04 	addi	r3,r3,25064
 10104c4:	100491ba 	slli	r2,r2,6
 10104c8:	10c5883a 	add	r2,r2,r3
 10104cc:	10800604 	addi	r2,r2,24
 10104d0:	10800017 	ldw	r2,0(r2)
 10104d4:	2080b82e 	bgeu	r4,r2,10107b8 <alt_up_sd_card_read+0x378>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 10104d8:	00804074 	movhi	r2,257
 10104dc:	10986504 	addi	r2,r2,24980
 10104e0:	14001417 	ldw	r16,80(r2)
 10104e4:	e0bffe0f 	ldh	r2,-8(fp)
 10104e8:	00c04074 	movhi	r3,257
 10104ec:	18d87a04 	addi	r3,r3,25064
 10104f0:	100491ba 	slli	r2,r2,6
 10104f4:	10c5883a 	add	r2,r2,r3
 10104f8:	10800704 	addi	r2,r2,28
 10104fc:	10800017 	ldw	r2,0(r2)
 1010500:	113fff84 	addi	r4,r2,-2
 1010504:	00804074 	movhi	r2,257
 1010508:	10986504 	addi	r2,r2,24980
 101050c:	10800383 	ldbu	r2,14(r2)
 1010510:	11403fcc 	andi	r5,r2,255
 1010514:	1000adc0 	call	1000adc <__mulsi3>
 1010518:	8089883a 	add	r4,r16,r2
 101051c:	e0bffe0f 	ldh	r2,-8(fp)
 1010520:	00c04074 	movhi	r3,257
 1010524:	18d87a04 	addi	r3,r3,25064
 1010528:	100491ba 	slli	r2,r2,6
 101052c:	10c5883a 	add	r2,r2,r3
 1010530:	10800804 	addi	r2,r2,32
 1010534:	10800017 	ldw	r2,0(r2)
 1010538:	2085883a 	add	r2,r4,r2
 101053c:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 1010540:	e0bffe0f 	ldh	r2,-8(fp)
 1010544:	00c04074 	movhi	r3,257
 1010548:	18d87a04 	addi	r3,r3,25064
 101054c:	100491ba 	slli	r2,r2,6
 1010550:	10c5883a 	add	r2,r2,r3
 1010554:	10800904 	addi	r2,r2,36
 1010558:	10800017 	ldw	r2,0(r2)
 101055c:	1005003a 	cmpeq	r2,r2,zero
 1010560:	10006a1e 	bne	r2,zero,101070c <alt_up_sd_card_read+0x2cc>
 1010564:	e0bffe0f 	ldh	r2,-8(fp)
 1010568:	00c04074 	movhi	r3,257
 101056c:	18d87a04 	addi	r3,r3,25064
 1010570:	100491ba 	slli	r2,r2,6
 1010574:	10c5883a 	add	r2,r2,r3
 1010578:	10800904 	addi	r2,r2,36
 101057c:	10800017 	ldw	r2,0(r2)
 1010580:	10807fcc 	andi	r2,r2,511
 1010584:	1004c03a 	cmpne	r2,r2,zero
 1010588:	1000601e 	bne	r2,zero,101070c <alt_up_sd_card_read+0x2cc>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 101058c:	e0bffe0f 	ldh	r2,-8(fp)
 1010590:	00c04074 	movhi	r3,257
 1010594:	18d87a04 	addi	r3,r3,25064
 1010598:	100491ba 	slli	r2,r2,6
 101059c:	10c5883a 	add	r2,r2,r3
 10105a0:	10800804 	addi	r2,r2,32
 10105a4:	10c00017 	ldw	r3,0(r2)
 10105a8:	00804074 	movhi	r2,257
 10105ac:	10986504 	addi	r2,r2,24980
 10105b0:	10800383 	ldbu	r2,14(r2)
 10105b4:	10803fcc 	andi	r2,r2,255
 10105b8:	10bfffc4 	addi	r2,r2,-1
 10105bc:	1880411e 	bne	r3,r2,10106c4 <alt_up_sd_card_read+0x284>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 10105c0:	e0bffe0f 	ldh	r2,-8(fp)
 10105c4:	00c04074 	movhi	r3,257
 10105c8:	18d87a04 	addi	r3,r3,25064
 10105cc:	100491ba 	slli	r2,r2,6
 10105d0:	10c5883a 	add	r2,r2,r3
 10105d4:	10800704 	addi	r2,r2,28
 10105d8:	11000017 	ldw	r4,0(r2)
 10105dc:	e17ffd84 	addi	r5,fp,-10
 10105e0:	100cd9c0 	call	100cd9c <get_cluster_flag>
 10105e4:	1005003a 	cmpeq	r2,r2,zero
 10105e8:	1000331e 	bne	r2,zero,10106b8 <alt_up_sd_card_read+0x278>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 10105ec:	e0bffd8b 	ldhu	r2,-10(fp)
 10105f0:	10bfffcc 	andi	r2,r2,65535
 10105f4:	10fffe0c 	andi	r3,r2,65528
 10105f8:	00bffe14 	movui	r2,65528
 10105fc:	1880031e 	bne	r3,r2,101060c <alt_up_sd_card_read+0x1cc>
								/* End of file */
								return -1;
 1010600:	00bfffc4 	movi	r2,-1
 1010604:	e0bfff15 	stw	r2,-4(fp)
 1010608:	00006d06 	br	10107c0 <alt_up_sd_card_read+0x380>
							} else {
								active_files[file_handle].current_cluster_index
 101060c:	e13ffe0f 	ldh	r4,-8(fp)
 1010610:	e0bffd8b 	ldhu	r2,-10(fp)
 1010614:	117fffcc 	andi	r5,r2,65535
 1010618:	00c04074 	movhi	r3,257
 101061c:	18d87a04 	addi	r3,r3,25064
 1010620:	200491ba 	slli	r2,r4,6
 1010624:	10c5883a 	add	r2,r2,r3
 1010628:	10800704 	addi	r2,r2,28
 101062c:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
 1010630:	e0bffe0f 	ldh	r2,-8(fp)
 1010634:	00c04074 	movhi	r3,257
 1010638:	18d87a04 	addi	r3,r3,25064
 101063c:	100491ba 	slli	r2,r2,6
 1010640:	10c5883a 	add	r2,r2,r3
 1010644:	10800804 	addi	r2,r2,32
 1010648:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
 101064c:	00804074 	movhi	r2,257
 1010650:	10986504 	addi	r2,r2,24980
 1010654:	14001417 	ldw	r16,80(r2)
 1010658:	e0bffe0f 	ldh	r2,-8(fp)
 101065c:	00c04074 	movhi	r3,257
 1010660:	18d87a04 	addi	r3,r3,25064
 1010664:	100491ba 	slli	r2,r2,6
 1010668:	10c5883a 	add	r2,r2,r3
 101066c:	10800704 	addi	r2,r2,28
 1010670:	10800017 	ldw	r2,0(r2)
 1010674:	113fff84 	addi	r4,r2,-2
 1010678:	00804074 	movhi	r2,257
 101067c:	10986504 	addi	r2,r2,24980
 1010680:	10800383 	ldbu	r2,14(r2)
 1010684:	11403fcc 	andi	r5,r2,255
 1010688:	1000adc0 	call	1000adc <__mulsi3>
 101068c:	8089883a 	add	r4,r16,r2
 1010690:	e0bffe0f 	ldh	r2,-8(fp)
 1010694:	00c04074 	movhi	r3,257
 1010698:	18d87a04 	addi	r3,r3,25064
 101069c:	100491ba 	slli	r2,r2,6
 10106a0:	10c5883a 	add	r2,r2,r3
 10106a4:	10800804 	addi	r2,r2,32
 10106a8:	10800017 	ldw	r2,0(r2)
 10106ac:	2085883a 	add	r2,r4,r2
 10106b0:	e0bffc15 	stw	r2,-16(fp)
 10106b4:	00001506 	br	101070c <alt_up_sd_card_read+0x2cc>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 10106b8:	00bfff84 	movi	r2,-2
 10106bc:	e0bfff15 	stw	r2,-4(fp)
 10106c0:	00003f06 	br	10107c0 <alt_up_sd_card_read+0x380>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 10106c4:	e17ffe0f 	ldh	r5,-8(fp)
 10106c8:	e0bffe0f 	ldh	r2,-8(fp)
 10106cc:	00c04074 	movhi	r3,257
 10106d0:	18d87a04 	addi	r3,r3,25064
 10106d4:	100491ba 	slli	r2,r2,6
 10106d8:	10c5883a 	add	r2,r2,r3
 10106dc:	10800804 	addi	r2,r2,32
 10106e0:	10800017 	ldw	r2,0(r2)
 10106e4:	11000044 	addi	r4,r2,1
 10106e8:	00c04074 	movhi	r3,257
 10106ec:	18d87a04 	addi	r3,r3,25064
 10106f0:	280491ba 	slli	r2,r5,6
 10106f4:	10c5883a 	add	r2,r2,r3
 10106f8:	10800804 	addi	r2,r2,32
 10106fc:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 1010700:	e0bffc17 	ldw	r2,-16(fp)
 1010704:	10800044 	addi	r2,r2,1
 1010708:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
 101070c:	d0e6f817 	ldw	r3,-25632(gp)
 1010710:	e0bffc17 	ldw	r2,-16(fp)
 1010714:	1885883a 	add	r2,r3,r2
 1010718:	1007883a 	mov	r3,r2
 101071c:	d0a6fc17 	ldw	r2,-25616(gp)
 1010720:	18800826 	beq	r3,r2,1010744 <alt_up_sd_card_read+0x304>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 1010724:	d166f817 	ldw	r5,-25632(gp)
 1010728:	e13ffc17 	ldw	r4,-16(fp)
 101072c:	100cca00 	call	100cca0 <Read_Sector_Data>
 1010730:	1004c03a 	cmpne	r2,r2,zero
 1010734:	1000031e 	bne	r2,zero,1010744 <alt_up_sd_card_read+0x304>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 1010738:	00bfff84 	movi	r2,-2
 101073c:	e0bfff15 	stw	r2,-4(fp)
 1010740:	00001f06 	br	10107c0 <alt_up_sd_card_read+0x380>
					}
				}

				ch
 1010744:	e0bffe0f 	ldh	r2,-8(fp)
 1010748:	00c04074 	movhi	r3,257
 101074c:	18d87a04 	addi	r3,r3,25064
 1010750:	100491ba 	slli	r2,r2,6
 1010754:	10c5883a 	add	r2,r2,r3
 1010758:	10800904 	addi	r2,r2,36
 101075c:	10800017 	ldw	r2,0(r2)
 1010760:	10807fcc 	andi	r2,r2,511
 1010764:	1007883a 	mov	r3,r2
 1010768:	d0a6f717 	ldw	r2,-25636(gp)
 101076c:	1885883a 	add	r2,r3,r2
 1010770:	10800023 	ldbuio	r2,0(r2)
 1010774:	10803fcc 	andi	r2,r2,255
 1010778:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
 101077c:	e17ffe0f 	ldh	r5,-8(fp)
 1010780:	e0bffe0f 	ldh	r2,-8(fp)
 1010784:	00c04074 	movhi	r3,257
 1010788:	18d87a04 	addi	r3,r3,25064
 101078c:	100491ba 	slli	r2,r2,6
 1010790:	10c5883a 	add	r2,r2,r3
 1010794:	10800904 	addi	r2,r2,36
 1010798:	10800017 	ldw	r2,0(r2)
 101079c:	11000044 	addi	r4,r2,1
 10107a0:	00c04074 	movhi	r3,257
 10107a4:	18d87a04 	addi	r3,r3,25064
 10107a8:	280491ba 	slli	r2,r5,6
 10107ac:	10c5883a 	add	r2,r2,r3
 10107b0:	10800904 	addi	r2,r2,36
 10107b4:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 10107b8:	e0bffd0f 	ldh	r2,-12(fp)
 10107bc:	e0bfff15 	stw	r2,-4(fp)
 10107c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10107c4:	e037883a 	mov	sp,fp
 10107c8:	dfc00217 	ldw	ra,8(sp)
 10107cc:	df000117 	ldw	fp,4(sp)
 10107d0:	dc000017 	ldw	r16,0(sp)
 10107d4:	dec00304 	addi	sp,sp,12
 10107d8:	f800283a 	ret

010107dc <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 10107dc:	defff504 	addi	sp,sp,-44
 10107e0:	dfc00a15 	stw	ra,40(sp)
 10107e4:	df000915 	stw	fp,36(sp)
 10107e8:	dc000815 	stw	r16,32(sp)
 10107ec:	df000804 	addi	fp,sp,32
 10107f0:	e13ffd0d 	sth	r4,-12(fp)
 10107f4:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 10107f8:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10107fc:	e0bffd0f 	ldh	r2,-12(fp)
 1010800:	1004803a 	cmplt	r2,r2,zero
 1010804:	1001751e 	bne	r2,zero,1010ddc <alt_up_sd_card_write+0x600>
 1010808:	e0bffd0f 	ldh	r2,-12(fp)
 101080c:	10800508 	cmpgei	r2,r2,20
 1010810:	1001721e 	bne	r2,zero,1010ddc <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
 1010814:	e0bffd0f 	ldh	r2,-12(fp)
 1010818:	00c04074 	movhi	r3,257
 101081c:	18d87a04 	addi	r3,r3,25064
 1010820:	100491ba 	slli	r2,r2,6
 1010824:	10c5883a 	add	r2,r2,r3
 1010828:	10800f04 	addi	r2,r2,60
 101082c:	10800017 	ldw	r2,0(r2)
 1010830:	1005003a 	cmpeq	r2,r2,zero
 1010834:	1001691e 	bne	r2,zero,1010ddc <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 1010838:	00804074 	movhi	r2,257
 101083c:	10986504 	addi	r2,r2,24980
 1010840:	14001417 	ldw	r16,80(r2)
 1010844:	e0bffd0f 	ldh	r2,-12(fp)
 1010848:	00c04074 	movhi	r3,257
 101084c:	18d87a04 	addi	r3,r3,25064
 1010850:	100491ba 	slli	r2,r2,6
 1010854:	10c5883a 	add	r2,r2,r3
 1010858:	10800704 	addi	r2,r2,28
 101085c:	10800017 	ldw	r2,0(r2)
 1010860:	113fff84 	addi	r4,r2,-2
 1010864:	00804074 	movhi	r2,257
 1010868:	10986504 	addi	r2,r2,24980
 101086c:	10800383 	ldbu	r2,14(r2)
 1010870:	11403fcc 	andi	r5,r2,255
 1010874:	1000adc0 	call	1000adc <__mulsi3>
 1010878:	8089883a 	add	r4,r16,r2
 101087c:	e0bffd0f 	ldh	r2,-12(fp)
 1010880:	00c04074 	movhi	r3,257
 1010884:	18d87a04 	addi	r3,r3,25064
 1010888:	100491ba 	slli	r2,r2,6
 101088c:	10c5883a 	add	r2,r2,r3
 1010890:	10800804 	addi	r2,r2,32
 1010894:	10800017 	ldw	r2,0(r2)
 1010898:	2085883a 	add	r2,r4,r2
 101089c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 10108a0:	e0bffd0f 	ldh	r2,-12(fp)
 10108a4:	00c04074 	movhi	r3,257
 10108a8:	18d87a04 	addi	r3,r3,25064
 10108ac:	100491ba 	slli	r2,r2,6
 10108b0:	10c5883a 	add	r2,r2,r3
 10108b4:	10800904 	addi	r2,r2,36
 10108b8:	11000017 	ldw	r4,0(r2)
 10108bc:	00804074 	movhi	r2,257
 10108c0:	10986504 	addi	r2,r2,24980
 10108c4:	1080030b 	ldhu	r2,12(r2)
 10108c8:	117fffcc 	andi	r5,r2,65535
 10108cc:	100a4440 	call	100a444 <__umodsi3>
 10108d0:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 10108d4:	e0bffd0f 	ldh	r2,-12(fp)
 10108d8:	00c04074 	movhi	r3,257
 10108dc:	18d87a04 	addi	r3,r3,25064
 10108e0:	100491ba 	slli	r2,r2,6
 10108e4:	10c5883a 	add	r2,r2,r3
 10108e8:	10800904 	addi	r2,r2,36
 10108ec:	11000017 	ldw	r4,0(r2)
 10108f0:	e0bffd0f 	ldh	r2,-12(fp)
 10108f4:	00c04074 	movhi	r3,257
 10108f8:	18d87a04 	addi	r3,r3,25064
 10108fc:	100491ba 	slli	r2,r2,6
 1010900:	10c5883a 	add	r2,r2,r3
 1010904:	10800604 	addi	r2,r2,24
 1010908:	10800017 	ldw	r2,0(r2)
 101090c:	2080682e 	bgeu	r4,r2,1010ab0 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 1010910:	e0bffd0f 	ldh	r2,-12(fp)
 1010914:	00c04074 	movhi	r3,257
 1010918:	18d87a04 	addi	r3,r3,25064
 101091c:	100491ba 	slli	r2,r2,6
 1010920:	10c5883a 	add	r2,r2,r3
 1010924:	10800904 	addi	r2,r2,36
 1010928:	10800017 	ldw	r2,0(r2)
 101092c:	1005003a 	cmpeq	r2,r2,zero
 1010930:	1000de1e 	bne	r2,zero,1010cac <alt_up_sd_card_write+0x4d0>
 1010934:	e0bff80f 	ldh	r2,-32(fp)
 1010938:	1004c03a 	cmpne	r2,r2,zero
 101093c:	1000db1e 	bne	r2,zero,1010cac <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 1010940:	e0bffd0f 	ldh	r2,-12(fp)
 1010944:	00c04074 	movhi	r3,257
 1010948:	18d87a04 	addi	r3,r3,25064
 101094c:	100491ba 	slli	r2,r2,6
 1010950:	10c5883a 	add	r2,r2,r3
 1010954:	10800804 	addi	r2,r2,32
 1010958:	10c00017 	ldw	r3,0(r2)
 101095c:	00804074 	movhi	r2,257
 1010960:	10986504 	addi	r2,r2,24980
 1010964:	10800383 	ldbu	r2,14(r2)
 1010968:	10803fcc 	andi	r2,r2,255
 101096c:	10bfffc4 	addi	r2,r2,-1
 1010970:	18803c1e 	bne	r3,r2,1010a64 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1010974:	e0bffd0f 	ldh	r2,-12(fp)
 1010978:	00c04074 	movhi	r3,257
 101097c:	18d87a04 	addi	r3,r3,25064
 1010980:	100491ba 	slli	r2,r2,6
 1010984:	10c5883a 	add	r2,r2,r3
 1010988:	10800704 	addi	r2,r2,28
 101098c:	11000017 	ldw	r4,0(r2)
 1010990:	e17ffb04 	addi	r5,fp,-20
 1010994:	100cd9c0 	call	100cd9c <get_cluster_flag>
 1010998:	1005003a 	cmpeq	r2,r2,zero
 101099c:	10002f1e 	bne	r2,zero,1010a5c <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 10109a0:	e0bffb0b 	ldhu	r2,-20(fp)
 10109a4:	10ffffcc 	andi	r3,r2,65535
 10109a8:	00bffdd4 	movui	r2,65527
 10109ac:	10c0bf36 	bltu	r2,r3,1010cac <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
 10109b0:	e13ffd0f 	ldh	r4,-12(fp)
 10109b4:	e0bffb0b 	ldhu	r2,-20(fp)
 10109b8:	117fffcc 	andi	r5,r2,65535
 10109bc:	00c04074 	movhi	r3,257
 10109c0:	18d87a04 	addi	r3,r3,25064
 10109c4:	200491ba 	slli	r2,r4,6
 10109c8:	10c5883a 	add	r2,r2,r3
 10109cc:	10800704 	addi	r2,r2,28
 10109d0:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
 10109d4:	e0bffd0f 	ldh	r2,-12(fp)
 10109d8:	00c04074 	movhi	r3,257
 10109dc:	18d87a04 	addi	r3,r3,25064
 10109e0:	100491ba 	slli	r2,r2,6
 10109e4:	10c5883a 	add	r2,r2,r3
 10109e8:	10800804 	addi	r2,r2,32
 10109ec:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
 10109f0:	00804074 	movhi	r2,257
 10109f4:	10986504 	addi	r2,r2,24980
 10109f8:	14001417 	ldw	r16,80(r2)
 10109fc:	e0bffd0f 	ldh	r2,-12(fp)
 1010a00:	00c04074 	movhi	r3,257
 1010a04:	18d87a04 	addi	r3,r3,25064
 1010a08:	100491ba 	slli	r2,r2,6
 1010a0c:	10c5883a 	add	r2,r2,r3
 1010a10:	10800704 	addi	r2,r2,28
 1010a14:	10800017 	ldw	r2,0(r2)
 1010a18:	113fff84 	addi	r4,r2,-2
 1010a1c:	00804074 	movhi	r2,257
 1010a20:	10986504 	addi	r2,r2,24980
 1010a24:	10800383 	ldbu	r2,14(r2)
 1010a28:	11403fcc 	andi	r5,r2,255
 1010a2c:	1000adc0 	call	1000adc <__mulsi3>
 1010a30:	8089883a 	add	r4,r16,r2
 1010a34:	e0bffd0f 	ldh	r2,-12(fp)
 1010a38:	00c04074 	movhi	r3,257
 1010a3c:	18d87a04 	addi	r3,r3,25064
 1010a40:	100491ba 	slli	r2,r2,6
 1010a44:	10c5883a 	add	r2,r2,r3
 1010a48:	10800804 	addi	r2,r2,32
 1010a4c:	10800017 	ldw	r2,0(r2)
 1010a50:	2085883a 	add	r2,r4,r2
 1010a54:	e0bff915 	stw	r2,-28(fp)
 1010a58:	00009406 	br	1010cac <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 1010a5c:	e03fff15 	stw	zero,-4(fp)
 1010a60:	0000e006 	br	1010de4 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 1010a64:	e17ffd0f 	ldh	r5,-12(fp)
 1010a68:	e0bffd0f 	ldh	r2,-12(fp)
 1010a6c:	00c04074 	movhi	r3,257
 1010a70:	18d87a04 	addi	r3,r3,25064
 1010a74:	100491ba 	slli	r2,r2,6
 1010a78:	10c5883a 	add	r2,r2,r3
 1010a7c:	10800804 	addi	r2,r2,32
 1010a80:	10800017 	ldw	r2,0(r2)
 1010a84:	11000044 	addi	r4,r2,1
 1010a88:	00c04074 	movhi	r3,257
 1010a8c:	18d87a04 	addi	r3,r3,25064
 1010a90:	280491ba 	slli	r2,r5,6
 1010a94:	10c5883a 	add	r2,r2,r3
 1010a98:	10800804 	addi	r2,r2,32
 1010a9c:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 1010aa0:	e0bff917 	ldw	r2,-28(fp)
 1010aa4:	10800044 	addi	r2,r2,1
 1010aa8:	e0bff915 	stw	r2,-28(fp)
 1010aac:	00007f06 	br	1010cac <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 1010ab0:	e0bffd0f 	ldh	r2,-12(fp)
 1010ab4:	00c04074 	movhi	r3,257
 1010ab8:	18d87a04 	addi	r3,r3,25064
 1010abc:	100491ba 	slli	r2,r2,6
 1010ac0:	10c5883a 	add	r2,r2,r3
 1010ac4:	10800904 	addi	r2,r2,36
 1010ac8:	10800017 	ldw	r2,0(r2)
 1010acc:	1005003a 	cmpeq	r2,r2,zero
 1010ad0:	1000761e 	bne	r2,zero,1010cac <alt_up_sd_card_write+0x4d0>
 1010ad4:	e0bff80f 	ldh	r2,-32(fp)
 1010ad8:	1004c03a 	cmpne	r2,r2,zero
 1010adc:	1000731e 	bne	r2,zero,1010cac <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 1010ae0:	e0bffd0f 	ldh	r2,-12(fp)
 1010ae4:	00c04074 	movhi	r3,257
 1010ae8:	18d87a04 	addi	r3,r3,25064
 1010aec:	100491ba 	slli	r2,r2,6
 1010af0:	10c5883a 	add	r2,r2,r3
 1010af4:	10800804 	addi	r2,r2,32
 1010af8:	10c00017 	ldw	r3,0(r2)
 1010afc:	00804074 	movhi	r2,257
 1010b00:	10986504 	addi	r2,r2,24980
 1010b04:	10800383 	ldbu	r2,14(r2)
 1010b08:	10803fcc 	andi	r2,r2,255
 1010b0c:	10bfffc4 	addi	r2,r2,-1
 1010b10:	1880381e 	bne	r3,r2,1010bf4 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 1010b14:	e13ffc04 	addi	r4,fp,-16
 1010b18:	100edf40 	call	100edf4 <find_first_empty_cluster>
 1010b1c:	1005003a 	cmpeq	r2,r2,zero
 1010b20:	1000321e 	bne	r2,zero,1010bec <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 1010b24:	e0bffd0f 	ldh	r2,-12(fp)
 1010b28:	00c04074 	movhi	r3,257
 1010b2c:	18d87a04 	addi	r3,r3,25064
 1010b30:	100491ba 	slli	r2,r2,6
 1010b34:	10c5883a 	add	r2,r2,r3
 1010b38:	10800704 	addi	r2,r2,28
 1010b3c:	11000017 	ldw	r4,0(r2)
 1010b40:	e0bffc17 	ldw	r2,-16(fp)
 1010b44:	117fffcc 	andi	r5,r2,65535
 1010b48:	2960001c 	xori	r5,r5,32768
 1010b4c:	29600004 	addi	r5,r5,-32768
 1010b50:	01800044 	movi	r6,1
 1010b54:	100ce540 	call	100ce54 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 1010b58:	e13ffc17 	ldw	r4,-16(fp)
 1010b5c:	017fffc4 	movi	r5,-1
 1010b60:	01800044 	movi	r6,1
 1010b64:	100ce540 	call	100ce54 <mark_cluster>
							mark_cluster(
 1010b68:	e0bffd0f 	ldh	r2,-12(fp)
 1010b6c:	00c04074 	movhi	r3,257
 1010b70:	18d87a04 	addi	r3,r3,25064
 1010b74:	100491ba 	slli	r2,r2,6
 1010b78:	10c5883a 	add	r2,r2,r3
 1010b7c:	10800704 	addi	r2,r2,28
 1010b80:	11000017 	ldw	r4,0(r2)
 1010b84:	e0bffc17 	ldw	r2,-16(fp)
 1010b88:	117fffcc 	andi	r5,r2,65535
 1010b8c:	2960001c 	xori	r5,r5,32768
 1010b90:	29600004 	addi	r5,r5,-32768
 1010b94:	000d883a 	mov	r6,zero
 1010b98:	100ce540 	call	100ce54 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 1010b9c:	e13ffc17 	ldw	r4,-16(fp)
 1010ba0:	017fffc4 	movi	r5,-1
 1010ba4:	000d883a 	mov	r6,zero
 1010ba8:	100ce540 	call	100ce54 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
 1010bac:	e0bffd0f 	ldh	r2,-12(fp)
 1010bb0:	e13ffc17 	ldw	r4,-16(fp)
 1010bb4:	00c04074 	movhi	r3,257
 1010bb8:	18d87a04 	addi	r3,r3,25064
 1010bbc:	100491ba 	slli	r2,r2,6
 1010bc0:	10c5883a 	add	r2,r2,r3
 1010bc4:	10800704 	addi	r2,r2,28
 1010bc8:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
 1010bcc:	e0bffd0f 	ldh	r2,-12(fp)
 1010bd0:	00c04074 	movhi	r3,257
 1010bd4:	18d87a04 	addi	r3,r3,25064
 1010bd8:	100491ba 	slli	r2,r2,6
 1010bdc:	10c5883a 	add	r2,r2,r3
 1010be0:	10800804 	addi	r2,r2,32
 1010be4:	10000015 	stw	zero,0(r2)
 1010be8:	00001606 	br	1010c44 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
 1010bec:	e03fff15 	stw	zero,-4(fp)
 1010bf0:	00007c06 	br	1010de4 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
 1010bf4:	e43ffd0f 	ldh	r16,-12(fp)
 1010bf8:	e0bffd0f 	ldh	r2,-12(fp)
 1010bfc:	00c04074 	movhi	r3,257
 1010c00:	18d87a04 	addi	r3,r3,25064
 1010c04:	100491ba 	slli	r2,r2,6
 1010c08:	10c5883a 	add	r2,r2,r3
 1010c0c:	10800904 	addi	r2,r2,36
 1010c10:	11000017 	ldw	r4,0(r2)
 1010c14:	00804074 	movhi	r2,257
 1010c18:	10986504 	addi	r2,r2,24980
 1010c1c:	1080030b 	ldhu	r2,12(r2)
 1010c20:	117fffcc 	andi	r5,r2,65535
 1010c24:	100a43c0 	call	100a43c <__udivsi3>
 1010c28:	1009883a 	mov	r4,r2
 1010c2c:	00c04074 	movhi	r3,257
 1010c30:	18d87a04 	addi	r3,r3,25064
 1010c34:	800491ba 	slli	r2,r16,6
 1010c38:	10c5883a 	add	r2,r2,r3
 1010c3c:	10800804 	addi	r2,r2,32
 1010c40:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
 1010c44:	00804074 	movhi	r2,257
 1010c48:	10986504 	addi	r2,r2,24980
 1010c4c:	14001417 	ldw	r16,80(r2)
 1010c50:	e0bffd0f 	ldh	r2,-12(fp)
 1010c54:	00c04074 	movhi	r3,257
 1010c58:	18d87a04 	addi	r3,r3,25064
 1010c5c:	100491ba 	slli	r2,r2,6
 1010c60:	10c5883a 	add	r2,r2,r3
 1010c64:	10800704 	addi	r2,r2,28
 1010c68:	10800017 	ldw	r2,0(r2)
 1010c6c:	113fff84 	addi	r4,r2,-2
 1010c70:	00804074 	movhi	r2,257
 1010c74:	10986504 	addi	r2,r2,24980
 1010c78:	10800383 	ldbu	r2,14(r2)
 1010c7c:	11403fcc 	andi	r5,r2,255
 1010c80:	1000adc0 	call	1000adc <__mulsi3>
 1010c84:	8089883a 	add	r4,r16,r2
 1010c88:	e0bffd0f 	ldh	r2,-12(fp)
 1010c8c:	00c04074 	movhi	r3,257
 1010c90:	18d87a04 	addi	r3,r3,25064
 1010c94:	100491ba 	slli	r2,r2,6
 1010c98:	10c5883a 	add	r2,r2,r3
 1010c9c:	10800804 	addi	r2,r2,32
 1010ca0:	10800017 	ldw	r2,0(r2)
 1010ca4:	2085883a 	add	r2,r4,r2
 1010ca8:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
 1010cac:	d0e6f817 	ldw	r3,-25632(gp)
 1010cb0:	e0bff917 	ldw	r2,-28(fp)
 1010cb4:	1885883a 	add	r2,r3,r2
 1010cb8:	1007883a 	mov	r3,r2
 1010cbc:	d0a6fc17 	ldw	r2,-25616(gp)
 1010cc0:	18800726 	beq	r3,r2,1010ce0 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
 1010cc4:	d166f817 	ldw	r5,-25632(gp)
 1010cc8:	e13ff917 	ldw	r4,-28(fp)
 1010ccc:	100cca00 	call	100cca0 <Read_Sector_Data>
 1010cd0:	1004c03a 	cmpne	r2,r2,zero
 1010cd4:	1000021e 	bne	r2,zero,1010ce0 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 1010cd8:	e03fff15 	stw	zero,-4(fp)
 1010cdc:	00004106 	br	1010de4 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 1010ce0:	e0bff80f 	ldh	r2,-32(fp)
 1010ce4:	1007883a 	mov	r3,r2
 1010ce8:	d0a6f717 	ldw	r2,-25636(gp)
 1010cec:	1885883a 	add	r2,r3,r2
 1010cf0:	e0fffe07 	ldb	r3,-8(fp)
 1010cf4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
 1010cf8:	e17ffd0f 	ldh	r5,-12(fp)
 1010cfc:	e0bffd0f 	ldh	r2,-12(fp)
 1010d00:	00c04074 	movhi	r3,257
 1010d04:	18d87a04 	addi	r3,r3,25064
 1010d08:	100491ba 	slli	r2,r2,6
 1010d0c:	10c5883a 	add	r2,r2,r3
 1010d10:	10800904 	addi	r2,r2,36
 1010d14:	10800017 	ldw	r2,0(r2)
 1010d18:	11000044 	addi	r4,r2,1
 1010d1c:	00c04074 	movhi	r3,257
 1010d20:	18d87a04 	addi	r3,r3,25064
 1010d24:	280491ba 	slli	r2,r5,6
 1010d28:	10c5883a 	add	r2,r2,r3
 1010d2c:	10800904 	addi	r2,r2,36
 1010d30:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 1010d34:	e0bffd0f 	ldh	r2,-12(fp)
 1010d38:	00c04074 	movhi	r3,257
 1010d3c:	18d87a04 	addi	r3,r3,25064
 1010d40:	100491ba 	slli	r2,r2,6
 1010d44:	10c5883a 	add	r2,r2,r3
 1010d48:	10800904 	addi	r2,r2,36
 1010d4c:	11000017 	ldw	r4,0(r2)
 1010d50:	e0bffd0f 	ldh	r2,-12(fp)
 1010d54:	00c04074 	movhi	r3,257
 1010d58:	18d87a04 	addi	r3,r3,25064
 1010d5c:	100491ba 	slli	r2,r2,6
 1010d60:	10c5883a 	add	r2,r2,r3
 1010d64:	10800604 	addi	r2,r2,24
 1010d68:	10800017 	ldw	r2,0(r2)
 1010d6c:	20801736 	bltu	r4,r2,1010dcc <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
 1010d70:	e17ffd0f 	ldh	r5,-12(fp)
 1010d74:	e0bffd0f 	ldh	r2,-12(fp)
 1010d78:	00c04074 	movhi	r3,257
 1010d7c:	18d87a04 	addi	r3,r3,25064
 1010d80:	100491ba 	slli	r2,r2,6
 1010d84:	10c5883a 	add	r2,r2,r3
 1010d88:	10800604 	addi	r2,r2,24
 1010d8c:	10800017 	ldw	r2,0(r2)
 1010d90:	11000044 	addi	r4,r2,1
 1010d94:	00c04074 	movhi	r3,257
 1010d98:	18d87a04 	addi	r3,r3,25064
 1010d9c:	280491ba 	slli	r2,r5,6
 1010da0:	10c5883a 	add	r2,r2,r3
 1010da4:	10800604 	addi	r2,r2,24
 1010da8:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 1010dac:	e0bffd0f 	ldh	r2,-12(fp)
 1010db0:	00c04074 	movhi	r3,257
 1010db4:	18d87a04 	addi	r3,r3,25064
 1010db8:	100491ba 	slli	r2,r2,6
 1010dbc:	10c5883a 	add	r2,r2,r3
 1010dc0:	10c00e04 	addi	r3,r2,56
 1010dc4:	00800044 	movi	r2,1
 1010dc8:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 1010dcc:	00800044 	movi	r2,1
 1010dd0:	d0a6fb15 	stw	r2,-25620(gp)
			result = true;
 1010dd4:	00800044 	movi	r2,1
 1010dd8:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 1010ddc:	e0bffa17 	ldw	r2,-24(fp)
 1010de0:	e0bfff15 	stw	r2,-4(fp)
 1010de4:	e0bfff17 	ldw	r2,-4(fp)
}
 1010de8:	e037883a 	mov	sp,fp
 1010dec:	dfc00217 	ldw	ra,8(sp)
 1010df0:	df000117 	ldw	fp,4(sp)
 1010df4:	dc000017 	ldw	r16,0(sp)
 1010df8:	dec00304 	addi	sp,sp,12
 1010dfc:	f800283a 	ret

01010e00 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 1010e00:	defffa04 	addi	sp,sp,-24
 1010e04:	dfc00515 	stw	ra,20(sp)
 1010e08:	df000415 	stw	fp,16(sp)
 1010e0c:	dc000315 	stw	r16,12(sp)
 1010e10:	df000304 	addi	fp,sp,12
 1010e14:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
 1010e18:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1010e1c:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 1010e20:	1005003a 	cmpeq	r2,r2,zero
 1010e24:	1000641e 	bne	r2,zero,1010fb8 <alt_up_sd_card_fclose+0x1b8>
 1010e28:	d0a6f117 	ldw	r2,-25660(gp)
 1010e2c:	1005003a 	cmpeq	r2,r2,zero
 1010e30:	1000611e 	bne	r2,zero,1010fb8 <alt_up_sd_card_fclose+0x1b8>
		if (active_files[file_handle].in_use) {
 1010e34:	e0bfff0f 	ldh	r2,-4(fp)
 1010e38:	00c04074 	movhi	r3,257
 1010e3c:	18d87a04 	addi	r3,r3,25064
 1010e40:	100491ba 	slli	r2,r2,6
 1010e44:	10c5883a 	add	r2,r2,r3
 1010e48:	10800f04 	addi	r2,r2,60
 1010e4c:	10800017 	ldw	r2,0(r2)
 1010e50:	1005003a 	cmpeq	r2,r2,zero
 1010e54:	1000581e 	bne	r2,zero,1010fb8 <alt_up_sd_card_fclose+0x1b8>
			if (active_files[file_handle].modified) {
 1010e58:	e0bfff0f 	ldh	r2,-4(fp)
 1010e5c:	00c04074 	movhi	r3,257
 1010e60:	18d87a04 	addi	r3,r3,25064
 1010e64:	100491ba 	slli	r2,r2,6
 1010e68:	10c5883a 	add	r2,r2,r3
 1010e6c:	10800e04 	addi	r2,r2,56
 1010e70:	10800017 	ldw	r2,0(r2)
 1010e74:	1005003a 	cmpeq	r2,r2,zero
 1010e78:	1000461e 	bne	r2,zero,1010f94 <alt_up_sd_card_fclose+0x194>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 1010e7c:	e0bfff0f 	ldh	r2,-4(fp)
 1010e80:	00c04074 	movhi	r3,257
 1010e84:	18d87a04 	addi	r3,r3,25064
 1010e88:	100491ba 	slli	r2,r2,6
 1010e8c:	10c5883a 	add	r2,r2,r3
 1010e90:	10800b04 	addi	r2,r2,44
 1010e94:	10800017 	ldw	r2,0(r2)
 1010e98:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 1010e9c:	e0bfff0f 	ldh	r2,-4(fp)
 1010ea0:	00c04074 	movhi	r3,257
 1010ea4:	18d87a04 	addi	r3,r3,25064
 1010ea8:	100491ba 	slli	r2,r2,6
 1010eac:	10c5883a 	add	r2,r2,r3
 1010eb0:	10800a04 	addi	r2,r2,40
 1010eb4:	10800017 	ldw	r2,0(r2)
 1010eb8:	1004c03a 	cmpne	r2,r2,zero
 1010ebc:	1000071e 	bne	r2,zero,1010edc <alt_up_sd_card_fclose+0xdc>
					record_sector = record_sector
 1010ec0:	00804074 	movhi	r2,257
 1010ec4:	10986504 	addi	r2,r2,24980
 1010ec8:	10c01317 	ldw	r3,76(r2)
 1010ecc:	e0bffd17 	ldw	r2,-12(fp)
 1010ed0:	10c5883a 	add	r2,r2,r3
 1010ed4:	e0bffd15 	stw	r2,-12(fp)
 1010ed8:	00001406 	br	1010f2c <alt_up_sd_card_fclose+0x12c>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
 1010edc:	00804074 	movhi	r2,257
 1010ee0:	10986504 	addi	r2,r2,24980
 1010ee4:	10c01417 	ldw	r3,80(r2)
 1010ee8:	e0bffd17 	ldw	r2,-12(fp)
 1010eec:	18a1883a 	add	r16,r3,r2
 1010ef0:	e0bfff0f 	ldh	r2,-4(fp)
 1010ef4:	00c04074 	movhi	r3,257
 1010ef8:	18d87a04 	addi	r3,r3,25064
 1010efc:	100491ba 	slli	r2,r2,6
 1010f00:	10c5883a 	add	r2,r2,r3
 1010f04:	10800a04 	addi	r2,r2,40
 1010f08:	10800017 	ldw	r2,0(r2)
 1010f0c:	113fff84 	addi	r4,r2,-2
 1010f10:	00804074 	movhi	r2,257
 1010f14:	10986504 	addi	r2,r2,24980
 1010f18:	10800383 	ldbu	r2,14(r2)
 1010f1c:	11403fcc 	andi	r5,r2,255
 1010f20:	1000adc0 	call	1000adc <__mulsi3>
 1010f24:	8085883a 	add	r2,r16,r2
 1010f28:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 1010f2c:	e13ffd17 	ldw	r4,-12(fp)
 1010f30:	d166f817 	ldw	r5,-25632(gp)
 1010f34:	100cca00 	call	100cca0 <Read_Sector_Data>
 1010f38:	1005003a 	cmpeq	r2,r2,zero
 1010f3c:	1000151e 	bne	r2,zero,1010f94 <alt_up_sd_card_fclose+0x194>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 1010f40:	e0bfff0f 	ldh	r2,-4(fp)
 1010f44:	00c04074 	movhi	r3,257
 1010f48:	18d87a04 	addi	r3,r3,25064
 1010f4c:	100491ba 	slli	r2,r2,6
 1010f50:	10c5883a 	add	r2,r2,r3
 1010f54:	10800c04 	addi	r2,r2,48
 1010f58:	1080000b 	ldhu	r2,0(r2)
 1010f5c:	113fffcc 	andi	r4,r2,65535
 1010f60:	2120001c 	xori	r4,r4,32768
 1010f64:	21200004 	addi	r4,r4,-32768
 1010f68:	e0bfff0f 	ldh	r2,-4(fp)
 1010f6c:	100491ba 	slli	r2,r2,6
 1010f70:	1007883a 	mov	r3,r2
 1010f74:	00804074 	movhi	r2,257
 1010f78:	10987a04 	addi	r2,r2,25064
 1010f7c:	188b883a 	add	r5,r3,r2
 1010f80:	100d36c0 	call	100d36c <Write_File_Record_At_Offset>
 1010f84:	1005003a 	cmpeq	r2,r2,zero
 1010f88:	1000021e 	bne	r2,zero,1010f94 <alt_up_sd_card_fclose+0x194>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 1010f8c:	100cc500 	call	100cc50 <Save_Modified_Sector>
 1010f90:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 1010f94:	e0bfff0f 	ldh	r2,-4(fp)
 1010f98:	00c04074 	movhi	r3,257
 1010f9c:	18d87a04 	addi	r3,r3,25064
 1010fa0:	100491ba 	slli	r2,r2,6
 1010fa4:	10c5883a 	add	r2,r2,r3
 1010fa8:	10800f04 	addi	r2,r2,60
 1010fac:	10000015 	stw	zero,0(r2)
			result = true;
 1010fb0:	00800044 	movi	r2,1
 1010fb4:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 1010fb8:	e0bffe17 	ldw	r2,-8(fp)
}
 1010fbc:	e037883a 	mov	sp,fp
 1010fc0:	dfc00217 	ldw	ra,8(sp)
 1010fc4:	df000117 	ldw	fp,4(sp)
 1010fc8:	dc000017 	ldw	r16,0(sp)
 1010fcc:	dec00304 	addi	sp,sp,12
 1010fd0:	f800283a 	ret

01010fd4 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1010fd4:	defff904 	addi	sp,sp,-28
 1010fd8:	dfc00615 	stw	ra,24(sp)
 1010fdc:	df000515 	stw	fp,20(sp)
 1010fe0:	df000504 	addi	fp,sp,20
 1010fe4:	e13ffd15 	stw	r4,-12(fp)
 1010fe8:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1010fec:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 1010ff0:	100f9bc0 	call	100f9bc <alt_up_sd_card_is_Present>
 1010ff4:	1005003a 	cmpeq	r2,r2,zero
 1010ff8:	10002d1e 	bne	r2,zero,10110b0 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 1010ffc:	00803fc4 	movi	r2,255
 1011000:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1011004:	d0a6fb17 	ldw	r2,-25620(gp)
 1011008:	1005003a 	cmpeq	r2,r2,zero
 101100c:	1000081e 	bne	r2,zero,1011030 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1011010:	d0a6fc17 	ldw	r2,-25616(gp)
 1011014:	1009883a 	mov	r4,r2
 1011018:	000b883a 	mov	r5,zero
 101101c:	100cb880 	call	100cb88 <Write_Sector_Data>
 1011020:	1004c03a 	cmpne	r2,r2,zero
 1011024:	1000021e 	bne	r2,zero,1011030 <Read_Sector_Data_CRC+0x5c>
				return false;
 1011028:	e03fff15 	stw	zero,-4(fp)
 101102c:	00002206 	br	10110b8 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 1011030:	d0a6f617 	ldw	r2,-25640(gp)
 1011034:	1009883a 	mov	r4,r2
 1011038:	e0fffd17 	ldw	r3,-12(fp)
 101103c:	e0bffe17 	ldw	r2,-8(fp)
 1011040:	1885883a 	add	r2,r3,r2
 1011044:	1006927a 	slli	r3,r2,9
 1011048:	2005883a 	mov	r2,r4
 101104c:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1011050:	d0a6f517 	ldw	r2,-25644(gp)
 1011054:	1007883a 	mov	r3,r2
 1011058:	00800444 	movi	r2,17
 101105c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1011060:	d0a6f217 	ldw	r2,-25656(gp)
 1011064:	1080002b 	ldhuio	r2,0(r2)
 1011068:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 101106c:	e0bffb0b 	ldhu	r2,-20(fp)
 1011070:	10bfffcc 	andi	r2,r2,65535
 1011074:	1080010c 	andi	r2,r2,4
 1011078:	1004c03a 	cmpne	r2,r2,zero
 101107c:	103ff81e 	bne	r2,zero,1011060 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 1011080:	e0bffb0b 	ldhu	r2,-20(fp)
 1011084:	10bfffcc 	andi	r2,r2,65535
 1011088:	10800c0c 	andi	r2,r2,48
 101108c:	1004c03a 	cmpne	r2,r2,zero
 1011090:	1000071e 	bne	r2,zero,10110b0 <Read_Sector_Data_CRC+0xdc>
			result = true;
 1011094:	00800044 	movi	r2,1
 1011098:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 101109c:	d026fb15 	stw	zero,-25620(gp)
			current_sector_index = sector_index + partition_offset;
 10110a0:	e0fffd17 	ldw	r3,-12(fp)
 10110a4:	e0bffe17 	ldw	r2,-8(fp)
 10110a8:	1885883a 	add	r2,r3,r2
 10110ac:	d0a6fc15 	stw	r2,-25616(gp)
		}
	}
	return result;
 10110b0:	e0bffc17 	ldw	r2,-16(fp)
 10110b4:	e0bfff15 	stw	r2,-4(fp)
 10110b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10110bc:	e037883a 	mov	sp,fp
 10110c0:	dfc00117 	ldw	ra,4(sp)
 10110c4:	df000017 	ldw	fp,0(sp)
 10110c8:	dec00204 	addi	sp,sp,8
 10110cc:	f800283a 	ret

010110d0 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 10110d0:	defff804 	addi	sp,sp,-32
 10110d4:	dfc00715 	stw	ra,28(sp)
 10110d8:	df000615 	stw	fp,24(sp)
 10110dc:	df000604 	addi	fp,sp,24
 10110e0:	e13ffd15 	stw	r4,-12(fp)
 10110e4:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 10110e8:	00801904 	movi	r2,100
 10110ec:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 10110f0:	e03ffc15 	stw	zero,-16(fp)
 10110f4:	00000d06 	br	101112c <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 10110f8:	e13ffd17 	ldw	r4,-12(fp)
 10110fc:	e17ffe17 	ldw	r5,-8(fp)
 1011100:	1010fd40 	call	1010fd4 <Read_Sector_Data_CRC>
 1011104:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 1011108:	e0bffb17 	ldw	r2,-20(fp)
 101110c:	1005003a 	cmpeq	r2,r2,zero
 1011110:	1000031e 	bne	r2,zero,1011120 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 1011114:	00800044 	movi	r2,1
 1011118:	e0bfff15 	stw	r2,-4(fp)
 101111c:	00000a06 	br	1011148 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 1011120:	e0bffc17 	ldw	r2,-16(fp)
 1011124:	10800044 	addi	r2,r2,1
 1011128:	e0bffc15 	stw	r2,-16(fp)
 101112c:	e0fffc17 	ldw	r3,-16(fp)
 1011130:	e0bffa17 	ldw	r2,-24(fp)
 1011134:	18bff016 	blt	r3,r2,10110f8 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 1011138:	e13ffd17 	ldw	r4,-12(fp)
 101113c:	e17ffe17 	ldw	r5,-8(fp)
 1011140:	100cca00 	call	100cca0 <Read_Sector_Data>
 1011144:	e0bfff15 	stw	r2,-4(fp)
 1011148:	e0bfff17 	ldw	r2,-4(fp)
}
 101114c:	e037883a 	mov	sp,fp
 1011150:	dfc00117 	ldw	ra,4(sp)
 1011154:	df000017 	ldw	fp,0(sp)
 1011158:	dec00204 	addi	sp,sp,8
 101115c:	f800283a 	ret

01011160 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1011160:	defff404 	addi	sp,sp,-48
 1011164:	df000b15 	stw	fp,44(sp)
 1011168:	df000b04 	addi	fp,sp,44
 101116c:	e13ffb15 	stw	r4,-20(fp)
 1011170:	e17ffc15 	stw	r5,-16(fp)
 1011174:	e1bffd15 	stw	r6,-12(fp)
 1011178:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 101117c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1011180:	00804074 	movhi	r2,257
 1011184:	10985404 	addi	r2,r2,24912
 1011188:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 101118c:	1005003a 	cmpeq	r2,r2,zero
 1011190:	1000411e 	bne	r2,zero,1011298 <alt_alarm_start+0x138>
  {
    if (alarm)
 1011194:	e0bffb17 	ldw	r2,-20(fp)
 1011198:	1005003a 	cmpeq	r2,r2,zero
 101119c:	10003b1e 	bne	r2,zero,101128c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10111a0:	e0fffb17 	ldw	r3,-20(fp)
 10111a4:	e0bffd17 	ldw	r2,-12(fp)
 10111a8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10111ac:	e0fffb17 	ldw	r3,-20(fp)
 10111b0:	e0bffe17 	ldw	r2,-8(fp)
 10111b4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10111b8:	0005303a 	rdctl	r2,status
 10111bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10111c0:	e0fff817 	ldw	r3,-32(fp)
 10111c4:	00bfff84 	movi	r2,-2
 10111c8:	1884703a 	and	r2,r3,r2
 10111cc:	1001703a 	wrctl	status,r2
  
  return context;
 10111d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10111d4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10111d8:	00804074 	movhi	r2,257
 10111dc:	10985504 	addi	r2,r2,24916
 10111e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10111e4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10111e8:	e0fffc17 	ldw	r3,-16(fp)
 10111ec:	e0bff917 	ldw	r2,-28(fp)
 10111f0:	1885883a 	add	r2,r3,r2
 10111f4:	10c00044 	addi	r3,r2,1
 10111f8:	e0bffb17 	ldw	r2,-20(fp)
 10111fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1011200:	e0bffb17 	ldw	r2,-20(fp)
 1011204:	10c00217 	ldw	r3,8(r2)
 1011208:	e0bff917 	ldw	r2,-28(fp)
 101120c:	1880042e 	bgeu	r3,r2,1011220 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1011210:	e0fffb17 	ldw	r3,-20(fp)
 1011214:	00800044 	movi	r2,1
 1011218:	18800405 	stb	r2,16(r3)
 101121c:	00000206 	br	1011228 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1011220:	e0bffb17 	ldw	r2,-20(fp)
 1011224:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1011228:	e0fffb17 	ldw	r3,-20(fp)
 101122c:	00804074 	movhi	r2,257
 1011230:	10916404 	addi	r2,r2,17808
 1011234:	e0bff615 	stw	r2,-40(fp)
 1011238:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101123c:	e0fff717 	ldw	r3,-36(fp)
 1011240:	e0bff617 	ldw	r2,-40(fp)
 1011244:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1011248:	e0bff617 	ldw	r2,-40(fp)
 101124c:	10c00017 	ldw	r3,0(r2)
 1011250:	e0bff717 	ldw	r2,-36(fp)
 1011254:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1011258:	e0bff617 	ldw	r2,-40(fp)
 101125c:	10c00017 	ldw	r3,0(r2)
 1011260:	e0bff717 	ldw	r2,-36(fp)
 1011264:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1011268:	e0fff617 	ldw	r3,-40(fp)
 101126c:	e0bff717 	ldw	r2,-36(fp)
 1011270:	18800015 	stw	r2,0(r3)
 1011274:	e0bffa17 	ldw	r2,-24(fp)
 1011278:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101127c:	e0bff517 	ldw	r2,-44(fp)
 1011280:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1011284:	e03fff15 	stw	zero,-4(fp)
 1011288:	00000506 	br	10112a0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 101128c:	00bffa84 	movi	r2,-22
 1011290:	e0bfff15 	stw	r2,-4(fp)
 1011294:	00000206 	br	10112a0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1011298:	00bfde84 	movi	r2,-134
 101129c:	e0bfff15 	stw	r2,-4(fp)
 10112a0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10112a4:	e037883a 	mov	sp,fp
 10112a8:	df000017 	ldw	fp,0(sp)
 10112ac:	dec00104 	addi	sp,sp,4
 10112b0:	f800283a 	ret

010112b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10112b4:	deffff04 	addi	sp,sp,-4
 10112b8:	df000015 	stw	fp,0(sp)
 10112bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10112c0:	e037883a 	mov	sp,fp
 10112c4:	df000017 	ldw	fp,0(sp)
 10112c8:	dec00104 	addi	sp,sp,4
 10112cc:	f800283a 	ret

010112d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10112d0:	defff904 	addi	sp,sp,-28
 10112d4:	dfc00615 	stw	ra,24(sp)
 10112d8:	df000515 	stw	fp,20(sp)
 10112dc:	df000504 	addi	fp,sp,20
 10112e0:	e13ffd15 	stw	r4,-12(fp)
 10112e4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10112e8:	e0bffd17 	ldw	r2,-12(fp)
 10112ec:	1005003a 	cmpeq	r2,r2,zero
 10112f0:	1000041e 	bne	r2,zero,1011304 <alt_dev_llist_insert+0x34>
 10112f4:	e0bffd17 	ldw	r2,-12(fp)
 10112f8:	10800217 	ldw	r2,8(r2)
 10112fc:	1004c03a 	cmpne	r2,r2,zero
 1011300:	1000071e 	bne	r2,zero,1011320 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1011304:	10113840 	call	1011384 <alt_get_errno>
 1011308:	1007883a 	mov	r3,r2
 101130c:	00800584 	movi	r2,22
 1011310:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1011314:	00bffa84 	movi	r2,-22
 1011318:	e0bfff15 	stw	r2,-4(fp)
 101131c:	00001306 	br	101136c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1011320:	e0fffd17 	ldw	r3,-12(fp)
 1011324:	e0bffe17 	ldw	r2,-8(fp)
 1011328:	e0bffb15 	stw	r2,-20(fp)
 101132c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1011330:	e0fffc17 	ldw	r3,-16(fp)
 1011334:	e0bffb17 	ldw	r2,-20(fp)
 1011338:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101133c:	e0bffb17 	ldw	r2,-20(fp)
 1011340:	10c00017 	ldw	r3,0(r2)
 1011344:	e0bffc17 	ldw	r2,-16(fp)
 1011348:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101134c:	e0bffb17 	ldw	r2,-20(fp)
 1011350:	10c00017 	ldw	r3,0(r2)
 1011354:	e0bffc17 	ldw	r2,-16(fp)
 1011358:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101135c:	e0fffb17 	ldw	r3,-20(fp)
 1011360:	e0bffc17 	ldw	r2,-16(fp)
 1011364:	18800015 	stw	r2,0(r3)

  return 0;  
 1011368:	e03fff15 	stw	zero,-4(fp)
 101136c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011370:	e037883a 	mov	sp,fp
 1011374:	dfc00117 	ldw	ra,4(sp)
 1011378:	df000017 	ldw	fp,0(sp)
 101137c:	dec00204 	addi	sp,sp,8
 1011380:	f800283a 	ret

01011384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011384:	defffd04 	addi	sp,sp,-12
 1011388:	dfc00215 	stw	ra,8(sp)
 101138c:	df000115 	stw	fp,4(sp)
 1011390:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011394:	00804074 	movhi	r2,257
 1011398:	10916104 	addi	r2,r2,17796
 101139c:	10800017 	ldw	r2,0(r2)
 10113a0:	1005003a 	cmpeq	r2,r2,zero
 10113a4:	1000061e 	bne	r2,zero,10113c0 <alt_get_errno+0x3c>
 10113a8:	00804074 	movhi	r2,257
 10113ac:	10916104 	addi	r2,r2,17796
 10113b0:	10800017 	ldw	r2,0(r2)
 10113b4:	103ee83a 	callr	r2
 10113b8:	e0bfff15 	stw	r2,-4(fp)
 10113bc:	00000306 	br	10113cc <alt_get_errno+0x48>
 10113c0:	00804074 	movhi	r2,257
 10113c4:	10984004 	addi	r2,r2,24832
 10113c8:	e0bfff15 	stw	r2,-4(fp)
 10113cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10113d0:	e037883a 	mov	sp,fp
 10113d4:	dfc00117 	ldw	ra,4(sp)
 10113d8:	df000017 	ldw	fp,0(sp)
 10113dc:	dec00204 	addi	sp,sp,8
 10113e0:	f800283a 	ret

010113e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10113e4:	defffd04 	addi	sp,sp,-12
 10113e8:	dfc00215 	stw	ra,8(sp)
 10113ec:	df000115 	stw	fp,4(sp)
 10113f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10113f4:	00bfff04 	movi	r2,-4
 10113f8:	00c04074 	movhi	r3,257
 10113fc:	18c94b04 	addi	r3,r3,9516
 1011400:	1885883a 	add	r2,r3,r2
 1011404:	e0bfff15 	stw	r2,-4(fp)
 1011408:	00000606 	br	1011424 <_do_ctors+0x40>
        (*ctor) (); 
 101140c:	e0bfff17 	ldw	r2,-4(fp)
 1011410:	10800017 	ldw	r2,0(r2)
 1011414:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1011418:	e0bfff17 	ldw	r2,-4(fp)
 101141c:	10bfff04 	addi	r2,r2,-4
 1011420:	e0bfff15 	stw	r2,-4(fp)
 1011424:	e0ffff17 	ldw	r3,-4(fp)
 1011428:	00804074 	movhi	r2,257
 101142c:	10894a04 	addi	r2,r2,9512
 1011430:	18bff62e 	bgeu	r3,r2,101140c <_do_ctors+0x28>
        (*ctor) (); 
}
 1011434:	e037883a 	mov	sp,fp
 1011438:	dfc00117 	ldw	ra,4(sp)
 101143c:	df000017 	ldw	fp,0(sp)
 1011440:	dec00204 	addi	sp,sp,8
 1011444:	f800283a 	ret

01011448 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1011448:	defffd04 	addi	sp,sp,-12
 101144c:	dfc00215 	stw	ra,8(sp)
 1011450:	df000115 	stw	fp,4(sp)
 1011454:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1011458:	00bfff04 	movi	r2,-4
 101145c:	00c04074 	movhi	r3,257
 1011460:	18c94b04 	addi	r3,r3,9516
 1011464:	1885883a 	add	r2,r3,r2
 1011468:	e0bfff15 	stw	r2,-4(fp)
 101146c:	00000606 	br	1011488 <_do_dtors+0x40>
        (*dtor) (); 
 1011470:	e0bfff17 	ldw	r2,-4(fp)
 1011474:	10800017 	ldw	r2,0(r2)
 1011478:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101147c:	e0bfff17 	ldw	r2,-4(fp)
 1011480:	10bfff04 	addi	r2,r2,-4
 1011484:	e0bfff15 	stw	r2,-4(fp)
 1011488:	e0ffff17 	ldw	r3,-4(fp)
 101148c:	00804074 	movhi	r2,257
 1011490:	10894b04 	addi	r2,r2,9516
 1011494:	18bff62e 	bgeu	r3,r2,1011470 <_do_dtors+0x28>
        (*dtor) (); 
}
 1011498:	e037883a 	mov	sp,fp
 101149c:	dfc00117 	ldw	ra,4(sp)
 10114a0:	df000017 	ldw	fp,0(sp)
 10114a4:	dec00204 	addi	sp,sp,8
 10114a8:	f800283a 	ret

010114ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10114ac:	defff904 	addi	sp,sp,-28
 10114b0:	dfc00615 	stw	ra,24(sp)
 10114b4:	df000515 	stw	fp,20(sp)
 10114b8:	df000504 	addi	fp,sp,20
 10114bc:	e13ffd15 	stw	r4,-12(fp)
 10114c0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10114c4:	e0bffe17 	ldw	r2,-8(fp)
 10114c8:	10800017 	ldw	r2,0(r2)
 10114cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10114d0:	e13ffd17 	ldw	r4,-12(fp)
 10114d4:	10011fc0 	call	10011fc <strlen>
 10114d8:	10800044 	addi	r2,r2,1
 10114dc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10114e0:	00000d06 	br	1011518 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10114e4:	e0bffc17 	ldw	r2,-16(fp)
 10114e8:	11000217 	ldw	r4,8(r2)
 10114ec:	e1bffb17 	ldw	r6,-20(fp)
 10114f0:	e17ffd17 	ldw	r5,-12(fp)
 10114f4:	10121000 	call	1012100 <memcmp>
 10114f8:	1004c03a 	cmpne	r2,r2,zero
 10114fc:	1000031e 	bne	r2,zero,101150c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1011500:	e0bffc17 	ldw	r2,-16(fp)
 1011504:	e0bfff15 	stw	r2,-4(fp)
 1011508:	00000706 	br	1011528 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101150c:	e0bffc17 	ldw	r2,-16(fp)
 1011510:	10800017 	ldw	r2,0(r2)
 1011514:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1011518:	e0fffe17 	ldw	r3,-8(fp)
 101151c:	e0bffc17 	ldw	r2,-16(fp)
 1011520:	10fff01e 	bne	r2,r3,10114e4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1011524:	e03fff15 	stw	zero,-4(fp)
 1011528:	e0bfff17 	ldw	r2,-4(fp)
}
 101152c:	e037883a 	mov	sp,fp
 1011530:	dfc00117 	ldw	ra,4(sp)
 1011534:	df000017 	ldw	fp,0(sp)
 1011538:	dec00204 	addi	sp,sp,8
 101153c:	f800283a 	ret

01011540 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1011540:	defffe04 	addi	sp,sp,-8
 1011544:	dfc00115 	stw	ra,4(sp)
 1011548:	df000015 	stw	fp,0(sp)
 101154c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1011550:	0009883a 	mov	r4,zero
 1011554:	01440004 	movi	r5,4096
 1011558:	10120240 	call	1012024 <alt_icache_flush>
#endif
}
 101155c:	e037883a 	mov	sp,fp
 1011560:	dfc00117 	ldw	ra,4(sp)
 1011564:	df000017 	ldw	fp,0(sp)
 1011568:	dec00204 	addi	sp,sp,8
 101156c:	f800283a 	ret

01011570 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1011570:	defff904 	addi	sp,sp,-28
 1011574:	dfc00615 	stw	ra,24(sp)
 1011578:	df000515 	stw	fp,20(sp)
 101157c:	df000504 	addi	fp,sp,20
 1011580:	e13ffc15 	stw	r4,-16(fp)
 1011584:	e17ffd15 	stw	r5,-12(fp)
 1011588:	e1bffe15 	stw	r6,-8(fp)
 101158c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1011590:	e0800217 	ldw	r2,8(fp)
 1011594:	d8800015 	stw	r2,0(sp)
 1011598:	e13ffc17 	ldw	r4,-16(fp)
 101159c:	e17ffd17 	ldw	r5,-12(fp)
 10115a0:	e1bffe17 	ldw	r6,-8(fp)
 10115a4:	e1ffff17 	ldw	r7,-4(fp)
 10115a8:	10117440 	call	1011744 <alt_iic_isr_register>
}  
 10115ac:	e037883a 	mov	sp,fp
 10115b0:	dfc00117 	ldw	ra,4(sp)
 10115b4:	df000017 	ldw	fp,0(sp)
 10115b8:	dec00204 	addi	sp,sp,8
 10115bc:	f800283a 	ret

010115c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10115c0:	defff904 	addi	sp,sp,-28
 10115c4:	df000615 	stw	fp,24(sp)
 10115c8:	df000604 	addi	fp,sp,24
 10115cc:	e13ffe15 	stw	r4,-8(fp)
 10115d0:	e17fff15 	stw	r5,-4(fp)
 10115d4:	e0bfff17 	ldw	r2,-4(fp)
 10115d8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10115dc:	0005303a 	rdctl	r2,status
 10115e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10115e4:	e0fffb17 	ldw	r3,-20(fp)
 10115e8:	00bfff84 	movi	r2,-2
 10115ec:	1884703a 	and	r2,r3,r2
 10115f0:	1001703a 	wrctl	status,r2
  
  return context;
 10115f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10115f8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 10115fc:	e0fffc17 	ldw	r3,-16(fp)
 1011600:	00800044 	movi	r2,1
 1011604:	10c4983a 	sll	r2,r2,r3
 1011608:	1007883a 	mov	r3,r2
 101160c:	00804074 	movhi	r2,257
 1011610:	10985304 	addi	r2,r2,24908
 1011614:	10800017 	ldw	r2,0(r2)
 1011618:	1886b03a 	or	r3,r3,r2
 101161c:	00804074 	movhi	r2,257
 1011620:	10985304 	addi	r2,r2,24908
 1011624:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1011628:	00804074 	movhi	r2,257
 101162c:	10985304 	addi	r2,r2,24908
 1011630:	10800017 	ldw	r2,0(r2)
 1011634:	100170fa 	wrctl	ienable,r2
 1011638:	e0bffd17 	ldw	r2,-12(fp)
 101163c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011640:	e0bffa17 	ldw	r2,-24(fp)
 1011644:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1011648:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 101164c:	e037883a 	mov	sp,fp
 1011650:	df000017 	ldw	fp,0(sp)
 1011654:	dec00104 	addi	sp,sp,4
 1011658:	f800283a 	ret

0101165c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 101165c:	defff904 	addi	sp,sp,-28
 1011660:	df000615 	stw	fp,24(sp)
 1011664:	df000604 	addi	fp,sp,24
 1011668:	e13ffe15 	stw	r4,-8(fp)
 101166c:	e17fff15 	stw	r5,-4(fp)
 1011670:	e0bfff17 	ldw	r2,-4(fp)
 1011674:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011678:	0005303a 	rdctl	r2,status
 101167c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011680:	e0fffb17 	ldw	r3,-20(fp)
 1011684:	00bfff84 	movi	r2,-2
 1011688:	1884703a 	and	r2,r3,r2
 101168c:	1001703a 	wrctl	status,r2
  
  return context;
 1011690:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1011694:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1011698:	e0fffc17 	ldw	r3,-16(fp)
 101169c:	00800044 	movi	r2,1
 10116a0:	10c4983a 	sll	r2,r2,r3
 10116a4:	0084303a 	nor	r2,zero,r2
 10116a8:	1007883a 	mov	r3,r2
 10116ac:	00804074 	movhi	r2,257
 10116b0:	10985304 	addi	r2,r2,24908
 10116b4:	10800017 	ldw	r2,0(r2)
 10116b8:	1886703a 	and	r3,r3,r2
 10116bc:	00804074 	movhi	r2,257
 10116c0:	10985304 	addi	r2,r2,24908
 10116c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10116c8:	00804074 	movhi	r2,257
 10116cc:	10985304 	addi	r2,r2,24908
 10116d0:	10800017 	ldw	r2,0(r2)
 10116d4:	100170fa 	wrctl	ienable,r2
 10116d8:	e0bffd17 	ldw	r2,-12(fp)
 10116dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10116e0:	e0bffa17 	ldw	r2,-24(fp)
 10116e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10116e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 10116ec:	e037883a 	mov	sp,fp
 10116f0:	df000017 	ldw	fp,0(sp)
 10116f4:	dec00104 	addi	sp,sp,4
 10116f8:	f800283a 	ret

010116fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10116fc:	defffc04 	addi	sp,sp,-16
 1011700:	df000315 	stw	fp,12(sp)
 1011704:	df000304 	addi	fp,sp,12
 1011708:	e13ffe15 	stw	r4,-8(fp)
 101170c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1011710:	000530fa 	rdctl	r2,ienable
 1011714:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1011718:	e0ffff17 	ldw	r3,-4(fp)
 101171c:	00800044 	movi	r2,1
 1011720:	10c4983a 	sll	r2,r2,r3
 1011724:	1007883a 	mov	r3,r2
 1011728:	e0bffd17 	ldw	r2,-12(fp)
 101172c:	1884703a 	and	r2,r3,r2
 1011730:	1004c03a 	cmpne	r2,r2,zero
}
 1011734:	e037883a 	mov	sp,fp
 1011738:	df000017 	ldw	fp,0(sp)
 101173c:	dec00104 	addi	sp,sp,4
 1011740:	f800283a 	ret

01011744 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1011744:	defff404 	addi	sp,sp,-48
 1011748:	dfc00b15 	stw	ra,44(sp)
 101174c:	df000a15 	stw	fp,40(sp)
 1011750:	df000a04 	addi	fp,sp,40
 1011754:	e13ffb15 	stw	r4,-20(fp)
 1011758:	e17ffc15 	stw	r5,-16(fp)
 101175c:	e1bffd15 	stw	r6,-12(fp)
 1011760:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1011764:	00bffa84 	movi	r2,-22
 1011768:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 101176c:	e0bffc17 	ldw	r2,-16(fp)
 1011770:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1011774:	e0bff917 	ldw	r2,-28(fp)
 1011778:	10800808 	cmpgei	r2,r2,32
 101177c:	1000291e 	bne	r2,zero,1011824 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011780:	0005303a 	rdctl	r2,status
 1011784:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011788:	e0fff717 	ldw	r3,-36(fp)
 101178c:	00bfff84 	movi	r2,-2
 1011790:	1884703a 	and	r2,r3,r2
 1011794:	1001703a 	wrctl	status,r2
  
  return context;
 1011798:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 101179c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 10117a0:	e0bff917 	ldw	r2,-28(fp)
 10117a4:	00c04074 	movhi	r3,257
 10117a8:	18d9ba04 	addi	r3,r3,26344
 10117ac:	100490fa 	slli	r2,r2,3
 10117b0:	10c7883a 	add	r3,r2,r3
 10117b4:	e0bffd17 	ldw	r2,-12(fp)
 10117b8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 10117bc:	e0bff917 	ldw	r2,-28(fp)
 10117c0:	00c04074 	movhi	r3,257
 10117c4:	18d9ba04 	addi	r3,r3,26344
 10117c8:	100490fa 	slli	r2,r2,3
 10117cc:	10c5883a 	add	r2,r2,r3
 10117d0:	10c00104 	addi	r3,r2,4
 10117d4:	e0bffe17 	ldw	r2,-8(fp)
 10117d8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10117dc:	e0bffd17 	ldw	r2,-12(fp)
 10117e0:	1005003a 	cmpeq	r2,r2,zero
 10117e4:	1000051e 	bne	r2,zero,10117fc <alt_iic_isr_register+0xb8>
 10117e8:	e17ff917 	ldw	r5,-28(fp)
 10117ec:	e13ffb17 	ldw	r4,-20(fp)
 10117f0:	10115c00 	call	10115c0 <alt_ic_irq_enable>
 10117f4:	e0bfff15 	stw	r2,-4(fp)
 10117f8:	00000406 	br	101180c <alt_iic_isr_register+0xc8>
 10117fc:	e17ff917 	ldw	r5,-28(fp)
 1011800:	e13ffb17 	ldw	r4,-20(fp)
 1011804:	101165c0 	call	101165c <alt_ic_irq_disable>
 1011808:	e0bfff15 	stw	r2,-4(fp)
 101180c:	e0bfff17 	ldw	r2,-4(fp)
 1011810:	e0bffa15 	stw	r2,-24(fp)
 1011814:	e0bff817 	ldw	r2,-32(fp)
 1011818:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101181c:	e0bff617 	ldw	r2,-40(fp)
 1011820:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1011824:	e0bffa17 	ldw	r2,-24(fp)
}
 1011828:	e037883a 	mov	sp,fp
 101182c:	dfc00117 	ldw	ra,4(sp)
 1011830:	df000017 	ldw	fp,0(sp)
 1011834:	dec00204 	addi	sp,sp,8
 1011838:	f800283a 	ret

0101183c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 101183c:	defff804 	addi	sp,sp,-32
 1011840:	dfc00715 	stw	ra,28(sp)
 1011844:	df000615 	stw	fp,24(sp)
 1011848:	dc000515 	stw	r16,20(sp)
 101184c:	df000504 	addi	fp,sp,20
 1011850:	e13ffc15 	stw	r4,-16(fp)
 1011854:	e17ffd15 	stw	r5,-12(fp)
 1011858:	e1bffe15 	stw	r6,-8(fp)
 101185c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1011860:	e13ffd17 	ldw	r4,-12(fp)
 1011864:	e17ffe17 	ldw	r5,-8(fp)
 1011868:	e1bfff17 	ldw	r6,-4(fp)
 101186c:	1011a840 	call	1011a84 <open>
 1011870:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1011874:	e0bffb17 	ldw	r2,-20(fp)
 1011878:	1004803a 	cmplt	r2,r2,zero
 101187c:	10001f1e 	bne	r2,zero,10118fc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1011880:	e13ffb17 	ldw	r4,-20(fp)
 1011884:	04004074 	movhi	r16,257
 1011888:	840ca104 	addi	r16,r16,12932
 101188c:	01400304 	movi	r5,12
 1011890:	1000adc0 	call	1000adc <__mulsi3>
 1011894:	1405883a 	add	r2,r2,r16
 1011898:	10c00017 	ldw	r3,0(r2)
 101189c:	e0bffc17 	ldw	r2,-16(fp)
 10118a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10118a4:	e13ffb17 	ldw	r4,-20(fp)
 10118a8:	04004074 	movhi	r16,257
 10118ac:	840ca104 	addi	r16,r16,12932
 10118b0:	01400304 	movi	r5,12
 10118b4:	1000adc0 	call	1000adc <__mulsi3>
 10118b8:	1405883a 	add	r2,r2,r16
 10118bc:	10800104 	addi	r2,r2,4
 10118c0:	10c00017 	ldw	r3,0(r2)
 10118c4:	e0bffc17 	ldw	r2,-16(fp)
 10118c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10118cc:	e13ffb17 	ldw	r4,-20(fp)
 10118d0:	04004074 	movhi	r16,257
 10118d4:	840ca104 	addi	r16,r16,12932
 10118d8:	01400304 	movi	r5,12
 10118dc:	1000adc0 	call	1000adc <__mulsi3>
 10118e0:	1405883a 	add	r2,r2,r16
 10118e4:	10800204 	addi	r2,r2,8
 10118e8:	10c00017 	ldw	r3,0(r2)
 10118ec:	e0bffc17 	ldw	r2,-16(fp)
 10118f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10118f4:	e13ffb17 	ldw	r4,-20(fp)
 10118f8:	100afc80 	call	100afc8 <alt_release_fd>
  }
} 
 10118fc:	e037883a 	mov	sp,fp
 1011900:	dfc00217 	ldw	ra,8(sp)
 1011904:	df000117 	ldw	fp,4(sp)
 1011908:	dc000017 	ldw	r16,0(sp)
 101190c:	dec00304 	addi	sp,sp,12
 1011910:	f800283a 	ret

01011914 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1011914:	defffb04 	addi	sp,sp,-20
 1011918:	dfc00415 	stw	ra,16(sp)
 101191c:	df000315 	stw	fp,12(sp)
 1011920:	df000304 	addi	fp,sp,12
 1011924:	e13ffd15 	stw	r4,-12(fp)
 1011928:	e17ffe15 	stw	r5,-8(fp)
 101192c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1011930:	01004074 	movhi	r4,257
 1011934:	210ca404 	addi	r4,r4,12944
 1011938:	e17ffd17 	ldw	r5,-12(fp)
 101193c:	01800044 	movi	r6,1
 1011940:	01c07fc4 	movi	r7,511
 1011944:	101183c0 	call	101183c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1011948:	01004074 	movhi	r4,257
 101194c:	210ca104 	addi	r4,r4,12932
 1011950:	e17ffe17 	ldw	r5,-8(fp)
 1011954:	000d883a 	mov	r6,zero
 1011958:	01c07fc4 	movi	r7,511
 101195c:	101183c0 	call	101183c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1011960:	01004074 	movhi	r4,257
 1011964:	210ca704 	addi	r4,r4,12956
 1011968:	e17fff17 	ldw	r5,-4(fp)
 101196c:	01800044 	movi	r6,1
 1011970:	01c07fc4 	movi	r7,511
 1011974:	101183c0 	call	101183c <alt_open_fd>
}  
 1011978:	e037883a 	mov	sp,fp
 101197c:	dfc00117 	ldw	ra,4(sp)
 1011980:	df000017 	ldw	fp,0(sp)
 1011984:	dec00204 	addi	sp,sp,8
 1011988:	f800283a 	ret

0101198c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101198c:	defffa04 	addi	sp,sp,-24
 1011990:	dfc00515 	stw	ra,20(sp)
 1011994:	df000415 	stw	fp,16(sp)
 1011998:	dc000315 	stw	r16,12(sp)
 101199c:	df000304 	addi	fp,sp,12
 10119a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10119a4:	e0bffe17 	ldw	r2,-8(fp)
 10119a8:	10800217 	ldw	r2,8(r2)
 10119ac:	10d00034 	orhi	r3,r2,16384
 10119b0:	e0bffe17 	ldw	r2,-8(fp)
 10119b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10119b8:	e03ffd15 	stw	zero,-12(fp)
 10119bc:	00002306 	br	1011a4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10119c0:	e13ffd17 	ldw	r4,-12(fp)
 10119c4:	04004074 	movhi	r16,257
 10119c8:	840ca104 	addi	r16,r16,12932
 10119cc:	01400304 	movi	r5,12
 10119d0:	1000adc0 	call	1000adc <__mulsi3>
 10119d4:	1405883a 	add	r2,r2,r16
 10119d8:	10c00017 	ldw	r3,0(r2)
 10119dc:	e0bffe17 	ldw	r2,-8(fp)
 10119e0:	10800017 	ldw	r2,0(r2)
 10119e4:	1880161e 	bne	r3,r2,1011a40 <alt_file_locked+0xb4>
 10119e8:	e13ffd17 	ldw	r4,-12(fp)
 10119ec:	04004074 	movhi	r16,257
 10119f0:	840ca104 	addi	r16,r16,12932
 10119f4:	01400304 	movi	r5,12
 10119f8:	1000adc0 	call	1000adc <__mulsi3>
 10119fc:	1405883a 	add	r2,r2,r16
 1011a00:	10800204 	addi	r2,r2,8
 1011a04:	10800017 	ldw	r2,0(r2)
 1011a08:	1004403a 	cmpge	r2,r2,zero
 1011a0c:	10000c1e 	bne	r2,zero,1011a40 <alt_file_locked+0xb4>
 1011a10:	e13ffd17 	ldw	r4,-12(fp)
 1011a14:	01400304 	movi	r5,12
 1011a18:	1000adc0 	call	1000adc <__mulsi3>
 1011a1c:	1007883a 	mov	r3,r2
 1011a20:	00804074 	movhi	r2,257
 1011a24:	108ca104 	addi	r2,r2,12932
 1011a28:	1887883a 	add	r3,r3,r2
 1011a2c:	e0bffe17 	ldw	r2,-8(fp)
 1011a30:	18800326 	beq	r3,r2,1011a40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1011a34:	00bffcc4 	movi	r2,-13
 1011a38:	e0bfff15 	stw	r2,-4(fp)
 1011a3c:	00000a06 	br	1011a68 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1011a40:	e0bffd17 	ldw	r2,-12(fp)
 1011a44:	10800044 	addi	r2,r2,1
 1011a48:	e0bffd15 	stw	r2,-12(fp)
 1011a4c:	00804074 	movhi	r2,257
 1011a50:	10916004 	addi	r2,r2,17792
 1011a54:	10800017 	ldw	r2,0(r2)
 1011a58:	1007883a 	mov	r3,r2
 1011a5c:	e0bffd17 	ldw	r2,-12(fp)
 1011a60:	18bfd72e 	bgeu	r3,r2,10119c0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1011a64:	e03fff15 	stw	zero,-4(fp)
 1011a68:	e0bfff17 	ldw	r2,-4(fp)
}
 1011a6c:	e037883a 	mov	sp,fp
 1011a70:	dfc00217 	ldw	ra,8(sp)
 1011a74:	df000117 	ldw	fp,4(sp)
 1011a78:	dc000017 	ldw	r16,0(sp)
 1011a7c:	dec00304 	addi	sp,sp,12
 1011a80:	f800283a 	ret

01011a84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1011a84:	defff404 	addi	sp,sp,-48
 1011a88:	dfc00b15 	stw	ra,44(sp)
 1011a8c:	df000a15 	stw	fp,40(sp)
 1011a90:	df000a04 	addi	fp,sp,40
 1011a94:	e13ffb15 	stw	r4,-20(fp)
 1011a98:	e17ffc15 	stw	r5,-16(fp)
 1011a9c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1011aa0:	00bfffc4 	movi	r2,-1
 1011aa4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1011aa8:	00bffb44 	movi	r2,-19
 1011aac:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1011ab0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1011ab4:	e13ffb17 	ldw	r4,-20(fp)
 1011ab8:	01404074 	movhi	r5,257
 1011abc:	29515e04 	addi	r5,r5,17784
 1011ac0:	10114ac0 	call	10114ac <alt_find_dev>
 1011ac4:	e0bffa15 	stw	r2,-24(fp)
 1011ac8:	e0bffa17 	ldw	r2,-24(fp)
 1011acc:	1004c03a 	cmpne	r2,r2,zero
 1011ad0:	1000051e 	bne	r2,zero,1011ae8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1011ad4:	e13ffb17 	ldw	r4,-20(fp)
 1011ad8:	1011e340 	call	1011e34 <alt_find_file>
 1011adc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1011ae0:	00800044 	movi	r2,1
 1011ae4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1011ae8:	e0bffa17 	ldw	r2,-24(fp)
 1011aec:	1005003a 	cmpeq	r2,r2,zero
 1011af0:	1000311e 	bne	r2,zero,1011bb8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1011af4:	e13ffa17 	ldw	r4,-24(fp)
 1011af8:	1011f540 	call	1011f54 <alt_get_fd>
 1011afc:	e0bff815 	stw	r2,-32(fp)
 1011b00:	e0bff817 	ldw	r2,-32(fp)
 1011b04:	1004403a 	cmpge	r2,r2,zero
 1011b08:	1000031e 	bne	r2,zero,1011b18 <open+0x94>
    {
      status = index;
 1011b0c:	e0bff817 	ldw	r2,-32(fp)
 1011b10:	e0bff715 	stw	r2,-36(fp)
 1011b14:	00002a06 	br	1011bc0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1011b18:	e13ff817 	ldw	r4,-32(fp)
 1011b1c:	01400304 	movi	r5,12
 1011b20:	1000adc0 	call	1000adc <__mulsi3>
 1011b24:	1007883a 	mov	r3,r2
 1011b28:	00804074 	movhi	r2,257
 1011b2c:	108ca104 	addi	r2,r2,12932
 1011b30:	1885883a 	add	r2,r3,r2
 1011b34:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1011b38:	e0fffc17 	ldw	r3,-16(fp)
 1011b3c:	00900034 	movhi	r2,16384
 1011b40:	10bfffc4 	addi	r2,r2,-1
 1011b44:	1886703a 	and	r3,r3,r2
 1011b48:	e0bff917 	ldw	r2,-28(fp)
 1011b4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1011b50:	e0bff617 	ldw	r2,-40(fp)
 1011b54:	1004c03a 	cmpne	r2,r2,zero
 1011b58:	1000061e 	bne	r2,zero,1011b74 <open+0xf0>
 1011b5c:	e13ff917 	ldw	r4,-28(fp)
 1011b60:	101198c0 	call	101198c <alt_file_locked>
 1011b64:	e0bff715 	stw	r2,-36(fp)
 1011b68:	e0bff717 	ldw	r2,-36(fp)
 1011b6c:	1004803a 	cmplt	r2,r2,zero
 1011b70:	1000131e 	bne	r2,zero,1011bc0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1011b74:	e0bffa17 	ldw	r2,-24(fp)
 1011b78:	10800317 	ldw	r2,12(r2)
 1011b7c:	1005003a 	cmpeq	r2,r2,zero
 1011b80:	1000091e 	bne	r2,zero,1011ba8 <open+0x124>
 1011b84:	e0bffa17 	ldw	r2,-24(fp)
 1011b88:	10800317 	ldw	r2,12(r2)
 1011b8c:	e13ff917 	ldw	r4,-28(fp)
 1011b90:	e17ffb17 	ldw	r5,-20(fp)
 1011b94:	e1bffc17 	ldw	r6,-16(fp)
 1011b98:	e1fffd17 	ldw	r7,-12(fp)
 1011b9c:	103ee83a 	callr	r2
 1011ba0:	e0bfff15 	stw	r2,-4(fp)
 1011ba4:	00000106 	br	1011bac <open+0x128>
 1011ba8:	e03fff15 	stw	zero,-4(fp)
 1011bac:	e0bfff17 	ldw	r2,-4(fp)
 1011bb0:	e0bff715 	stw	r2,-36(fp)
 1011bb4:	00000206 	br	1011bc0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1011bb8:	00bffb44 	movi	r2,-19
 1011bbc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1011bc0:	e0bff717 	ldw	r2,-36(fp)
 1011bc4:	1004403a 	cmpge	r2,r2,zero
 1011bc8:	1000091e 	bne	r2,zero,1011bf0 <open+0x16c>
  {
    alt_release_fd (index);  
 1011bcc:	e13ff817 	ldw	r4,-32(fp)
 1011bd0:	100afc80 	call	100afc8 <alt_release_fd>
    ALT_ERRNO = -status;
 1011bd4:	1011c100 	call	1011c10 <alt_get_errno>
 1011bd8:	e0fff717 	ldw	r3,-36(fp)
 1011bdc:	00c7c83a 	sub	r3,zero,r3
 1011be0:	10c00015 	stw	r3,0(r2)
    return -1;
 1011be4:	00bfffc4 	movi	r2,-1
 1011be8:	e0bffe15 	stw	r2,-8(fp)
 1011bec:	00000206 	br	1011bf8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1011bf0:	e0bff817 	ldw	r2,-32(fp)
 1011bf4:	e0bffe15 	stw	r2,-8(fp)
 1011bf8:	e0bffe17 	ldw	r2,-8(fp)
}
 1011bfc:	e037883a 	mov	sp,fp
 1011c00:	dfc00117 	ldw	ra,4(sp)
 1011c04:	df000017 	ldw	fp,0(sp)
 1011c08:	dec00204 	addi	sp,sp,8
 1011c0c:	f800283a 	ret

01011c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011c10:	defffd04 	addi	sp,sp,-12
 1011c14:	dfc00215 	stw	ra,8(sp)
 1011c18:	df000115 	stw	fp,4(sp)
 1011c1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011c20:	00804074 	movhi	r2,257
 1011c24:	10916104 	addi	r2,r2,17796
 1011c28:	10800017 	ldw	r2,0(r2)
 1011c2c:	1005003a 	cmpeq	r2,r2,zero
 1011c30:	1000061e 	bne	r2,zero,1011c4c <alt_get_errno+0x3c>
 1011c34:	00804074 	movhi	r2,257
 1011c38:	10916104 	addi	r2,r2,17796
 1011c3c:	10800017 	ldw	r2,0(r2)
 1011c40:	103ee83a 	callr	r2
 1011c44:	e0bfff15 	stw	r2,-4(fp)
 1011c48:	00000306 	br	1011c58 <alt_get_errno+0x48>
 1011c4c:	00804074 	movhi	r2,257
 1011c50:	10984004 	addi	r2,r2,24832
 1011c54:	e0bfff15 	stw	r2,-4(fp)
 1011c58:	e0bfff17 	ldw	r2,-4(fp)
}
 1011c5c:	e037883a 	mov	sp,fp
 1011c60:	dfc00117 	ldw	ra,4(sp)
 1011c64:	df000017 	ldw	fp,0(sp)
 1011c68:	dec00204 	addi	sp,sp,8
 1011c6c:	f800283a 	ret

01011c70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1011c70:	defffa04 	addi	sp,sp,-24
 1011c74:	df000515 	stw	fp,20(sp)
 1011c78:	df000504 	addi	fp,sp,20
 1011c7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011c80:	0005303a 	rdctl	r2,status
 1011c84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011c88:	e0fffd17 	ldw	r3,-12(fp)
 1011c8c:	00bfff84 	movi	r2,-2
 1011c90:	1884703a 	and	r2,r3,r2
 1011c94:	1001703a 	wrctl	status,r2
  
  return context;
 1011c98:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1011c9c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1011ca0:	e0bfff17 	ldw	r2,-4(fp)
 1011ca4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1011ca8:	e0bffc17 	ldw	r2,-16(fp)
 1011cac:	10c00017 	ldw	r3,0(r2)
 1011cb0:	e0bffc17 	ldw	r2,-16(fp)
 1011cb4:	10800117 	ldw	r2,4(r2)
 1011cb8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1011cbc:	e0bffc17 	ldw	r2,-16(fp)
 1011cc0:	10c00117 	ldw	r3,4(r2)
 1011cc4:	e0bffc17 	ldw	r2,-16(fp)
 1011cc8:	10800017 	ldw	r2,0(r2)
 1011ccc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1011cd0:	e0fffc17 	ldw	r3,-16(fp)
 1011cd4:	e0bffc17 	ldw	r2,-16(fp)
 1011cd8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1011cdc:	e0fffc17 	ldw	r3,-16(fp)
 1011ce0:	e0bffc17 	ldw	r2,-16(fp)
 1011ce4:	18800015 	stw	r2,0(r3)
 1011ce8:	e0bffe17 	ldw	r2,-8(fp)
 1011cec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011cf0:	e0bffb17 	ldw	r2,-20(fp)
 1011cf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1011cf8:	e037883a 	mov	sp,fp
 1011cfc:	df000017 	ldw	fp,0(sp)
 1011d00:	dec00104 	addi	sp,sp,4
 1011d04:	f800283a 	ret

01011d08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1011d08:	defffb04 	addi	sp,sp,-20
 1011d0c:	dfc00415 	stw	ra,16(sp)
 1011d10:	df000315 	stw	fp,12(sp)
 1011d14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1011d18:	d0a00e17 	ldw	r2,-32712(gp)
 1011d1c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1011d20:	d0a6ff17 	ldw	r2,-25604(gp)
 1011d24:	10800044 	addi	r2,r2,1
 1011d28:	d0a6ff15 	stw	r2,-25604(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011d2c:	00003106 	br	1011df4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1011d30:	e0bffe17 	ldw	r2,-8(fp)
 1011d34:	10800017 	ldw	r2,0(r2)
 1011d38:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1011d3c:	e0bffe17 	ldw	r2,-8(fp)
 1011d40:	10800403 	ldbu	r2,16(r2)
 1011d44:	10803fcc 	andi	r2,r2,255
 1011d48:	1005003a 	cmpeq	r2,r2,zero
 1011d4c:	1000051e 	bne	r2,zero,1011d64 <alt_tick+0x5c>
 1011d50:	d0a6ff17 	ldw	r2,-25604(gp)
 1011d54:	1004c03a 	cmpne	r2,r2,zero
 1011d58:	1000021e 	bne	r2,zero,1011d64 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1011d5c:	e0bffe17 	ldw	r2,-8(fp)
 1011d60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011d64:	e0bffe17 	ldw	r2,-8(fp)
 1011d68:	10c00217 	ldw	r3,8(r2)
 1011d6c:	d0a6ff17 	ldw	r2,-25604(gp)
 1011d70:	10c01e36 	bltu	r2,r3,1011dec <alt_tick+0xe4>
 1011d74:	e0bffe17 	ldw	r2,-8(fp)
 1011d78:	10800403 	ldbu	r2,16(r2)
 1011d7c:	10803fcc 	andi	r2,r2,255
 1011d80:	1004c03a 	cmpne	r2,r2,zero
 1011d84:	1000191e 	bne	r2,zero,1011dec <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1011d88:	e0bffe17 	ldw	r2,-8(fp)
 1011d8c:	10c00317 	ldw	r3,12(r2)
 1011d90:	e0bffe17 	ldw	r2,-8(fp)
 1011d94:	11000517 	ldw	r4,20(r2)
 1011d98:	183ee83a 	callr	r3
 1011d9c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1011da0:	e0bffd17 	ldw	r2,-12(fp)
 1011da4:	1004c03a 	cmpne	r2,r2,zero
 1011da8:	1000031e 	bne	r2,zero,1011db8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1011dac:	e13ffe17 	ldw	r4,-8(fp)
 1011db0:	1011c700 	call	1011c70 <alt_alarm_stop>
 1011db4:	00000d06 	br	1011dec <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1011db8:	e0bffe17 	ldw	r2,-8(fp)
 1011dbc:	10c00217 	ldw	r3,8(r2)
 1011dc0:	e0bffd17 	ldw	r2,-12(fp)
 1011dc4:	1887883a 	add	r3,r3,r2
 1011dc8:	e0bffe17 	ldw	r2,-8(fp)
 1011dcc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1011dd0:	e0bffe17 	ldw	r2,-8(fp)
 1011dd4:	10c00217 	ldw	r3,8(r2)
 1011dd8:	d0a6ff17 	ldw	r2,-25604(gp)
 1011ddc:	1880032e 	bgeu	r3,r2,1011dec <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1011de0:	e0fffe17 	ldw	r3,-8(fp)
 1011de4:	00800044 	movi	r2,1
 1011de8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1011dec:	e0bfff17 	ldw	r2,-4(fp)
 1011df0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011df4:	d0e00e04 	addi	r3,gp,-32712
 1011df8:	e0bffe17 	ldw	r2,-8(fp)
 1011dfc:	10ffcc1e 	bne	r2,r3,1011d30 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1011e00:	e037883a 	mov	sp,fp
 1011e04:	dfc00117 	ldw	ra,4(sp)
 1011e08:	df000017 	ldw	fp,0(sp)
 1011e0c:	dec00204 	addi	sp,sp,8
 1011e10:	f800283a 	ret

01011e14 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1011e14:	deffff04 	addi	sp,sp,-4
 1011e18:	df000015 	stw	fp,0(sp)
 1011e1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1011e20:	000170fa 	wrctl	ienable,zero
}
 1011e24:	e037883a 	mov	sp,fp
 1011e28:	df000017 	ldw	fp,0(sp)
 1011e2c:	dec00104 	addi	sp,sp,4
 1011e30:	f800283a 	ret

01011e34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1011e34:	defffa04 	addi	sp,sp,-24
 1011e38:	dfc00515 	stw	ra,20(sp)
 1011e3c:	df000415 	stw	fp,16(sp)
 1011e40:	df000404 	addi	fp,sp,16
 1011e44:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1011e48:	00804074 	movhi	r2,257
 1011e4c:	10915c04 	addi	r2,r2,17776
 1011e50:	10800017 	ldw	r2,0(r2)
 1011e54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011e58:	00003306 	br	1011f28 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1011e5c:	e0bffd17 	ldw	r2,-12(fp)
 1011e60:	11000217 	ldw	r4,8(r2)
 1011e64:	10011fc0 	call	10011fc <strlen>
 1011e68:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1011e6c:	e0bffd17 	ldw	r2,-12(fp)
 1011e70:	10c00217 	ldw	r3,8(r2)
 1011e74:	e0bffc17 	ldw	r2,-16(fp)
 1011e78:	1885883a 	add	r2,r3,r2
 1011e7c:	10bfffc4 	addi	r2,r2,-1
 1011e80:	10800003 	ldbu	r2,0(r2)
 1011e84:	10803fcc 	andi	r2,r2,255
 1011e88:	1080201c 	xori	r2,r2,128
 1011e8c:	10bfe004 	addi	r2,r2,-128
 1011e90:	10800bd8 	cmpnei	r2,r2,47
 1011e94:	1000031e 	bne	r2,zero,1011ea4 <alt_find_file+0x70>
    {
      len -= 1;
 1011e98:	e0bffc17 	ldw	r2,-16(fp)
 1011e9c:	10bfffc4 	addi	r2,r2,-1
 1011ea0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011ea4:	e0bffc17 	ldw	r2,-16(fp)
 1011ea8:	1007883a 	mov	r3,r2
 1011eac:	e0bffe17 	ldw	r2,-8(fp)
 1011eb0:	1885883a 	add	r2,r3,r2
 1011eb4:	10800003 	ldbu	r2,0(r2)
 1011eb8:	10803fcc 	andi	r2,r2,255
 1011ebc:	1080201c 	xori	r2,r2,128
 1011ec0:	10bfe004 	addi	r2,r2,-128
 1011ec4:	10800be0 	cmpeqi	r2,r2,47
 1011ec8:	10000a1e 	bne	r2,zero,1011ef4 <alt_find_file+0xc0>
 1011ecc:	e0bffc17 	ldw	r2,-16(fp)
 1011ed0:	1007883a 	mov	r3,r2
 1011ed4:	e0bffe17 	ldw	r2,-8(fp)
 1011ed8:	1885883a 	add	r2,r3,r2
 1011edc:	10800003 	ldbu	r2,0(r2)
 1011ee0:	10803fcc 	andi	r2,r2,255
 1011ee4:	1080201c 	xori	r2,r2,128
 1011ee8:	10bfe004 	addi	r2,r2,-128
 1011eec:	1004c03a 	cmpne	r2,r2,zero
 1011ef0:	10000a1e 	bne	r2,zero,1011f1c <alt_find_file+0xe8>
 1011ef4:	e0bffd17 	ldw	r2,-12(fp)
 1011ef8:	11000217 	ldw	r4,8(r2)
 1011efc:	e1bffc17 	ldw	r6,-16(fp)
 1011f00:	e17ffe17 	ldw	r5,-8(fp)
 1011f04:	10121000 	call	1012100 <memcmp>
 1011f08:	1004c03a 	cmpne	r2,r2,zero
 1011f0c:	1000031e 	bne	r2,zero,1011f1c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1011f10:	e0bffd17 	ldw	r2,-12(fp)
 1011f14:	e0bfff15 	stw	r2,-4(fp)
 1011f18:	00000806 	br	1011f3c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1011f1c:	e0bffd17 	ldw	r2,-12(fp)
 1011f20:	10800017 	ldw	r2,0(r2)
 1011f24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011f28:	00c04074 	movhi	r3,257
 1011f2c:	18d15c04 	addi	r3,r3,17776
 1011f30:	e0bffd17 	ldw	r2,-12(fp)
 1011f34:	10ffc91e 	bne	r2,r3,1011e5c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1011f38:	e03fff15 	stw	zero,-4(fp)
 1011f3c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011f40:	e037883a 	mov	sp,fp
 1011f44:	dfc00117 	ldw	ra,4(sp)
 1011f48:	df000017 	ldw	fp,0(sp)
 1011f4c:	dec00204 	addi	sp,sp,8
 1011f50:	f800283a 	ret

01011f54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1011f54:	defffa04 	addi	sp,sp,-24
 1011f58:	dfc00515 	stw	ra,20(sp)
 1011f5c:	df000415 	stw	fp,16(sp)
 1011f60:	dc000315 	stw	r16,12(sp)
 1011f64:	df000304 	addi	fp,sp,12
 1011f68:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1011f6c:	00bffa04 	movi	r2,-24
 1011f70:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011f74:	e03ffe15 	stw	zero,-8(fp)
 1011f78:	00002006 	br	1011ffc <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1011f7c:	e13ffe17 	ldw	r4,-8(fp)
 1011f80:	04004074 	movhi	r16,257
 1011f84:	840ca104 	addi	r16,r16,12932
 1011f88:	01400304 	movi	r5,12
 1011f8c:	1000adc0 	call	1000adc <__mulsi3>
 1011f90:	1405883a 	add	r2,r2,r16
 1011f94:	10800017 	ldw	r2,0(r2)
 1011f98:	1004c03a 	cmpne	r2,r2,zero
 1011f9c:	1000141e 	bne	r2,zero,1011ff0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1011fa0:	e13ffe17 	ldw	r4,-8(fp)
 1011fa4:	04004074 	movhi	r16,257
 1011fa8:	840ca104 	addi	r16,r16,12932
 1011fac:	01400304 	movi	r5,12
 1011fb0:	1000adc0 	call	1000adc <__mulsi3>
 1011fb4:	1407883a 	add	r3,r2,r16
 1011fb8:	e0bfff17 	ldw	r2,-4(fp)
 1011fbc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1011fc0:	00804074 	movhi	r2,257
 1011fc4:	10916004 	addi	r2,r2,17792
 1011fc8:	10c00017 	ldw	r3,0(r2)
 1011fcc:	e0bffe17 	ldw	r2,-8(fp)
 1011fd0:	1880040e 	bge	r3,r2,1011fe4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1011fd4:	00c04074 	movhi	r3,257
 1011fd8:	18d16004 	addi	r3,r3,17792
 1011fdc:	e0bffe17 	ldw	r2,-8(fp)
 1011fe0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1011fe4:	e0bffe17 	ldw	r2,-8(fp)
 1011fe8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1011fec:	00000606 	br	1012008 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011ff0:	e0bffe17 	ldw	r2,-8(fp)
 1011ff4:	10800044 	addi	r2,r2,1
 1011ff8:	e0bffe15 	stw	r2,-8(fp)
 1011ffc:	e0bffe17 	ldw	r2,-8(fp)
 1012000:	10800810 	cmplti	r2,r2,32
 1012004:	103fdd1e 	bne	r2,zero,1011f7c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1012008:	e0bffd17 	ldw	r2,-12(fp)
}
 101200c:	e037883a 	mov	sp,fp
 1012010:	dfc00217 	ldw	ra,8(sp)
 1012014:	df000117 	ldw	fp,4(sp)
 1012018:	dc000017 	ldw	r16,0(sp)
 101201c:	dec00304 	addi	sp,sp,12
 1012020:	f800283a 	ret

01012024 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1012024:	defffb04 	addi	sp,sp,-20
 1012028:	df000415 	stw	fp,16(sp)
 101202c:	df000404 	addi	fp,sp,16
 1012030:	e13ffe15 	stw	r4,-8(fp)
 1012034:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1012038:	e0bfff17 	ldw	r2,-4(fp)
 101203c:	10840070 	cmpltui	r2,r2,4097
 1012040:	1000021e 	bne	r2,zero,101204c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1012044:	00840004 	movi	r2,4096
 1012048:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 101204c:	e0fffe17 	ldw	r3,-8(fp)
 1012050:	e0bfff17 	ldw	r2,-4(fp)
 1012054:	1885883a 	add	r2,r3,r2
 1012058:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101205c:	e0bffe17 	ldw	r2,-8(fp)
 1012060:	e0bffd15 	stw	r2,-12(fp)
 1012064:	00000506 	br	101207c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1012068:	e0bffd17 	ldw	r2,-12(fp)
 101206c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1012070:	e0bffd17 	ldw	r2,-12(fp)
 1012074:	10800804 	addi	r2,r2,32
 1012078:	e0bffd15 	stw	r2,-12(fp)
 101207c:	e0fffd17 	ldw	r3,-12(fp)
 1012080:	e0bffc17 	ldw	r2,-16(fp)
 1012084:	18bff836 	bltu	r3,r2,1012068 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1012088:	e0bffe17 	ldw	r2,-8(fp)
 101208c:	108007cc 	andi	r2,r2,31
 1012090:	1005003a 	cmpeq	r2,r2,zero
 1012094:	1000021e 	bne	r2,zero,10120a0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1012098:	e0bffd17 	ldw	r2,-12(fp)
 101209c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10120a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10120a4:	e037883a 	mov	sp,fp
 10120a8:	df000017 	ldw	fp,0(sp)
 10120ac:	dec00104 	addi	sp,sp,4
 10120b0:	f800283a 	ret

010120b4 <atexit>:
 10120b4:	200b883a 	mov	r5,r4
 10120b8:	000d883a 	mov	r6,zero
 10120bc:	0009883a 	mov	r4,zero
 10120c0:	000f883a 	mov	r7,zero
 10120c4:	10121741 	jmpi	1012174 <__register_exitproc>

010120c8 <exit>:
 10120c8:	defffe04 	addi	sp,sp,-8
 10120cc:	000b883a 	mov	r5,zero
 10120d0:	dc000015 	stw	r16,0(sp)
 10120d4:	dfc00115 	stw	ra,4(sp)
 10120d8:	2021883a 	mov	r16,r4
 10120dc:	10122ac0 	call	10122ac <__call_exitprocs>
 10120e0:	00804074 	movhi	r2,257
 10120e4:	10915704 	addi	r2,r2,17756
 10120e8:	11000017 	ldw	r4,0(r2)
 10120ec:	20800f17 	ldw	r2,60(r4)
 10120f0:	10000126 	beq	r2,zero,10120f8 <exit+0x30>
 10120f4:	103ee83a 	callr	r2
 10120f8:	8009883a 	mov	r4,r16
 10120fc:	101249c0 	call	101249c <_exit>

01012100 <memcmp>:
 1012100:	00c000c4 	movi	r3,3
 1012104:	1980032e 	bgeu	r3,r6,1012114 <memcmp+0x14>
 1012108:	2144b03a 	or	r2,r4,r5
 101210c:	10c4703a 	and	r2,r2,r3
 1012110:	10000f26 	beq	r2,zero,1012150 <memcmp+0x50>
 1012114:	31ffffc4 	addi	r7,r6,-1
 1012118:	3000061e 	bne	r6,zero,1012134 <memcmp+0x34>
 101211c:	00000a06 	br	1012148 <memcmp+0x48>
 1012120:	39ffffc4 	addi	r7,r7,-1
 1012124:	00bfffc4 	movi	r2,-1
 1012128:	21000044 	addi	r4,r4,1
 101212c:	29400044 	addi	r5,r5,1
 1012130:	38800526 	beq	r7,r2,1012148 <memcmp+0x48>
 1012134:	20c00003 	ldbu	r3,0(r4)
 1012138:	28800003 	ldbu	r2,0(r5)
 101213c:	18bff826 	beq	r3,r2,1012120 <memcmp+0x20>
 1012140:	1885c83a 	sub	r2,r3,r2
 1012144:	f800283a 	ret
 1012148:	0005883a 	mov	r2,zero
 101214c:	f800283a 	ret
 1012150:	180f883a 	mov	r7,r3
 1012154:	20c00017 	ldw	r3,0(r4)
 1012158:	28800017 	ldw	r2,0(r5)
 101215c:	18bfed1e 	bne	r3,r2,1012114 <memcmp+0x14>
 1012160:	31bfff04 	addi	r6,r6,-4
 1012164:	21000104 	addi	r4,r4,4
 1012168:	29400104 	addi	r5,r5,4
 101216c:	39bff936 	bltu	r7,r6,1012154 <memcmp+0x54>
 1012170:	003fe806 	br	1012114 <memcmp+0x14>

01012174 <__register_exitproc>:
 1012174:	defffa04 	addi	sp,sp,-24
 1012178:	00804074 	movhi	r2,257
 101217c:	10915704 	addi	r2,r2,17756
 1012180:	dc000015 	stw	r16,0(sp)
 1012184:	14000017 	ldw	r16,0(r2)
 1012188:	dd000415 	stw	r20,16(sp)
 101218c:	2829883a 	mov	r20,r5
 1012190:	81405217 	ldw	r5,328(r16)
 1012194:	dcc00315 	stw	r19,12(sp)
 1012198:	dc800215 	stw	r18,8(sp)
 101219c:	dc400115 	stw	r17,4(sp)
 10121a0:	dfc00515 	stw	ra,20(sp)
 10121a4:	2023883a 	mov	r17,r4
 10121a8:	3027883a 	mov	r19,r6
 10121ac:	3825883a 	mov	r18,r7
 10121b0:	28002526 	beq	r5,zero,1012248 <__register_exitproc+0xd4>
 10121b4:	29000117 	ldw	r4,4(r5)
 10121b8:	008007c4 	movi	r2,31
 10121bc:	11002716 	blt	r2,r4,101225c <__register_exitproc+0xe8>
 10121c0:	8800101e 	bne	r17,zero,1012204 <__register_exitproc+0x90>
 10121c4:	2105883a 	add	r2,r4,r4
 10121c8:	1085883a 	add	r2,r2,r2
 10121cc:	20c00044 	addi	r3,r4,1
 10121d0:	1145883a 	add	r2,r2,r5
 10121d4:	0009883a 	mov	r4,zero
 10121d8:	15000215 	stw	r20,8(r2)
 10121dc:	28c00115 	stw	r3,4(r5)
 10121e0:	2005883a 	mov	r2,r4
 10121e4:	dfc00517 	ldw	ra,20(sp)
 10121e8:	dd000417 	ldw	r20,16(sp)
 10121ec:	dcc00317 	ldw	r19,12(sp)
 10121f0:	dc800217 	ldw	r18,8(sp)
 10121f4:	dc400117 	ldw	r17,4(sp)
 10121f8:	dc000017 	ldw	r16,0(sp)
 10121fc:	dec00604 	addi	sp,sp,24
 1012200:	f800283a 	ret
 1012204:	29802204 	addi	r6,r5,136
 1012208:	00800044 	movi	r2,1
 101220c:	110e983a 	sll	r7,r2,r4
 1012210:	30c04017 	ldw	r3,256(r6)
 1012214:	2105883a 	add	r2,r4,r4
 1012218:	1085883a 	add	r2,r2,r2
 101221c:	1185883a 	add	r2,r2,r6
 1012220:	19c6b03a 	or	r3,r3,r7
 1012224:	14802015 	stw	r18,128(r2)
 1012228:	14c00015 	stw	r19,0(r2)
 101222c:	00800084 	movi	r2,2
 1012230:	30c04015 	stw	r3,256(r6)
 1012234:	88bfe31e 	bne	r17,r2,10121c4 <__register_exitproc+0x50>
 1012238:	30804117 	ldw	r2,260(r6)
 101223c:	11c4b03a 	or	r2,r2,r7
 1012240:	30804115 	stw	r2,260(r6)
 1012244:	003fdf06 	br	10121c4 <__register_exitproc+0x50>
 1012248:	00804074 	movhi	r2,257
 101224c:	1099fa04 	addi	r2,r2,26600
 1012250:	100b883a 	mov	r5,r2
 1012254:	80805215 	stw	r2,328(r16)
 1012258:	003fd606 	br	10121b4 <__register_exitproc+0x40>
 101225c:	00800034 	movhi	r2,0
 1012260:	10800004 	addi	r2,r2,0
 1012264:	1000021e 	bne	r2,zero,1012270 <__register_exitproc+0xfc>
 1012268:	013fffc4 	movi	r4,-1
 101226c:	003fdc06 	br	10121e0 <__register_exitproc+0x6c>
 1012270:	01006404 	movi	r4,400
 1012274:	103ee83a 	callr	r2
 1012278:	1007883a 	mov	r3,r2
 101227c:	103ffa26 	beq	r2,zero,1012268 <__register_exitproc+0xf4>
 1012280:	80805217 	ldw	r2,328(r16)
 1012284:	180b883a 	mov	r5,r3
 1012288:	18000115 	stw	zero,4(r3)
 101228c:	18800015 	stw	r2,0(r3)
 1012290:	80c05215 	stw	r3,328(r16)
 1012294:	18006215 	stw	zero,392(r3)
 1012298:	18006315 	stw	zero,396(r3)
 101229c:	0009883a 	mov	r4,zero
 10122a0:	883fc826 	beq	r17,zero,10121c4 <__register_exitproc+0x50>
 10122a4:	003fd706 	br	1012204 <__register_exitproc+0x90>

010122a8 <register_fini>:
 10122a8:	f800283a 	ret

010122ac <__call_exitprocs>:
 10122ac:	00804074 	movhi	r2,257
 10122b0:	10915704 	addi	r2,r2,17756
 10122b4:	10800017 	ldw	r2,0(r2)
 10122b8:	defff304 	addi	sp,sp,-52
 10122bc:	df000b15 	stw	fp,44(sp)
 10122c0:	d8800115 	stw	r2,4(sp)
 10122c4:	00800034 	movhi	r2,0
 10122c8:	10800004 	addi	r2,r2,0
 10122cc:	1005003a 	cmpeq	r2,r2,zero
 10122d0:	d8800215 	stw	r2,8(sp)
 10122d4:	d8800117 	ldw	r2,4(sp)
 10122d8:	dd400815 	stw	r21,32(sp)
 10122dc:	dd000715 	stw	r20,28(sp)
 10122e0:	10805204 	addi	r2,r2,328
 10122e4:	dfc00c15 	stw	ra,48(sp)
 10122e8:	ddc00a15 	stw	r23,40(sp)
 10122ec:	dd800915 	stw	r22,36(sp)
 10122f0:	dcc00615 	stw	r19,24(sp)
 10122f4:	dc800515 	stw	r18,20(sp)
 10122f8:	dc400415 	stw	r17,16(sp)
 10122fc:	dc000315 	stw	r16,12(sp)
 1012300:	282b883a 	mov	r21,r5
 1012304:	2039883a 	mov	fp,r4
 1012308:	d8800015 	stw	r2,0(sp)
 101230c:	2829003a 	cmpeq	r20,r5,zero
 1012310:	d8800117 	ldw	r2,4(sp)
 1012314:	14405217 	ldw	r17,328(r2)
 1012318:	88001026 	beq	r17,zero,101235c <__call_exitprocs+0xb0>
 101231c:	ddc00017 	ldw	r23,0(sp)
 1012320:	88800117 	ldw	r2,4(r17)
 1012324:	8c802204 	addi	r18,r17,136
 1012328:	143fffc4 	addi	r16,r2,-1
 101232c:	80000916 	blt	r16,zero,1012354 <__call_exitprocs+0xa8>
 1012330:	05bfffc4 	movi	r22,-1
 1012334:	a000151e 	bne	r20,zero,101238c <__call_exitprocs+0xe0>
 1012338:	8409883a 	add	r4,r16,r16
 101233c:	2105883a 	add	r2,r4,r4
 1012340:	1485883a 	add	r2,r2,r18
 1012344:	10c02017 	ldw	r3,128(r2)
 1012348:	a8c01126 	beq	r21,r3,1012390 <__call_exitprocs+0xe4>
 101234c:	843fffc4 	addi	r16,r16,-1
 1012350:	85bff81e 	bne	r16,r22,1012334 <__call_exitprocs+0x88>
 1012354:	d8800217 	ldw	r2,8(sp)
 1012358:	10003126 	beq	r2,zero,1012420 <__call_exitprocs+0x174>
 101235c:	dfc00c17 	ldw	ra,48(sp)
 1012360:	df000b17 	ldw	fp,44(sp)
 1012364:	ddc00a17 	ldw	r23,40(sp)
 1012368:	dd800917 	ldw	r22,36(sp)
 101236c:	dd400817 	ldw	r21,32(sp)
 1012370:	dd000717 	ldw	r20,28(sp)
 1012374:	dcc00617 	ldw	r19,24(sp)
 1012378:	dc800517 	ldw	r18,20(sp)
 101237c:	dc400417 	ldw	r17,16(sp)
 1012380:	dc000317 	ldw	r16,12(sp)
 1012384:	dec00d04 	addi	sp,sp,52
 1012388:	f800283a 	ret
 101238c:	8409883a 	add	r4,r16,r16
 1012390:	88c00117 	ldw	r3,4(r17)
 1012394:	2105883a 	add	r2,r4,r4
 1012398:	1445883a 	add	r2,r2,r17
 101239c:	18ffffc4 	addi	r3,r3,-1
 10123a0:	11800217 	ldw	r6,8(r2)
 10123a4:	1c001526 	beq	r3,r16,10123fc <__call_exitprocs+0x150>
 10123a8:	10000215 	stw	zero,8(r2)
 10123ac:	303fe726 	beq	r6,zero,101234c <__call_exitprocs+0xa0>
 10123b0:	00c00044 	movi	r3,1
 10123b4:	1c06983a 	sll	r3,r3,r16
 10123b8:	90804017 	ldw	r2,256(r18)
 10123bc:	8cc00117 	ldw	r19,4(r17)
 10123c0:	1884703a 	and	r2,r3,r2
 10123c4:	10001426 	beq	r2,zero,1012418 <__call_exitprocs+0x16c>
 10123c8:	90804117 	ldw	r2,260(r18)
 10123cc:	1884703a 	and	r2,r3,r2
 10123d0:	10000c1e 	bne	r2,zero,1012404 <__call_exitprocs+0x158>
 10123d4:	2105883a 	add	r2,r4,r4
 10123d8:	1485883a 	add	r2,r2,r18
 10123dc:	11400017 	ldw	r5,0(r2)
 10123e0:	e009883a 	mov	r4,fp
 10123e4:	303ee83a 	callr	r6
 10123e8:	88800117 	ldw	r2,4(r17)
 10123ec:	98bfc81e 	bne	r19,r2,1012310 <__call_exitprocs+0x64>
 10123f0:	b8800017 	ldw	r2,0(r23)
 10123f4:	147fd526 	beq	r2,r17,101234c <__call_exitprocs+0xa0>
 10123f8:	003fc506 	br	1012310 <__call_exitprocs+0x64>
 10123fc:	8c000115 	stw	r16,4(r17)
 1012400:	003fea06 	br	10123ac <__call_exitprocs+0x100>
 1012404:	2105883a 	add	r2,r4,r4
 1012408:	1485883a 	add	r2,r2,r18
 101240c:	11000017 	ldw	r4,0(r2)
 1012410:	303ee83a 	callr	r6
 1012414:	003ff406 	br	10123e8 <__call_exitprocs+0x13c>
 1012418:	303ee83a 	callr	r6
 101241c:	003ff206 	br	10123e8 <__call_exitprocs+0x13c>
 1012420:	88800117 	ldw	r2,4(r17)
 1012424:	1000081e 	bne	r2,zero,1012448 <__call_exitprocs+0x19c>
 1012428:	89000017 	ldw	r4,0(r17)
 101242c:	20000726 	beq	r4,zero,101244c <__call_exitprocs+0x1a0>
 1012430:	b9000015 	stw	r4,0(r23)
 1012434:	8809883a 	mov	r4,r17
 1012438:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 101243c:	bc400017 	ldw	r17,0(r23)
 1012440:	883fb71e 	bne	r17,zero,1012320 <__call_exitprocs+0x74>
 1012444:	003fc506 	br	101235c <__call_exitprocs+0xb0>
 1012448:	89000017 	ldw	r4,0(r17)
 101244c:	882f883a 	mov	r23,r17
 1012450:	2023883a 	mov	r17,r4
 1012454:	883fb21e 	bne	r17,zero,1012320 <__call_exitprocs+0x74>
 1012458:	003fc006 	br	101235c <__call_exitprocs+0xb0>

0101245c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 101245c:	defffd04 	addi	sp,sp,-12
 1012460:	df000215 	stw	fp,8(sp)
 1012464:	df000204 	addi	fp,sp,8
 1012468:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 101246c:	e0bfff17 	ldw	r2,-4(fp)
 1012470:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1012474:	e0bffe17 	ldw	r2,-8(fp)
 1012478:	1005003a 	cmpeq	r2,r2,zero
 101247c:	1000021e 	bne	r2,zero,1012488 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1012480:	002af070 	cmpltui	zero,zero,43969
 1012484:	00000106 	br	101248c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1012488:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 101248c:	e037883a 	mov	sp,fp
 1012490:	df000017 	ldw	fp,0(sp)
 1012494:	dec00104 	addi	sp,sp,4
 1012498:	f800283a 	ret

0101249c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 101249c:	defffd04 	addi	sp,sp,-12
 10124a0:	dfc00215 	stw	ra,8(sp)
 10124a4:	df000115 	stw	fp,4(sp)
 10124a8:	df000104 	addi	fp,sp,4
 10124ac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10124b0:	e13fff17 	ldw	r4,-4(fp)
 10124b4:	101245c0 	call	101245c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10124b8:	003fff06 	br	10124b8 <_exit+0x1c>
 10124bc:	00000010 	cmplti	zero,zero,0
 10124c0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10124c4:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_0+0x527a0>
 10124c8:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_0+0x11f7c0>
 10124cc:	001b0c0b 	ldhu	zero,27696(zero)
 10124d0:	00000028 	cmpgeui	zero,zero,0
 10124d4:	00000018 	cmpnei	zero,zero,0
 10124d8:	01008508 	cmpgei	r4,zero,532
 10124dc:	0000066c 	andhi	zero,zero,25
 10124e0:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 10124e4:	910a9074 	orhi	r4,r18,10817
 10124e8:	94089209 	0x94089209
 10124ec:	97049606 	br	1013748 <jtag_uart_0+0x344>
 10124f0:	93019f03 	ldbu	r12,1660(r18)
 10124f4:	9c059507 	ldb	r16,5716(r19)
 10124f8:	00000002 	0x2
 10124fc:	00000028 	cmpgeui	zero,zero,0
 1012500:	00000044 	movi	zero,1
 1012504:	01008b74 	movhi	r4,557
 1012508:	00000660 	cmpeqi	zero,zero,25
 101250c:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 1012510:	92099170 	cmpltui	r8,r18,9797
 1012514:	96069408 	cmpgei	et,r18,6736
 1012518:	9c039704 	addi	r16,r19,3676
 101251c:	90019f02 	0x90019f02
 1012520:	9507930a 	0x9507930a
 1012524:	00000005 	stb	zero,0(zero)
 1012528:	010122a8 	cmpgeui	r4,zero,1162
